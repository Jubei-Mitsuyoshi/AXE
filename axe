#!/bin/bash
#Archlinux eXtream rEbuilder




function check_pkg_tag()
{
	 axe_block "Start of check_pkg_tag $1 with $2 $3 $4"
	 
	 local _axe_return
	 _axe_return=0
	
	#first argument is pkg name
		#xxxx pkgbuild name
	#second argument is check for build fail lisings
		# xxx .. check the build fail list xxx is path to list including listname
		#--nofail ..do not check the build fail list
	#third argument is check for build sucess lisings
		# xxx .. check the build sucess list xxx is path to list including listname
		#--nosuc ..do not check the build sucess list
	#fourth argument is check for packager tag
		#--tag .. check the packager variable
		#--tag-all .. check the packager variable ignoring stage mask
		#--notag .. do not check the packager variable
		
		
	if [[ "$2" == "--nofail" ]]; then 
		axe_warn "skipping build fail list check.. check disabled"
	else
		if [[ -s "$2" ]]; then
			axe_info "build fail list check enabled.. checking if ${bldcyn} $1 ${bldwht} is on list ${bldcyn} $2"
#                                  delete comments    | delete emty lines | delete everything after first space | print only package name> to file
			if [[ $(sed '/^\#/d' "$2" | grep -v "^$" | sed 's/ .*//' | grep -Fx "$1") ]]; then
				axe_info "PKGBUILD ${bldcyn} $1 ${bldwht} is on the build fail list $2"
				_axe_return=2
			fi
		else
			axe_fuck " $2 does not exist,this is not fatal but please check the output above"
			any_key
		fi
	fi	
		

	if [[ "$3" == "--nosuc" ]]; then 
		axe_warn "skipping build sucess list check.. check disabled"
	else
		if [[ -s "$3" ]]; then
			axe_info "build sucess list check enabled.. checking if ${bldcyn} $1 ${bldwht} is on list ${bldcyn} $3"
#                                  delete comments    | delete emty lines | delete everything after first space | print only package name> to file
			if [[ $(sed '/^\#/d' "$3" | grep -v "^$" | sed 's/ .*//' | grep -Fx "$1") ]]; then
				axe_info "PKGBUILD ${bldcyn} $1 ${bldwht} is on the build sucsess list $3"
				_axe_return=3
			fi
		else
			axe_fuck " $3 does not exist,this is not fatal but please check the output above"
			any_key
		fi
	fi
	

	
	#check if passed argument has taken the PACKEGER variable, if not report back with return value 1
	
	if [[ "$4" == "--tag" ||  "$4" == "--tag-all" ]]; then
		if [[ "$4" == "--tag-all" ]]; then
			if [[ "$1" == "zlib" || "$1" == "file" || "$1" == "gmp" || "$1" == "mpfr" || "$1" == "libmpc" || "$1" == "attr" || "$1" == "acl" || "$1" == "isl" || "$1" == "cloog" || "$1" == "ppl" ]]; then
				if [[ "$_AXE_MULTILIB_SUFFIX" == "-multilib" ]]; then
					expac "%n %p" | grep "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx "$1" > "$_AXE_DIR/scratch"
					[[ -s "$_AXE_DIR/scratch" ]] && axe_info "PKGBUILD ${bldcyn} $1 ${bldwht}  HAS the axe PACKAGER variable marked as" && cat "$_AXE_DIR/scratch" && _axe_return=15
				else
					expac "%n %p" | grep "$_AXE_PACKAGER_NAME_TOOLCHAIN" | sed 's/ .*//' | grep -Fx "$1" > "$_AXE_DIR/scratch"
					[[ -s "$_AXE_DIR/scratch" ]] && axe_info "PKGBUILD ${bldcyn} $1 ${bldwht}  HAS the axe PACKAGER variable marked as" && cat "$_AXE_DIR/scratch" && _axe_return=14
				fi
			else
				expac "%n %p" | grep "$_AXE_PACKAGER_NAME_STAGE1_BINARIES" | sed 's/ .*//' | grep -Fx "$1" > "$_AXE_DIR/scratch"
				[[ -s "$_AXE_DIR/scratch" ]] && axe_info "PKGBUILD ${bldcyn} $1 ${bldwht}  HAS the axe PACKAGER variable marked as" && cat "$_AXE_DIR/scratch" && _axe_return=13
				
				expac "%n %p" | grep "$_AXE_PACKAGER_NAME_STAGE2_BINARIES" | sed 's/ .*//' | grep -Fx "$1" > "$_AXE_DIR/scratch"
				[[ -s "$_AXE_DIR/scratch" ]] && axe_info "PKGBUILD ${bldcyn} $1 ${bldwht}  HAS the axe PACKAGER variable marked as" && cat "$_AXE_DIR/scratch" && _axe_return=12
				
				expac "%n %p" | grep "$_AXE_PACKAGER_NAME_STAGE3_BINARIES" | sed 's/ .*//' | grep -Fx "$1" > "$_AXE_DIR/scratch"
				[[ -s "$_AXE_DIR/scratch" ]] && axe_info "PKGBUILD ${bldcyn} $1 ${bldwht}  HAS the axe PACKAGER variable marked as" && cat "$_AXE_DIR/scratch" && _axe_return=11
				
				if [[ $_axe_return -lt 4 ]]; then
					expac "%n %p" | grep "$_AXE_SUFFIX_REL" | sed 's/ .*//' | grep -Fx "$1" > "$_AXE_DIR/scratch"
					[[ -s "$_AXE_DIR/scratch" ]] && axe_info "PKGBUILD ${bldcyn} $1 ${bldwht}  DOES NOT HAve the axe PACKAGER variable marked but does have the axe suffix of " && cat "$_AXE_DIR/scratch" && _axe_return=4
				fi
			fi	
			
		else
			if [[ "$1" == "zlib" || "$1" == "file" || "$1" == "gmp" || "$1" == "mpfr" || "$1" == "libmpc" || "$1" == "attr" || "$1" == "acl" || "$1" == "isl" || "$1" == "cloog" || "$1" == "ppl" ]]; then
				if [[ "$_AXE_MULTILIB_SUFFIX" == "-multilib" ]]; then
				
					expac "%n %p" | grep "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx "$1" > "$_AXE_DIR/scratch"
					[[ -s "$_AXE_DIR/scratch" ]] && axe_info "PKGBUILD ${bldcyn} $1 ${bldwht}  HAS the axe PACKAGER variable marked as" && cat "$_AXE_DIR/scratch" && _axe_return=9
				else
					expac "%n %p" | grep "$_AXE_PACKAGER_NAME_TOOLCHAIN" | sed 's/ .*//' | grep -Fx "$1" > "$_AXE_DIR/scratch"
					[[ -s "$_AXE_DIR/scratch" ]] && axe_info "PKGBUILD ${bldcyn} $1 ${bldwht}  HAS the axe PACKAGER variable marked as" && cat "$_AXE_DIR/scratch" && _axe_return=8
				fi
			else
			
				if [[ $_AXE_STAGE -eq 1 ]]; then
					expac "%n %p" | grep "$_AXE_PACKAGER_NAME_STAGE1_BINARIES" | sed 's/ .*//' | grep -Fx "$1" > "$_AXE_DIR/scratch"
					[[ -s "$_AXE_DIR/scratch" ]] && axe_info "PKGBUILD ${bldcyn} $1 ${bldwht}  HAS the axe PACKAGER variable marked as" && cat "$_AXE_DIR/scratch" && _axe_return=7
				fi
				
				if [[ $_AXE_STAGE -eq 2 ]]; then
					expac "%n %p" | grep "$_AXE_PACKAGER_NAME_STAGE2_BINARIES" | sed 's/ .*//' | grep -Fx "$1" > "$_AXE_DIR/scratch"
					[[ -s "$_AXE_DIR/scratch" ]] && axe_info "PKGBUILD ${bldcyn} $1 ${bldwht}  HAS the axe PACKAGER variable marked as" && cat "$_AXE_DIR/scratch" && _axe_return=6
				fi
				
				if [[ $_AXE_STAGE -eq 3 ]]; then
					expac "%n %p" | grep "$_AXE_PACKAGER_NAME_STAGE3_BINARIES" | sed 's/ .*//' | grep -Fx "$1" > "$_AXE_DIR/scratch"
					[[ -s "$_AXE_DIR/scratch" ]] && axe_info "PKGBUILD ${bldcyn} $1 ${bldwht}  HAS the axe PACKAGER variable marked as" && cat "$_AXE_DIR/scratch" && _axe_return=5
				fi
				
				if [[ $_axe_return -lt 4 ]]; then
					expac "%n %p" | grep "$_AXE_SUFFIX_REL" | sed 's/ .*//' | grep -Fx "$1" > "$_AXE_DIR/scratch"
					[[ -s "$_AXE_DIR/scratch" ]] && axe_info "PKGBUILD ${bldcyn} $1 ${bldwht}  DOES NOT HAve the axe PACKAGER variable marked but does have the axe suffix of " && cat "$_AXE_DIR/scratch" && _axe_return=4
				fi
			fi
			
		fi
	else
		axe_warn "skipping packager tag check.. check disabled"
	fi
	
	
	rm -f "$_AXE_DIR/scratch"
	return $_axe_return
	
}



function toolchain_tag_check()
{
	axe_block "Start of toolchain_tag_check"
	
	local _axe_return
	_axe_return=0
	
	if [[ "$_AXE_MULTILIB_SUFFIX" == "-multilib" ]]; then

		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | egrep -i "^gcc-multilib$|^gcc-ada-multilib$|^gcc-fortran-multilib$|^gcc-go-multilib$|^gcc-obj-multilib$|^glibc$|libltdl$|^libtool-multilib$|^gcc-libs-multilib$|^binutils-multilib$|^linux-api-headers$|^lib32-glibc$|^lib32-libltdl$|^lib32-libltdl$|^zlib$|^file$|^gmp$|^mpfr$|^libmpc$|^attr$|^acl$|^isl$|^cloog$|^ppl$" > "$_AXE_DIR/scratch"

	else
		
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN" | sed 's/ .*//' | egrep -i "^gcc$|^gcc-ada$|^gcc-fortran$|^gcc-go$|^gcc-obj$|^glibc$|^libltdl$|^libtool$|^gcc-libs$|^binutils$|^linux-api-headers$|^zlib$|^file$|^gmp$|^mpfr$|^libmpc$|^attr$|^acl$|^isl$|^cloog$|^ppl$" > "$_AXE_DIR/scratch"

	fi
	


	if [[ -s "$_AXE_DIR/scratch" ]]; then
		axe_warn "ok detected that"
		cat "$_AXE_DIR/scratch"
		axe_warn "has been updated or somehow lacks the $_AXE_PACKAGER_NAME tag"
		_axe_return=1
	else
		axe_info "all toolchain components are optimised"
	fi
	
	rm -f "$_AXE_DIR/scratch"
	
	return $_axe_return
	
	#returns
	#0 has the tag---is an i7 toolchain
	#1 does NOT have the i7 tag ---is NOT an i7 toolchain
	
}

function toolchain_notag_check()
{
	axe_block "Start of toolchain_notag_check"
	
	
	local _axe_return
	_axe_return=0
	
	if [[ "$_AXE_MULTILIB_SUFFIX" == "-multilib" ]]; then

		expac "%n %p" | grep "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | egrep -i "^gcc-multilib$|^gcc-ada-multilib$|^gcc-fortran-multilib$|^gcc-go-multilib$|^gcc-obj-multilib$|^glibc$|libltdl$|^libtool-multilib$|^gcc-libs-multilib$|^binutils-multilib$|^linux-api-headers$|^lib32-glibc$|^lib32-libltdl$|^lib32-libltdl$|^zlib$|^file$|^gmp$|^mpfr$|^libmpc$|^attr$|^acl$|^isl$|^cloog$|^ppl$" > "$_AXE_DIR/scratch"

	else
		
		expac "%n %p" | grep "$_AXE_PACKAGER_NAME_TOOLCHAIN" | sed 's/ .*//' | egrep -i "^gcc$|^gcc-ada$|^gcc-fortran$|^gcc-go$|^gcc-obj$|^glibc$|^libltdl$|^libtool$|^gcc-libs$|^binutils$|^linux-api-headers$|^zlib$|^file$|^gmp$|^mpfr$|^libmpc$|^attr$|^acl$|^isl$|^cloog$|^ppl$" > "$_AXE_DIR/scratch"

	fi
	


	if [[ -s "$_AXE_DIR/scratch" ]]; then
		axe_warn "ok detected that"
		cat "$_AXE_DIR/scratch"
		axe_warn "still has the $_AXE_PACKAGER_NAME tag"
		_axe_return=1
	else
		axe_info "all toolchain components are standard"
	fi
	
	rm -f "$_AXE_DIR/scratch"
	
	return $_axe_return
	
	#returns
	#0 has the tag---is an i7 toolchain
	#1 does NOT have the i7 tag ---is NOT an i7 toolchain
	
}

function reset_toolchain()
{
	axe_block "Start of reset_toolchain"
	
	#argument 1
	# xxx package name to display
	
	local _axe_return

	axe_fuck "$1 failed to build, this is a fatal error ,i need to reset the toolchain to arch standard"
	any_key
	pacman -S linux-api-headers glibc "libtool$_AXE_MULTILIB_SUFFIX" libltdl "binutils$_AXE_MULTILIB_SUFFIX" "gcc$_AXE_MULTILIB_SUFFIX" "gcc-ada$_AXE_MULTILIB_SUFFIX" "gcc-fortran$_AXE_MULTILIB_SUFFIX" "gcc-go$_AXE_MULTILIB_SUFFIX" "gcc-libs$_AXE_MULTILIB_SUFFIX" "gcc-objc$_AXE_MULTILIB_SUFFIX" zlib file gmp mpfr libmpc attr acl isl cloog ppl
	if [[ $? -eq 0 ]]; then
		#check reset sucsessfull
		toolchain_notag_check
		if [[ $? -eq 1 ]]; then
			axe_fuck "toolchain reset procedure failed one of the toolchain components still has the tag/tags "
			_axe_return=1
		else
			_axe_return=3
		fi
	else
		axe_fuck "toolchain reset procedure failed pacman bailed out"
		_axe_return=2
	fi
	
	return $_axe_return

}

function mod_axe_repo_entries()
{
	axe_block "Start of mod_axe_repo_entries with $1"
	
	
	#first argument is repo location to switch to
		#--local .. switch to entry for locally hdd repo directory
		#--remote .. switch to entry for remote github repo
		#--st2 .. switch entry to stage 2 binaries
		#--st3 .. switch entry to stage 3 binaries
		#--rem .. just delete all the entries

	#delete them all
		#delete all  entries and comments
		
		sed -i -e '/#AXE-REMOTE-GIT/,+2d' "$_AXE_PACMAN_CONF_PATH"
		sed -i -e '/#AXE-LOCAL/,+2d' "$_AXE_PACMAN_CONF_PATH"
		sed -i -e '/#AXE-STAGE2-BINARIES/,+2d' "$_AXE_PACMAN_CONF_PATH"
		sed -i -e '/#AXE-STAGE2-BINARIES/,+2d' "$_AXE_PACMAN_CONF_PATH"
		
		
		

	case $1 in
		--remote) sed -i "/#\[testing\]/i#AXE-REMOTE-GIT\\
[axegithub]\\
$_AXE_REMOTE_GIT_REPO_ENTRY\\
" "$_AXE_PACMAN_CONF_PATH" ;;
	--local) sed -i "/#\[testing\]/i#AXE-LOCAL\\
[axelocal]\\
Server = file://$_AXE_LOCAL_BINARY_REPO_DIR\\
" "$_AXE_PACMAN_CONF_PATH" ;;
	--st2) sed -i "/#\[testing\]/i#AXE-STAGE2-BINARIES\\
[axest2bin]\\
Server = file://$_AXE_STAGE2_BINARY_REPO_DIR\\
" "$_AXE_PACMAN_CONF_PATH" ;;
	--st3) sed -i "/#\[testing\]/i#AXE-STAGE3-BINARIES\\
[axest3bin]\\
Server = file://$_AXE_STAGE3_BINARY_REPO_DIR\\
" "$_AXE_PACMAN_CONF_PATH" ;;
	esac

	

}

function update_repo_database()
{

	axe_block "Start of update_repo_database $1 with name $2"
	
	local _axe_return
	_axe_return=0
	
#first argument is repo path
	#xxxxx /path/to/repo
#second argument is repo name
#	xxxx repo name

	if [[ -d "$1" ]]; then
		
		cd "$1"
		if [[ -s "$1/$2.db" ]]; then
			axe_info "found a repo database file in $1 deleting it to write a new one"
			rm -f $1/$2.*
			if [[ $? -eq 0 ]]; then
				axe_info "sucsessfully deleted $1/$2.db to write a new one"
			else
				axe_fuck "problem with deleting $1/$2.db old database" 
				_axe_return=2
			fi
		fi
		 
		repo-add "$2.db.tar.gz" *.pkg.tar.xz
		if [[ $? -eq 0 ]]; then
			axe_info "sucsessfully created new $1/$2.db.tar.gz"
		else
			axe_fuck " problem with creating new $1/$2.db.tar.gz"
			_axe_return=4
		fi
	else
		axe_fuck " repo directory does not exist"
		_axe_return=1
	fi

	return $_axe_return
}

function mask_toolchain_upgrades()
{
	axe_block "Start of mask_toolchain_upgrades"
	
	
	local _axe_return
	_axe_return=0
	
	if [[ "$_AXE_MULTILIB_SUFFIX" == "-multilib" ]]; then
		sed -i 's/#IgnorePkg=/IgnorePkg=glibc lib32-glibc libtool-multilib libltdl lib32-libltdl gcc-ada-multilib gcc-fortran-multilib gcc-go-multilib gcc-obj-multilib gcc-multilib gcc-libs-multilib lib32-gcc-libs binutils-multilib linux zlib file gmp mpfr libmpc attr acl isl cloog ppl/' "$_AXE_PACMAN_CONF_PATH"
		if [[ $? -eq 0 ]]; then
			axe_info "sucsessfully written toolchain mask to $_AXE_PACMAN_CONF_PATH"
		else
			axe_fuck "problem with writing toolchain mask to $_AXE_PACMAN_CONF_PATH" 
			any_key 
			nano "$_AXE_PACMAN_CONF_PATH"
			_axe_return=2
		fi
	else
		sed -i 's/#IgnorePkg=/IgnorePkg=glibc libtool libltdl gcc-ada gcc-fortran gcc-go gcc-obj gcc gcc-libs binutils linux zlib file gmp mpfr libmpc attr acl isl cloog ppl/' "$_AXE_PACMAN_CONF_PATH"
		if [[ $? -eq 0 ]]; then
			axe_info "sucsessfully written toolchain mask to $_AXE_PACMAN_CONF_PATH"
		else
			axe_fuck "problem with writing toolchain mask to $_AXE_PACMAN_CONF_PATH"
			any_key
			nano "$_AXE_PACMAN_CONF_PATH"
			_axe_return=3
		fi
	fi
	
	return $_axe_return
	
}

function unmask_toolchain_upgrades()
{
	axe_block "Start of unmask_toolchain_upgrades"
	
	
	local _axe_return
	_axe_return=0
	
	if [[ "$_AXE_MULTILIB_SUFFIX" == "-multilib" ]]; then
		sed -i 's/IgnorePkg=glibc lib32-glibc libtool-multilib libltdl lib32-libltdl gcc-ada-multilib gcc-fortran-multilib gcc-go-multilib gcc-obj-multilib gcc-multilib gcc-libs-multilib lib32-gcc-libs binutils-multilib linux zlib file gmp mpfr libmpc attr acl isl cloog ppl/#IgnorePkg=/' "$_AXE_PACMAN_CONF_PATH"
		if [[ $? -eq 0 ]]; then
			axe_info "sucsessfully unmasked toolchain components friom $_AXE_PACMAN_CONF_PATH"
		else
			axe_fuck "problem with unmasking toolchain components friom $_AXE_PACMAN_CONF_PATH" 
			any_key 
			nano "$_AXE_PACMAN_CONF_PATH"
			_axe_return=2
		fi
	else
		sed -i 's/IgnorePkg=glibc libtool libltdl gcc-ada gcc-fortran gcc-go gcc-obj gcc gcc-libs binutils linux zlib file gmp mpfr libmpc attr acl isl cloog ppl/#IgnorePkg=/' "$_AXE_PACMAN_CONF_PATH"
		if [[ $? -eq 0 ]]; then
			axe_info "sucsessfully unmasked toolchain components friom $_AXE_PACMAN_CONF_PATH"
		else
			axe_fuck "problem with unmasking toolchain components friom $_AXE_PACMAN_CONF_PATH" 
			any_key
			nano "$_AXE_PACMAN_CONF_PATH"
			_axe_return=3
		fi
	fi
	
	return $_axe_return
	
}

function export_pkgbuilds_to_usb()
{
	axe_block "Start of export_pkgbuilds_to_usb from $1 to $2"
	
	local _axe_return
	local _axe_progress
	_axe_progress=0
	_axe_return=0
	
	#argument 1 input folder path
		# xxx /path/to/folder
	#argument 2 usb stick folder name
		# xxx folder name 
	if [[ ! -d "$_AXE_USB_STICK_MNT" ]]; then
		axe_info "creating usb mount dir ${bldcyn} $_AXE_USB_STICK_MNT"
		mkdir "$_AXE_USB_STICK_MNT"
		if [[ $? -eq 0 ]]; then
			_axe_progress=1
		else
			axe_fuck "could not create usb mount dir ${bldcyn} $_AXE_USB_STICK_MNT ${bldwht} aborting"
			_axe_progress=0
		fi
	else
		_axe_progress=1
	fi
	
	if [[ $_axe_progress -eq 1 ]]; then
		axe_info "mounting $_AXE_USB_STICK_DEVICE"
		mount -t vfat "$_AXE_USB_STICK_DEVICE" "$_AXE_USB_STICK_MNT"
		if [[ $? -eq 0 ]]; then
			axe_info "$_AXE_USB_STICK_DEVICE sucsessfully mounted to $_AXE_USB_STICK_MNT"
			
			if [[ ! -d "$_AXE_USB_STICK_MNT/$2" ]]; then
				axe_info "creating usb dir $_AXE_USB_STICK_MNT/$2 to copy PKGBUILDs to"
				mkdir "$_AXE_USB_STICK_MNT/$2"
				if [[ $? -eq 0 ]]; then
					_axe_progress=1
				else
					axe_fuck "could not create usb mount dir $_AXE_USB_STICK_MNT aborting"
					_axe_progress=0
				fi
			else
				_axe_progress=1
			fi
				
			if [[ $_axe_progress -eq 1 ]]; then	
				axe_info "copying over PKGBUILDS from $1 to $_AXE_USB_STICK_MNT/$2"
				
				cp -fr $1/* "$_AXE_USB_STICK_MNT/$2"
				if [[ $? -eq 0 ]]; then
					wait
					axe_info "PKGBUILD dirs sucessfully copied"
				else
					axe_fuck " something is wrong did not copy anything check the code"
					_axe_return=3
				fi
		
				axe_info "UNmounting $_AXE_USB_STICK_DEVICE"
				umount  "$_AXE_USB_STICK_MNT"
				if [[ $? -eq 0 ]]; then
					axe_info "$_AXE_USB_STICK_DEVICE sucsessfully UNmounted"
				else
					axe_fuck " failed in UNmounting $_AXE_USB_STICK_DEVICE which will still be active"
					_axe_return=2
				fi
			fi
			
		else
			axe_fuck " failed to mount$_AXE_USB_STICK_DEVICE to $_AXE_USB_STICK_MNT"
			_axe_return=1
		fi
	fi


	return $_axe_return
}

function configure_desktop()
{
	axe_block "Start of configure_desktop"
	
	local _axe_return
	_axe_return=0
	
	cp -pf $_AXE_BINARY_EXPORT_DIR/* "$_AXE_STAGE2_BINARY_REPO_DIR"
	if [[ $? -eq 0 ]]; then
		rm -f /var/cache/pacman/pkg/*
		rm -f $_AXE_PACMAN_CACHE_DIR/*
		update_repo_database "$_AXE_STAGE2_BINARY_REPO_DIR" "axest2bin"
		if [[ $? -eq 0 ]]; then
			pacman -Syu --needed --noconfirm
				if [[ $? -eq 0 ]]; then
					pacman -S muffin-wm cinnamon nemo-fm compiz-ubuntu gnome-terminal alacarte gparted packagekit
					if [[ $? -eq 0 ]]; then
					#configure the SOB
					# startx and xinitrc, or custom start please
						
				
				
				
				
				
				
				
						axe_info "Desktop sucsessfully installed and setup"
					else
						axe_fuck "pacman failed to install cinnamon and or associated desktop bits  check the output above"
						_axe_return=1
						any_key
					fi
				
					
				else
					axe_fuck "pacman system update failed check the output above"
					_axe_return=2
					any_key
				fi

		else
			axe_fuck "update_repo_database failed check the output above"
			_axe_return=3
			any_key
		fi			

	else
		axe_fuck "failed to copy stage 2 binaries to $_AXE_STAGE2_BINARY_REPO_DIR"
		_axe_return=4
		any_key
	fi
	
	return $_axe_return
}

function configure_rc_conf()
{
	axe_block "Start of configure_rc_conf"
	
	axe_info "now you need to configure rc.conf remember to add dbus and dhcpcd deamons"
	any_key 
	nano /etc/rc.conf
	

}


function configure_axeinit()
{
	axe_block "Start of configure_axeinit"
	
	axe_info "now you need to configure axe-init.conf"
	any_key 
	nano /etc/runit/axe-init.conf
	

}


# build functions **********************************************************************************************************************************************
#***************************************************************************************************************************************************************

function build_axe_pkgbuild2()
{

	#first argument is pkg name
		#xxxx ..package name
	#second is argument fetch location
		# xxx .. /path/to/input/dir location to search for pkgbuild dir
	#third is build location path
		# xxx .. /path/to/build/location copy pkgbuild to this		
	#fourth argument is makepkg opts array
	
	local axe_pkg_name
	local axe_pkg_path
	local axe_build_path
	
	axe_pkg_name="$1"
	shift
	axe_pkg_path="$1"
	shift
	axe_build_path="$1"
	shift
	
	find "$axe_pkg_path" -type d -name "$axe_pkg_name" -exec cp -rfp {} "$axe_build_path" \; 2> /dev/null
	if [[ ! -d "$axe_build_path/$axe_pkg_name" ]]; then
		axe_fuck "ok something is seariously wrong cannot locate the $axe_pkg_name pkg build directory in my lookup locations check the code!!!"
		any_key
		_axe_return=1
	else
		axe_info "found ${bldcyn} $axe_pkg_name PKGBUILD in $axe_pkg_path ${bldwht}fetching and using it as source PKGBUILD"
	fi
	
	makepkg --asroot "$axe_pkg_name" "$@"

}
function build_axe_pkgbuild()
{
	axe_block "Start of build_axe_pkgbuild ${bldcyn}$1 with $2 $3 $4 $5 $6 $7 $8 $9 ${10}"
	
	
	local _axe_error
	local _axe_return
	local _axe_pkg_flags
	_axe_pkg_flags=""
	_axe_return=0
	_axe_error=0

	#first argument is pkg name
		#xxxx ..package name
	#second argument is what kind of install
		#--install ..build package and install
		#--noinstall .. build package, export complete binary to repo, but do not install
		#--install-force .. build package and install usinf force flag ( implies --con)
	#third argument weather user intervention is needed
		#--nocon ..user needs to press buttons
		#--con ..no interventin necessary
	#fourth argument fetch location
		# xxx .. /path/to/input/dir to be used as single source
	#fith argument force -o3 build as preferance
		#--o3
		#--o2
	#sith argument passthrough for check_pkg_tag --fail
		# --nofail
		# xxx ... full path (including name) to fail list
	#seventh argument passthrough for check_pkg_tag --suc
		# --nosuc
		# xxx ... full path (including name) to sucsess list
	#eightth argument passthrough for check_pkg_tag --tag
		# --notag
		# --tag
	#ninth argument apply the check function ?
		# --check
		# --nocheck
			
	#tenth argument (optional) is it a toolchain component syntax ${10}
		# --toolchain is a toolchain component
		# xxx not a toolchain component
	
	#check the package packager variable , if its mine skip the build
	check_pkg_tag "$1" "$6" "$7" "$8"
	if [[ $? -gt 0 ]]; then
		_axe_return=8
	else
		
		if [[ $5 == "--o3" ]]; then
		
			axe_info "-O3 has been chosen as default for this package"
			
			# ram with -O3*********************************************************************************************************
		
			# switch to -O3
			sed -i 's/-O2/-O3/' "$_AXE_MAKEPKG_CONF_PATH"
			
			copy_pkgbuild_single "$1" "$_AXE_RAM_BUILD_DIR" "$4"
			if [[ $? -eq 0 ]]; then
			
				cd "$_AXE_RAM_BUILD_DIR/$1"
				
				[[ $1 == "linux" && $_AXE_LINUX_MENU_YES -eq 1 ]] && sed -i 's/#make nconfig/make nconfig/' "$_AXE_RAM_BUILD_DIR/linux/PKGBUILD"
					
				
				_axe_error=0
				if [[ $3 == "--nocon" ]]; then
					makepkg --asroot --noconfirm "$9" -csf
					_axe_error=$?
				fi
				if [[ $3 == "--con" ]]; then
					makepkg --asroot "$9" -csf
					_axe_error=$?
				fi
					
				if [[ $_axe_error -eq 0 ]]; then
				_axe_pkg_flags=$(sed '/^\#/d' '/etc/makepkg.conf' | grep -m 1 'CFLAGS=' | sed 's/\"//g')
				
					if [[ $2 == "--install" && $3 == "--nocon" ]]; then
						pacman -U --noconfirm *.pkg.tar.xz
						if [[ $? -eq 0 ]]; then
							cp -pf  $_AXE_RAM_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
							if [[ $? -eq 0 ]]; then
								echo -e "BUILT AND INSTALLED AND EXPORTED AT $(date) $1 FROM $_AXE_RAM_BUILD_DIR  TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags" > "$_AXE_BINARY_EXPORT_DIR/$1-$(date +%Y%m%d-%H%M%S).datestamp"
								[[ ${10} == "--toolchain" ]] && echo -e "BUILT AND INSTALLED AND EXPORTED $1 AT $(date) FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags" >> "$_AXE_LOGS_DIR/toolchain_build_log"
								axe_info "BUILT AND INSTALLED AND EXPORTED AT $(date) $1  FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR"
								[[ ! $7 == "--nosuc" ]] && echo "$1 " >> "$7"
								echo "$1 " >> "$_AXE_LISTS_DIR/master_build_sucsess.list"
								_axe_return=0
							else
								axe_fuck "$1 FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
								_axe_return=7
							fi
						else
							axe_fuck "$1 FAILED to install even when asked to"
							echo "$1" >> "$_AXE_LISTS_DIR/build_fail_to_install.list"				
							_axe_return=6
						fi
					fi
					
					if [[ $2 == "--install" && $3 == "--con" ]]; then
						pacman -U *.pkg.tar.xz
						if [[ $? -eq 0 ]]; then
							cp -pf  $_AXE_RAM_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
							if [[ $? -eq 0 ]]; then
								echo -e "BUILT AND INSTALLED AND EXPORTED AT $(date) $1  FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags" > "$_AXE_BINARY_EXPORT_DIR/$1-$(date +%Y%m%d-%H%M%S).datestamp"
								[[ ${10} == "--toolchain" ]] && echo -e "BUILT AND INSTALLED AND EXPORTED $1 AT $(date) FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags" >> "$_AXE_LOGS_DIR/toolchain_build_log"
								axe_info "BUILT AND INSTALLED AND EXPORTED AT $(date) $1  FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR"
								[[ ! $7 == "--nosuc" ]] && echo "$1 " >> "$7"
								echo "$1 " >> "$_AXE_LISTS_DIR/master_build_sucsess.list"
								_axe_return=0
							else
								axe_fuck "$1 FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
								_axe_return=7
							fi
						
						else
							axe_fuck "$1 FAILED to install even when asked to"
							echo "$1" >> "$_AXE_LISTS_DIR/build_fail_to_install.list"			
							_axe_return=6
						fi
					fi
					
					if [[ $2 == "--install-force" ]]; then
						pacman -Uf *.pkg.tar.xz
						if [[ $? -eq 0 ]]; then
							cp -pf  $_AXE_RAM_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
							if [[ $? -eq 0 ]]; then
								echo -e "BUILT AND INSTALLED AND EXPORTED -- WITH THE PACMAN FORCE OPTION -- AT $(date) $1  FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags" > "$_AXE_BINARY_EXPORT_DIR/$1-$(date +%Y%m%d-%H%M%S).datestamp"
								[[ ${10} == "--toolchain" ]] && echo -e "BUILT AND INSTALLED AND EXPORTED -- WITH THE PACMAN FORCE OPTION -- $1 AT $(date) FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags" >> "$_AXE_LOGS_DIR/toolchain_build_log"
								axe_info "BUILT AND INSTALLED AND EXPORTED -- WITH THE PACMAN FORCE OPTION -- AT $(date) $1  FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR"
								[[ ! $7 == "--nosuc" ]] && echo "$1 " >> "$7"
								echo "$1 " >> "$_AXE_LISTS_DIR/master_build_sucsess.list"
								_axe_return=0
							else
								axe_fuck "$1 FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
								_axe_return=7
							fi
						
						else
							axe_fuck "$1 FAILED to install even when asked to"
							echo "$1" >> "$_AXE_LISTS_DIR/build_fail_to_install.list"			
							_axe_return=6
						fi
					fi
					
					if [[ $2 == "--noinstall" ]]; then
						cp -pf  $_AXE_RAM_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
						if [[ $? -eq 0 ]]; then
							echo -e "BUILT AND EXPORTED ONLY $(date) $1 FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags" > "$_AXE_BINARY_EXPORT_DIR/$1-$(date +%Y%m%d-%H%M%S).datestamp"
							[[ ${10} == "--toolchain" ]] && echo -e "BUILT AND EXPORTED ONLY $1 AT $(date) FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags" >> "$_AXE_LOGS_DIR/toolchain_build_log"
							axe_info "BUILT AND EXPORTED ONLY $(date) $1  FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR"
							[[ ! $7 == "--nosuc" ]] && echo "$1 " >> "$7"
								echo "$1 " >> "$_AXE_LISTS_DIR/master_build_sucsess.list"
							_axe_return=0
						else
							axe_fuck "$1 FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
							_axe_return=7
						fi
					fi
					
				else
					axe_fuck "$1 FAILED to build with -O3 from $_AXE_RAM_BUILD_DIR $(date)"
					_axe_return=5
				fi
				
				cd /root/
				rm -fr "$_AXE_RAM_BUILD_DIR/$1"
				
			else
				_axe_return=9
			fi
			
			

					#uncomment MAKEFLAGS
					sed -i 's/#MAKEFLAGS/MAKEFLAGS/' "$_AXE_MAKEPKG_CONF_PATH"
					cd /root/
					rm -fr "$_AXE_HDD_BUILD_DIR/$1"
					
				else
					_axe_return=9
				fi
			fi
		fi
	fi
	
		#Returns
			#0-4 good builds
			#0 o3 ram
			#1 o3hd
			#2 o2ram
			#3 o2hdd
			#4 o2jopts-off
			#5 failed to build
			#6 failed to install
			#7 failed to export
			#8 package was excluded because of check_pkg_tag check
			#8 failed to fetch
			
			
	return $_axe_return
	
}

function build_axe_x64_pkgbuild()
{
	axe_block "Start of build_axe_x64_pkgbuild ${bldcyn}$1"
	
	
	local _axe_return

	_axe_return=0


	#first argument is pkg name
		#xxxx ..package name
	
	
		
			
	copy_pkgbuild_single "$1" "$_AXE_RAM_BUILD_DIR" "$_AXE_PKGBUILD_DIR"
	if [[ $? -eq 0 ]]; then
	
		cd "$_AXE_RAM_BUILD_DIR/$1"
		
			
		makepkg --asroot --noconfirm --nocheck --log -cf
			
		if [[ $? -eq 0 ]]; then
			
			cp -pf  $_AXE_RAM_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR_X64"
			if [[ $? -eq 0 ]]; then
				echo -e "BUILT AND EXPORTED IN X64 MODE  ONLY $(date) $1  FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR_X64" > "$_AXE_BINARY_EXPORT_DIR_X64/$1-$(date +%Y%m%d-%H%M%S).datestamp"
				axe_info "BUILT AND EXPORTED IN X64 MODE ONLY $(date) $1  FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR_X64"
				_axe_return=0
			else
				axe_fuck "$1 FAILED to copy to $_AXE_BINARY_EXPORT_DIR_X64"
				_axe_return=1
			fi
			
		else
			axe_fuck "$1 failed to build in x64 mode $(date)"
			_axe_return=3
			#lets log this build fail
			mkdir -pv "$_AXE_FAIL_BUILD_LOGS_DIR/$1/"
			cp -p $_AXE_RAM_BUILD_DIR/$1/*.log "$_AXE_FAIL_BUILD_LOGS_DIR/$1/"
		
			cd /root/
			rm -fr "$_AXE_RAM_BUILD_DIR/$1"
		fi
		

	else
		axe_fuck "$1 failed to fetch source for build"
	fi

	
		#Returns
	
	return $_axe_return
	
}


# toolchain build functions ***********************************************************************************************************************************
#***************************************************************************************************************************************************************



function build_libtool()
{
	axe_block "Start of build libtool$_AXE_MULTILIB_SUFFIX pass $_AXE_LIBTOOL_REP with $1 $2"

	local _axe_return
	local _axe_pkg_flags
	local _axe_error
	_axe_error=0
	_axe_pkg_flags=""
	_axe_return=0
	
	
	#first input argument
		#export ... do not install packages, copy them to local repo and export entire pkgbuild dir
		#install ... do not export packages just install them
		#install-export ..... both export the packages and install them
		
	#second input argument weather to run checks
		#--check ... apply checks
		#--no-check ...or blank... ... do not apply checks
		
	#build libtool, from tmp dir never had any problem building  from ram
	
	
	
	copy_pkgbuild_single "libtool$_AXE_MULTILIB_SUFFIX" "$_AXE_RAM_BUILD_DIR"
	if [[ $? -eq 0 ]]; then 
	
		cd "$_AXE_RAM_BUILD_DIR/libtool$_AXE_MULTILIB_SUFFIX"
		_axe_pkg_flags=$(sed '/^\#/d' '/etc/makepkg.conf' | grep -m 1 'CFLAGS=' | sed 's/\"//g')
		
		if [[ $2 == "--check" ]]; then
			makepkg --asroot --noconfirm --check -csf
			_axe_error=$?
		else
			makepkg --asroot --noconfirm -csf
			_axe_error=$?
		fi
			
		if [[ $_axe_error -eq 0 ]]; then
			case $1 in
				"install") pacman -U --noconfirm *.pkg.tar.xz 
							if [[ $? -eq 0 ]]; then
								echo -e "BUILT AND INSTALLED libtool$_AXE_MULTILIB_SUFFIX pass $_AXE_LIBTOOL_REP $(date) from $_AXE_RAM_BUILD_DIR \n $_axe_pkg_flags" >> "$_AXE_LOGS_DIR/toolchain_build_log"
								let _AXE_LIBTOOL_REP=$_AXE_LIBTOOL_REP+1
								_axe_return=2
							else
								axe_fuck "libtool$_AXE_MULTILIB_SUFFIX FAILED to install even when asked to"
								echo -e "libtool$_AXE_MULTILIB_SUFFIX or one of the split packages failed to install" >> "$_AXE_LISTS_DIR/build_fail_to_install.list"
								_axe_return=6
							fi ;;
				"export") cp -pf  $_AXE_RAM_BUILD_DIR/libtool$_AXE_MULTILIB_SUFFIX/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
							if [[ $? -eq 0 ]]; then
								echo -e "BUILT AND EXPORTED ONLY libtool$_AXE_MULTILIB_SUFFIX pass $_AXE_LIBTOOL_REP $(date) from $_AXE_RAM_BUILD_DIR \n $_axe_pkg_flags" >> "$_AXE_LOGS_DIR/toolchain_build_log"
								echo -e "BUILT AND EXPORTED ONLY libtool$_AXE_MULTILIB_SUFFIX pass $_AXE_LIBTOOL_REP $(date) from $_AXE_RAM_BUILD_DIR \n $_axe_pkg_flags" > "$_AXE_BINARY_EXPORT_DIR/libtool$_AXE_MULTILIB_SUFFIX-$(date +%Y%m%d-%H%M%S).datestamp"
								let _AXE_LIBTOOL_REP=$_AXE_LIBTOOL_REP+1
								_axe_return=2
							else
								axe_fuck "libtool$_AXE_MULTILIB_SUFFIX FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
								_axe_return=7
							fi ;;
				"install-export") pacman -U --noconfirm *.pkg.tar.xz
							if [[ $? -eq 0 ]]; then 
								cp -pf  $_AXE_RAM_BUILD_DIR/libtool$_AXE_MULTILIB_SUFFIX/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
								if [[ $? -eq 0 ]]; then
									echo -e "BUILT AND INSTALLED AND EXPORTED libtool$_AXE_MULTILIB_SUFFIX pass $_AXE_LIBTOOL_REP $(date) from $_AXE_RAM_BUILD_DIR \n $_axe_pkg_flags" >> "$_AXE_LOGS_DIR/toolchain_build_log"
									echo -e "BUILT AND INSTALLED AND EXPORTED libtool$_AXE_MULTILIB_SUFFIX pass $_AXE_LIBTOOL_REP $(date) from $_AXE_RAM_BUILD_DIR \n $_axe_pkg_flags" > "$_AXE_BINARY_EXPORT_DIR/libtool$_AXE_MULTILIB_SUFFIX-$(date +%Y%m%d-%H%M%S).datestamp"
									let _AXE_LIBTOOL_REP=$_AXE_LIBTOOL_REP+1
									_axe_return=2
								else
									axe_fuck "libtool$_AXE_MULTILIB_SUFFIX FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
									_axe_return=7
								fi
							else
								axe_fuck "libtool$_AXE_MULTILIB_SUFFIX FAILED to install even when asked to"
								echo "libtool$_AXE_MULTILIB_SUFFIX or one of the split packages failed to install" >> "$_AXE_LISTS_DIR/build_fail_to_install.list"
								_axe_return=6
							fi ;;
			esac
			
		else
			echo "!!!!!!!!!!!build fails libtool$_AXE_MULTILIB_SUFFIX pass $_AXE_LIBTOOL_REP $(date)" >> "$_AXE_LOGS_DIR/toolchain_build_log"
			mkdir -pv "$_AXE_FAIL_BUILD_LOGS_DIR/libtool$_AXE_MULTILIB_SUFFIX$_AXE_LIBTOOL_REP"
			cp -p $_AXE_RAM_BUILD_DIR/libtool$_AXE_MULTILIB_SUFFIX/*.log "$_AXE_FAIL_BUILD_LOGS_DIR/libtool$_AXE_MULTILIB_SUFFIX"
			_axe_return=5
		fi
		cd /root/
		rm -rf "$_AXE_RAM_BUILD_DIR/libtool$_AXE_MULTILIB_SUFFIX"
	else
		_axe_return=9
	fi
	
						#Returns
			#0-4 good builds
			#0 o3 ram#######not used
			#1 o3hd#######not used
			#2 o2ram
			#3 o2hdd#######not used
			#4 o2jopts-off#######not used
			#5 failed to build
			#6 failed to install
			#7 failed to export
			#8 package was excluded because of check_pkg_tag check#######not used
			#9 failed to fetch

	return $_axe_return
	
}

function build_libltdl()
{
	axe_block "Start of build_libltdl pass $_AXE_LIBLTDL_REP with $1"
	
	local _axe_return
	local _axe_pkg_flags
	local _axe_error
	_axe_error=0
	_axe_pkg_flags=""
	_axe_return=0
	
		#first argument weather to run checks
		#--check ... apply checks
		#--no-check ...or blank... ... do not apply checks
	
	
	copy_pkgbuild_single "libtool" "$_AXE_RAM_BUILD_DIR"
	if [[ $? -eq 0 ]]; then
		cd "$_AXE_RAM_BUILD_DIR/libtool"
		_axe_pkg_flags=$(sed '/^\#/d' '/etc/makepkg.conf' | grep -m 1 'CFLAGS=' | sed 's/\"//g')
		
		if [[ $1 == "--check" ]]; then
			makepkg --asroot --noconfirm --check -csf
			_axe_error=$?
		else
			makepkg --asroot --noconfirm -csf
			_axe_error=$?
		fi
			
		if [[ $_axe_error -eq 0 ]]; then
			pacman -U --noconfirm libltdl*.pkg.tar.xz
			if [[ $? -eq 0 ]]; then
				cp -fp  libltdl*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
				if [[ $? -eq 0 ]]; then
					echo -e "BUILT AND INSTALLED AND EXPORTED libltdl pass $_AXE_LIBLTDL_REP $(date) from $_AXE_HDD_BUILD_DIR installed seperate from libtool for the libtool-multilib toolchain \n $_axe_pkg_flags" > "$_AXE_BINARY_EXPORT_DIR/libltdl$_AXE_MULTILIB_SUFFIX-$(date +%Y%m%d-%H%M%S).datestamp"
					echo -e "BUILT AND INSTALLED AND EXPORTED libltdl pass $_AXE_LIBLTDL_REP $(date) from $_AXE_HDD_BUILD_DIR installed seperate from libtool for the libtool-multilib toolchain \n $_axe_pkg_flags" >> "$_AXE_LOGS_DIR/toolchain_build_log"
					let _AXE_LIBLTDL_REP=$_AXE_LIBLTDL_REP+1
					_axe_return=2
				else
					axe_fuck "libltdl FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
					_axe_return=7
				fi
			else
				axe_fuck "libltdl FAILED to install even when asked to"
				echo "libltdl failed to install" >> "$_AXE_LISTS_DIR/build_fail_to_install.list"
				_axe_return=6
			fi	
			
		else
			echo "!!!!!!!!!!!build fails libltdl pass $_AXE_LIBLTDL_REP $(date)" >> "$_AXE_LOGS_DIR/toolchain_build_log"
			mkdir -pv "$_AXE_FAIL_BUILD_LOGS_DIR/libltdl$_AXE_LIBLTDL_REP"
			cp -p $_AXE_RAM_BUILD_DIR/libtool/*.log "$_AXE_FAIL_BUILD_LOGS_DIR/libltdl"
			_axe_return=5
		fi
		cd /root/
		rm -rf "$_AXE_RAM_BUILD_DIR/libtool"
	else
		_axe_return=9
	fi

	
	return $_axe_return
	
								#Returns
			#0-4 good builds
			#0 o3 ram#######not used
			#1 o3hd#######not used
			#2 o2ram
			#3 o2hdd#######not used
			#4 o2jopts-off#######not used
			#5 failed to build
			#6 failed to install
			#7 failed to export
			#8 package was excluded because of check_pkg_tag check#######not used
			#9 failed to fetch
	
}


# higher build functions ****(**********************************************************************************************************************************
#***************************************************************************************************************************************************************

function build_toolchain()
{
	axe_block "Start of build_toolchain"
	
	local _axe_return
	local _axe_stage_tmp
	local _axe_toolchain_test
	_axe_toolchain_test="--nocheck"
	_axe_stage_tmp=0
	_axe_return=0
	
	toolchain_tag_check > /dev/null
	if [[ $? -eq 1 ]]; then
		axe_info "ok about to build the toolchain"
		axe_info "but first please decide on the testing i should do, please note full tests are totally optional, i offer the choice for the paranoid amongst you"
		axe_menu_active Y "to apply full tests to the toolchain ${_AXE_ANY_OTHER_KEY} to apply minimal tests to the toolchain"
		read -s -n1 _AXE_TMP_CHAR
		axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
		if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
			_axe_toolchain_test="--check"
		fi
		
	
		axe_info "linux-api-headers -> glibc -> binutils$_AXE_MULTILIB_SUFFIX -> gcc$_AXE_MULTILIB_SUFFIX ->libtool$_AXE_MULTILIB_SUFFIX -> binutils$_AXE_MULTILIB_SUFFIX -> glibc -> gcc$_AXE_MULTILIB_SUFFIX -> libtool$_AXE_MULTILIB_SUFFIX"
		axe_info "this is a fucking long build so piss off, get a coffe, roll a spliff and check on me in a couple of hours"
		
		echo "starting toolchain build $(date)" >> "$_AXE_LOGS_DIR/toolchain_build_log"
		
		#toolchain is stage 3 by default
		_axe_stage_tmp=$_AXE_STAGE
		export _AXE_STAGE=3
		#toolchain has own packager
		
		if [[ "$_AXE_MULTILIB_SUFFIX" == "-multilib" ]]; then
			sed -i "s/PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB\"/" "$_AXE_MAKEPKG_CONF_PATH"
			if [[ $? -eq 0 ]]; then
				sed -i "s/PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB\"/" "$_AXE_DIR/makepkg.conf.axemodified"
				if [[ ! $? -eq 0 ]]; then
					axe_fuck "toolchain packager tag--- $_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB in $_AXE_DIR/makepkg.conf.axemodified ----failed application "
					_axe_return=5
					any_key
				fi
			else
				axe_fuck "toolchain packager tag--- $_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB in $_AXE_MAKEPKG_CONF_PATH ----failed application "
				_axe_return=4
				any_key
			fi
		else
			sed -i "s/PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_TOOLCHAIN\"/" "$_AXE_MAKEPKG_CONF_PATH"
			if [[ $? -eq 0 ]]; then
				sed -i "s/PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_TOOLCHAIN\"/" "$_AXE_DIR/makepkg.conf.axemodified"
				if [[ ! $? -eq 0 ]]; then
					axe_fuck "toolchain packager tag--- $_AXE_PACKAGER_NAME_TOOLCHAIN in $_AXE_DIR/makepkg.conf.axemodified ----failed application "
					_axe_return=5
					any_key
				fi
			else
				axe_fuck "toolchain packager tag--- $_AXE_PACKAGER_NAME_TOOLCHAIN in $_AXE_MAKEPKG_CONF_PATH ----failed application "
				_axe_return=4
				any_key
			fi
		fi
		
		if [[ $_axe_return -eq 0 ]]; then
			build_linux_api_headers "install-export"
			if [[ $? -gt 5 ]]; then
				reset_toolchain "linux-api-headers"
				_axe_return=$?
			fi
		fi
		
		if [[ $_axe_return -eq 0 ]]; then
			build_glibc "install"
			if [[ $? -gt 5 ]]; then
				reset_toolchain "glibc pass 1"
				_axe_return=$?
			fi
		fi
		
		if [[ $_axe_return -eq 0 ]]; then
			build_binutils "install"
			if [[ $? -gt 5 ]]; then
				reset_toolchain "binutils pass 1"
				_axe_return=$?
			fi
		fi
		
		if [[ $_axe_return -eq 0 ]]; then
			build_gcc "install"
			if [[ $? -gt 5 ]]; then
				reset_toolchain "gcc pass 1"
				_axe_return=$?
			fi
		fi
		
		if [[ $_axe_return -eq 0 ]]; then
			build_libtool "install"
			if [[ $? -gt 5 ]]; then
				reset_toolchain "libtool pass 1"
				_axe_return=$?
			fi
		fi
		
		if [[ $_axe_return -eq 0 && "$_AXE_MULTILIB_SUFFIX" ]]; then
			build_libltdl
			if [[ $? -gt 5 ]]; then
				reset_toolchain "libltdl pass 1"
				_axe_return=$?
			fi
		fi
	
		if [[ $_axe_return -eq 0 ]]; then
			build_binutils "install-export" $_axe_toolchain_test
			if [[ $? -gt 5 ]]; then
				reset_toolchain "binutils pass 2"
				_axe_return=$?
			fi
		fi
	
		if [[ $_axe_return -eq 0 ]]; then
			build_glibc "install-export" $_axe_toolchain_test
			if [[ $? -gt 5 ]]; then
				reset_toolchain "glibc pass 2"
				_axe_return=$?
			fi
		fi
		

		if [[ $_axe_return -eq 0 ]]; then
			build_axe_pkgbuild "zlib" --install --nocon "$_AXE_PKGBUILD_DIR" "$_AXE_OPT_TYPE" --nofail --nosuc --notag --nocheck --toolchain
			if [[ $? -eq 5 || $? -eq 6 || $? -eq 7 || $? -eq 9 ]]; then
				reset_toolchain "zlib"
				_axe_return=$?
			fi
		fi
		
		if [[ $_axe_return -eq 0 ]]; then
			build_axe_pkgbuild "file" --install --nocon "$_AXE_PKGBUILD_DIR" "$_AXE_OPT_TYPE" --nofail --nosuc --notag --nocheck --toolchain
			if [[ $? -eq 5 || $? -eq 6 || $? -eq 7 || $? -eq 9 ]]; then
				reset_toolchain "file"
				_axe_return=$?
			fi
		fi
		
		if [[ $_axe_return -eq 0 ]]; then
			build_axe_pkgbuild "attr" --install --nocon "$_AXE_PKGBUILD_DIR" "$_AXE_OPT_TYPE" --nofail --nosuc --notag $_axe_toolchain_test --toolchain
			if [[ $? -eq 5 || $? -eq 6 || $? -eq 7 || $? -eq 9 ]]; then
				reset_toolchain "attr"
				_axe_return=$?
			fi
		fi
		
		if [[ $_axe_return -eq 0 ]]; then
			build_axe_pkgbuild "gmp" --install --nocon "$_AXE_PKGBUILD_DIR" "$_AXE_OPT_TYPE" --nofail --nosuc --notag $_axe_toolchain_test --toolchain
			if [[ $? -eq 5 || $? -eq 6 || $? -eq 7 || $? -eq 9 ]]; then
				reset_toolchain "gmp"
				_axe_return=$?
			fi
		fi
		
		if [[ $_axe_return -eq 0 ]]; then
			build_axe_pkgbuild "isl" --install --nocon "$_AXE_PKGBUILD_DIR" "$_AXE_OPT_TYPE" --nofail --nosuc --notag $_axe_toolchain_test --toolchain
			if [[ $? -eq 5 || $? -eq 6 || $? -eq 7 || $? -eq 9 ]]; then
				reset_toolchain "isl"
				_axe_return=$?
			fi
		fi
		
		if [[ $_axe_return -eq 0 ]]; then
			build_axe_pkgbuild "mpfr" --install --nocon "$_AXE_PKGBUILD_DIR" "$_AXE_OPT_TYPE" --nofail --nosuc --notag $_axe_toolchain_test --toolchain
			if [[ $? -eq 5 || $? -eq 6 || $? -eq 7 || $? -eq 9 ]]; then
				reset_toolchain "mpfr"
				_axe_return=$?
			fi
		fi
		
		if [[ $_axe_return -eq 0 ]]; then
			build_axe_pkgbuild "libmpc" --install --nocon "$_AXE_PKGBUILD_DIR" "$_AXE_OPT_TYPE" --nofail --nosuc --notag $_axe_toolchain_test --toolchain
			if [[ $? -eq 5 || $? -eq 6 || $? -eq 7 || $? -eq 9 ]]; then
				reset_toolchain "libmpc"
				_axe_return=$?
			fi
		fi
		

		
		if [[ $_axe_return -eq 0 ]]; then
			build_axe_pkgbuild "acl" --install --nocon "$_AXE_PKGBUILD_DIR" "$_AXE_OPT_TYPE" --nofail --nosuc --notag $_axe_toolchain_test --toolchain
			if [[ $? -eq 5 || $? -eq 6 || $? -eq 7 || $? -eq 9 ]]; then
				reset_toolchain "acl"
				_axe_return=$?
			fi
		fi
		

		
		if [[ $_axe_return -eq 0 ]]; then
			build_axe_pkgbuild "glpk" --install --nocon "$_AXE_PKGBUILD_DIR" "$_AXE_OPT_TYPE" --nofail --nosuc --notag --nocheck --toolchain
			if [[ $? -eq 5 || $? -eq 6 || $? -eq 7 || $? -eq 9 ]]; then
				reset_toolchain "glpk"
				_axe_return=$?
			fi
		fi
		
		if [[ $_axe_return -eq 0 ]]; then
			build_axe_pkgbuild "ppl" --install --nocon "$_AXE_PKGBUILD_DIR" "$_AXE_OPT_TYPE" --nofail --nosuc --notag --nocheck --toolchain
			if [[ $? -eq 5 || $? -eq 6 || $? -eq 7 || $? -eq 9 ]]; then
				reset_toolchain "ppl"
				_axe_return=$?
			fi
		fi
		
		# note cloog is marked without check because it always fails chec, will investigate from gentoo		
		if [[ $_axe_return -eq 0 ]]; then
			build_axe_pkgbuild "cloog" --install --nocon "$_AXE_PKGBUILD_DIR" "$_AXE_OPT_TYPE" --nofail --nosuc --notag --nocheck --toolchain
			if [[ $? -eq 5 || $? -eq 6 || $? -eq 7 || $? -eq 9 ]]; then
				reset_toolchain "cloog"
				_axe_return=$?
			fi
		fi
		
		if [[ $_axe_return -eq 0 ]]; then
			build_gcc "install-export" $_axe_toolchain_test
			if [[ $? -gt 5 ]]; then
				reset_toolchain "gcc pass 2"
				_axe_return=$?
			fi
		fi
		
		if [[ $_axe_return -eq 0 ]]; then
			build_libtool "install-export" $_axe_toolchain_test
			if [[ $? -gt 5 ]]; then
				reset_toolchain "libtool pass 2"
				_axe_return=$?
			fi
		fi

		
		if [[ $_axe_return -eq 0 && "$_AXE_MULTILIB_SUFFIX" ]]; then
			build_libltdl
			if [[ $? -gt 5 ]]; then
				reset_toolchain "libltdl pass 2"
				_axe_return=$?
			fi
		fi
		
		#reset axe stage for next builds
		_AXE_STAGE=$_axe_stage_tmp
		export _AXE_STAGE
		# back to stage n packager
		if [[ $_AXE_STAGE -eq 1 ]]; then
			sed -i "s/PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_STAGE1_BINARIES\"/" "$_AXE_MAKEPKG_CONF_PATH"
			if [[ $? -eq 0 ]]; then
				sed -i "s/PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_STAGE1_BINARIES\"/" "$_AXE_DIR/makepkg.conf.axemodified"
				if [[ ! $? -eq 0 ]]; then
					axe_fuck "packager tag--- refused to reset to $_AXE_PACKAGER_NAME_STAGE1_BINARIES in $_AXE_DIR/makepkg.conf.axemodified"
					_axe_return=7
					any_key
				fi
			else
				axe_fuck "packager tag--- refused to reset to $_AXE_PACKAGER_NAME_STAGE1_BINARIES in $_AXE_MAKEPKG_CONF_PATH"
				_axe_return=6
				any_key
			fi
		fi
		
		if [[ $_AXE_STAGE -eq 2 ]]; then
			sed -i "s/PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_STAGE2_BINARIES\"/" "$_AXE_MAKEPKG_CONF_PATH"
			if [[ $? -eq 0 ]]; then
				sed -i "s/PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_STAGE2_BINARIES\"/" "$_AXE_DIR/makepkg.conf.axemodified"
				if [[ ! $? -eq 0 ]]; then
					axe_fuck "packager tag--- refused to reset to $_AXE_PACKAGER_NAME_STAGE2_BINARIES in $_AXE_DIR/makepkg.conf.axemodified"
					_axe_return=9
					any_key
				fi
			else
				axe_fuck "packager tag--- refused to reset to $_AXE_PACKAGER_NAME_STAGE2_BINARIES in $_AXE_MAKEPKG_CONF_PATH"
				_axe_return=8
				any_key
			fi
		fi
		
		if [[ $_AXE_STAGE -eq 3 ]]; then
			sed -i "s/PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_STAGE3_BINARIES\"/" "$_AXE_MAKEPKG_CONF_PATH"
			if [[ $? -eq 0 ]]; then
				sed -i "s/PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_STAGE3_BINARIES\"/" "$_AXE_DIR/makepkg.conf.axemodified"
				if [[ ! $? -eq 0 ]]; then
					axe_fuck "packager tag--- refused to reset to $_AXE_PACKAGER_NAME_STAGE3_BINARIES in $_AXE_DIR/makepkg.conf.axemodified"
					_axe_return=11
					any_key
				fi
			else
				axe_fuck "packager tag--- refused to reset to $_AXE_PACKAGER_NAME_STAGE3_BINARIES in $_AXE_MAKEPKG_CONF_PATH"
				_axe_return=10
				any_key
			fi
		fi
		
	
		if [[ $_axe_return -eq 0 ]]; then
			mask_toolchain_upgrades
		fi


	else
	
		axe_info "toolchain already built skipping"
		_axe_return=3
	fi
	
	return $_axe_return
}

function build_list()
{
	axe_block "Start of  build_list $1 with $2 $3 $4"
	
# first argument
	#list to work on
	#xxxx   /path/to/xxx.list

# second argument (note list overide overides this)
	#--nofail ... do not check fail list
	#xxxx   /path/to/xxx.list .....fail to work on 
	
# third argument (note list overide overides this)
	#--nosuc ... do not check sucsess list
	#xxxx   /path/to/xxx.list .... sucess list to work on	
	
# fourth argument
	#--notag ... do not check the packager tag
	#--tag ... check the packager tag
	
	local _axe_build_overide
	local _axe_return
	local _axe_pkgname
	local _axe_line_number
	
	_axe_line_number=1
	_axe_pkgname=""
	_axe_return=0

	axe_info "ok about to build list $1"


	echo "" > "$_AXE_LISTS_DIR/fails_display.list"
	
	#clean list
	# delete comments | delete emty lines | delete everything after first space > to file
#	sed '/^\#/d' "$1" | grep -v "^$" | sed 's/ .*//' > "$_AXE_LISTS_DIR/working_on.list"
	
#	sed '/^\#/d' "$1" | grep -v "^$" > "$_AXE_LISTS_DIR/working_on_overide.list"
	
	
	for _axe_pkgname in $(sed '/^\#/d' "$1" | grep -v "^$" | sed 's/ .*//'); do

		_axe_build_overide=($(sed '/^\#/d' "$1" | grep -v "^$" | sed $_axe_line_number'q;d' | sed "s/$_axe_pkgname //"))
		
		
		let _axe_line_number=$_axe_line_number+1

		if [[ ! ${_axe_build_overide[0]} == "" ]]; then
			axe_info "building $_axe_pkgname in overide mode with the following flag array ${_axe_build_overide[0]} ${_axe_build_overide[1]} ${_axe_build_overide[2]} ${_axe_build_overide[3]} ${_axe_build_overide[4]} ${_axe_build_overide[5]} ${_axe_build_overide[6]} ${_axe_build_overide[7]} ${_axe_build_overide[8]}"
			build_axe_pkgbuild "$_axe_pkgname" "${_axe_build_overide[0]}" "${_axe_build_overide[1]}" "${_axe_build_overide[2]}" "${_axe_build_overide[3]}" "${_axe_build_overide[4]}" "${_axe_build_overide[5]}" "${_axe_build_overide[6]}" "${_axe_build_overide[7]}" "${_axe_build_overide[8]}"
			case $? in				
				5) echo "BUILD FAIL ----------------- $_axe_pkgname" >> "$_AXE_LISTS_DIR/fails_display.list"
				_axe_return=1 ;;
				6) echo "INSTALL FAIL ----------------- $_axe_pkgname" >> "$_AXE_LISTS_DIR/fails_display.list"
				_axe_return=1  ;;
				7) echo "EXPORT FAIL ----------------- $_axe_pkgname" >> "$_AXE_LISTS_DIR/fails_display.list"
				_axe_return=1  ;;
				9) echo "FIND FAIL ----------------- $_axe_pkgname" >> "$_AXE_LISTS_DIR/fails_display.list"
				_axe_return=1  ;;
			esac
	
		else
			axe_info "building $_axe_pkgname in standard mode with the following flag array --noinstall --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE  --fail --suc --notag"
			build_axe_pkgbuild "$_axe_pkgname" --noinstall --nocon "$_AXE_PKGBUILD_DIR" "$_AXE_OPT_TYPE"  "$2" "$3" "$4" $_AXE_GLOBAL_CHECK
			case $? in				
				5) echo "BUILD FAIL ----------------- $_axe_pkgname" >> "$_AXE_LISTS_DIR/fails_display.list"
				_axe_return=1 ;;
				6) echo "INSTALL FAIL ----------------- $_axe_pkgname" >> "$_AXE_LISTS_DIR/fails_display.list"
				_axe_return=1  ;;
				7) echo "EXPORT FAIL ----------------- $_axe_pkgname" >> "$_AXE_LISTS_DIR/fails_display.list"
				_axe_return=1  ;;
				9) echo "FIND FAIL ----------------- $_axe_pkgname" >> "$_AXE_LISTS_DIR/fails_display.list"
				_axe_return=1  ;;
			esac
		fi
		
		
	done
	
	
	return $_axe_return

}

function build_x64()
{
	axe_block "Start of  build_x64 $1"
	
# first argument
	#list to work on
	#xxxx   /path/to/xxx.list

	
	local _axe_return
	local _axe_pkgname_x64
	
	_axe_pkgname_x64=""
	_axe_return=0

	#swap makepkg.conf with original, rendering biaries x64


	echo "" "$_AXE_LISTS_DIR/fails_display.list"
	
	#clean list
	# delete comments | delete emty lines | delete everything after first space > to file
	sed '/^\#/d' "$1" | grep -v "^$" | sed 's/ .*//' > "$_AXE_LISTS_DIR/working_on.list"
	
	
	for _axe_pkgname_x64 in $(cat "$_AXE_LISTS_DIR/working_on.list"); do



		axe_info "building $_axe_pkgname_x64 in standard mode with the following flag array --noinstall --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE  --fail --suc --notag"
		build_axe_x64_pkgbuild "$_axe_pkgname_x64"
		case $? in				
			1) echo "BUILD FAIL ----------------- $_axe_pkgname_x64" >> "$_AXE_LISTS_DIR/fails_display.list"
			_axe_return=1 ;;
			3) echo "FIND FAIL ----------------- $_axe_pkgname_x64" >> "$_AXE_LISTS_DIR/fails_display.list"
			_axe_return=1  ;;
		esac
		
		
	done
	
	#swap makepkg.conf back to optimised
	
	rm -f "$_AXE_LISTS_DIR/working_on.list"
	
	return $_axe_return

}

# main menu functions *******************************************************************************************************************************************
#***************************************************************************************************************************************************************

function stage2_finish()
{
	axe_block "Start of stage2_finish"
	
	local _axe_return
	
	_axe_return=0
	
		
	#copy what are now stage 2 binaries to their repo folder
	
	cp -pf $_AXE_BINARY_EXPORT_DIR/* "$_AXE_STAGE2_BINARY_REPO_DIR"
	if [[ $? -eq 0 ]]; then
		rm -f /var/cache/pacman/pkg/*
		rm -f $_AXE_PACMAN_CACHE_DIR/*
		update_repo_database "$_AXE_STAGE2_BINARY_REPO_DIR" "axest2bin"
		if [[ $? -eq 0 ]]; then
			mod_axe_repo_entries --st2
			if [[ $? -eq 0 ]]; then
				pacman -Syu --needed --noconfirm
				if [[ $? -eq 0 ]]; then
					pacman -Rssn dmraid cronie libwacom libvirt eeze pup-volume-monitor thunar udevil spacefm
					if [[ $? -eq 0 ]]; then
						axe_info "All stage 2 interim functions completed sucessfully"
					else
						axe_fuck "pacman failed to remove some dead weight"
						_axe_return=1
						any_key
					fi	
				else
					axe_fuck "pacman system update failed check the output above"
					_axe_return=1
					any_key
				fi

			else
				axe_fuck "mod_axe_repo_entries failed check the output above"
				_axe_return=2
				any_key
			fi	
		else
			axe_fuck "update_repo_database failed check the output above"
			_axe_return=3
			any_key
		fi		
			
	else
		axe_fuck "failed to copy stage 2 binaries to $_AXE_STAGE2_BINARY_REPO_DIR"
		_axe_return=5
		any_key
	fi


	return $_axe_return

}

function stage3_finish()
{
	axe_block "Start of stage3_finalise"

	local _axe_return
	_axe_return=0
		
	#copy what are now stage 3 binaries to their repo folder
	
	cd "$_AXE_BINARY_EXPORT_DIR"
	
	cp -pf $_AXE_BINARY_EXPORT_DIR/* "$_AXE_STAGE3_BINARY_REPO_DIR"
	if [[ $? -eq 0 ]]; then
		dir "$_AXE_STAGE3_BINARY_REPO_DIR"
		axe_info "please check your packages have been copied"
		any_key
		rm -f /var/cache/pacman/pkg/*
		rm -f $_AXE_PACMAN_CACHE_DIR/*
		update_repo_database "$_AXE_STAGE3_BINARY_REPO_DIR" "axest3bin"
		if [[ $? -eq 0 ]]; then
			mod_axe_repo_entries --st3
			if [[ $? -eq 0 ]]; then
				pacman -Syu --needed --noconfirm
				if [[ $? -eq 0 ]]; then
					pacman -Rs $(pacman -Qtdq)
					if [[ $? -eq 0 ]]; then
						axe_info "All stage 3 finalise functions completed sucessfully"
					else
						axe_fuck "pacman opperation failed check the output above"
						_axe_return=4
						any_key
					fi
				else
					axe_fuck "pacman system update failed check the output above"
					_axe_return=1
					any_key
				fi
			else
				axe_fuck "mod_axe_repo_entries failed check the output above"
				_axe_return=2
				any_key
			fi	
		else
			axe_fuck "update_repo_database failed check the output above"
			_axe_return=3
			any_key
		fi		
	else
		axe_fuck "failed to copy stage 2 binaries to $_AXE_STAGE2_BINARY_REPO_DIR"
		_axe_return=5
		any_key
	fi


	
	return $_axe_return

}

function get_git()
{
	axe_block "Start of get_git $1 copy to $2"
	
	local _axe_return
	_axe_return=0
	
	#argument 1 git url
		# xxx git : giturl
	#argument 2 path to git directory
		# xxx /path/to/git
	

	
	if [[ ! -d $1 ]]; then
		
		axe_info "fetching git please wait this is a long download"
		git clone "$1" "$2"
		if [[ $? -eq 0 ]]; then
			axe_info "Git sucessfully downloaded"
			_axe_return=0
		else
			axe_fuck "git has failed to download please check the code,your internet connection, or try again"
			_axe_return=2
		fi

	
	else
		axe_info "git already downloaded you need to refresh instead"
		_axe_return=1
	fi
	
	return $_axe_return

}

function refresh_git()
{
	axe_block "Start of refresh_git &1"
	
	local _axe_return
	_axe_return=0

	#argument 1 path to git
		# xxx /path/to/copy/from
	
	if [[ -d $1 ]]; then
		cd "$1"
		axe_info "updating git please wait"
		git pull origin
		if [[ $? -eq 0 ]]; then
			axe_info "git sucessfully updated"
		else
			axe_fuck " git has failed to update please check the code, your internet connection or try again"
			_axe_return=1
		fi

	else
		axe_info "git has not yet been downloaded please download before updating"
		_axe_return=2
	fi

	
	return $_axe_return
	
}

function fill_pkgbuild_dir_from_usb()
{
	axe_block "Start of fill_pkgbuild_dir_from_usb $1"
	
	#argument 1 path to copy pkgbuilds to
		# xxx /path/to/copy/to
		
		
	local _axe_return
	_axe_return=0
	
	axe_info "about to copy files from your usb stick, i expect to find the files in"
	axe_info "$_AXE_USB_STICK_MNT/pkgbuilds/<pkgbuild directories> for pkgbuild files and"
	axe_info "if the paths are different on your machine you need to ${_AXE_CTRLC} and either modify your machine or just modify my code"
	axe_info "my path is in the variables right at the top of my code listing , you cant miss it!"
	any_key
	
	
	if [[ ! -d "$_AXE_USB_STICK_MNT" ]]; then
		axe_info "creating usb mount dir $_AXE_USB_STICK_MNT"
		mkdir "$_AXE_USB_STICK_MNT"
	fi
	
	axe_info "mounting $_AXE_USB_STICK_DEVICE"
	mount -t vfat "$_AXE_USB_STICK_DEVICE" "$_AXE_USB_STICK_MNT"
	if [[ $? -eq 0 ]]; then
		axe_info "$_AXE_USB_STICK_DEVICE sucsessfully mounted to $_AXE_USB_STICK_MNT"
		
		if [[ -d "$_AXE_USB_STICK_MNT/$_AXE_USB_MAINTAINED_PKGBUILD_DIR" ]]; then
			axe_info "copying over input PKGBUILDS from $_AXE_USB_STICK_MNT/$_AXE_USB_MAINTAINED_PKGBUILD_DIR to $1"
			rm -fr $1/*
			cp -pfr $_AXE_USB_STICK_MNT/$_AXE_USB_MAINTAINED_PKGBUILD_DIR/* "$1"
			if [[ $? -eq 0 ]]; then
				wait
				axe_info "PKGBUILD dirs sucessfully copied"
				_axe_return=0
			else
				axe_fuck " something is wrong did not copy anything check sources in $_AXE_USB_STICK_MNT/$_AXE_USB_MAINTAINED_PKGBUILD_DIR"
				_axe_return=1
			fi
		else
			axe_fuck " $_AXE_USB_STICK_MNT/$_AXE_USB_MAINTAINED_PKGBUILD_DIR does not exist aborting"
			_axe_return=2
		fi
		axe_info "UNmounting $_AXE_USB_STICK_DEVICE"
		umount  "$_AXE_USB_STICK_MNT"
		if [[ $? -eq 0 ]]; then
			axe_info "$_AXE_USB_STICK_DEVICE sucsessfully UNmounted"
		else
			axe_fuck " failed in UNmounting $_AXE_USB_STICK_DEVICE which will still be active"
			_axe_return=3
		fi
		
	else
		axe_fuck " failed to mount$_AXE_USB_STICK_DEVICE to $_AXE_USB_STICK_MNT"
		_axe_return=4
	fi

	
	return $_axe_return
}


function fetch_sources()
{
	axe_block "Start of fetch_sources $2 to $1 with $3"
	
	#argument 1 path to destination dir
		# xxx /path/to/destination/dir
	#argument 2 path to list to use including listname
		# xxx /path/to/list.list
	#argument 3 do not sync deps (optional )
		# --nosync  .. no deps sync
		# xxx or blank  .. sync deps

	
	local _axe_nmcap_outout
	local _axe_fetch_problem
	local _axe_tag_problem
	local _axe_pkgbuild_problem
	local _axe_extract_problem
	local _axe_copy_problem
	local _axe_sync_problem
	local _axe_pkgbuild_aur
	local _axe_pkgbuild_abs
	local _axe_pkgbuild_dir
	local _axe_makepkg_return
	local _axe_deps_to_sync
	local _axe_pkgname
	local _axe_filename
	local _axe_return
	
	_axe_pkgname=""
	_axe_filename=""
	_axe_deps_to_sync=""
	_axe_makepkg_return=0
	_axe_tag_problem=0
	_axe_copy_problem=0
	_axe_fetch_problem=0
	_axe_extract_problem=0
	_axe_pkgbuild_problem=0
	_axe_nmcap_outout=""
	_axe_pkgbuild_abs=0
	_axe_pkgbuild_aur=0
	_axe_pkgbuild_dir=0
	_axe_return=0
	_axe_sync_problem=0
	
	abs
	
	#reset list so we dont get confused over runs
	echo "" > "$_AXE_LISTS_DIR/src_fetch_errors.list"
	

#	sed '/^\#/d' "$2" | grep -v "^$" | sed 's/ .*//' > "$_AXE_LISTS_DIR/fetch_sources_working_on.list"
	
	#clean list
	# delete comments | delete emty lines | delete everything after first space > to file
	for _axe_pkgname in $(sed '/^\#/d' "$2" | grep -v "^$" | sed 's/ .*//'); do
		#checkif package already feched and decompressed 
		_axe_pkgbuild_aur=0
		_axe_pkgbuild_abs=0
		_axe_pkgbuild_dir=0
		
		if [[ ! -d "$1"/"$_axe_pkgname" ]]; then
			_axe_fetch_problem=0
			find "$_AXE_INPUT_PKGBUILD_DIR" -type d -name "$_axe_pkgname" -exec cp -rp {} "$_AXE_RAM_BUILD_DIR" \; 2> /dev/null
			if [[ ! -d "$_AXE_RAM_BUILD_DIR/$_axe_pkgname" ]]; then
		
				find /var/abs -type d -name "$_axe_pkgname" -exec cp -rp {} "$_AXE_RAM_BUILD_DIR" \; 2> /dev/null
				if [[ ! -d "$_AXE_RAM_BUILD_DIR/$_axe_pkgname" ]]; then
				
					cd "$_AXE_RAM_BUILD_DIR"
					yaourt -G --noconfirm "$_axe_pkgname"
					cd /root/
					if [[ ! -d "$_AXE_RAM_BUILD_DIR/$_axe_pkgname" ]]; then
						axe_fuck "ok something is seariously wrong cannot locate $_axe_pkgname pkg build directory in my lookup locations check the code!!!"
						echo "+++++++++tag application problem ++++++++++++++ $_axe_pkgname name does not exist in $_AXE_INPUT_PKGBUILD_DIR AUR or ABS" >> "$_AXE_LISTS_DIR/src_fetch_errors.list"
						_axe_fetch_problem=1
						any_key
					else
						axe_info "found ${bldcyn} $_axe_pkgname ${bldwht}PKGBUILD in ${bldcyn} AUR ${bldwht} fetching and using it as source PKGBUILD"
						_axe_pkgbuild_aur=1
					fi
									
				else
					axe_info "found ${bldcyn} $_axe_pkgname ${bldwht}PKGBUILD in ${bldcyn} /var/abs ${bldwht} fetching and using it as source PKGBUILD"
					_axe_pkgbuild_abs=1
				fi	
		
			else
				axe_info "found ${bldcyn} $_axe_pkgname ${bldwht}PKGBUILD in ${bldcyn} $_AXE_INPUT_PKGBUILD_DIR ${bldwht}fetching and using it as source PKGBUILD"
				_axe_pkgbuild_dir=1
			fi
		
		
			if [[ $_axe_fetch_problem -eq 0 ]]; then
			
				#apply the axe rel only to non maintained packages
				if [[ $_axe_pkgbuild_aur -eq 1 || $_axe_pkgbuild_abs -eq 1 ]]; then
					stamp_pkgbuild "$_AXE_RAM_BUILD_DIR/$_axe_pkgname" --norc
					if [[ $? -eq 0 ]]; then
						axe_info "running nmcap on ${bldcyn} $_AXE_RAM_BUILD_DIR/$_axe_pkgname/PKGBUILD"
						cd "$_AXE_RAM_BUILD_DIR/$_axe_pkgname"
						_axe_nmcap_outout=$(namcap PKGBUILD)
						if [[ "$_axe_nmcap_outout" ]]; then
							axe_warn "nmcap is saying something about $_axe_pkgname please check the output"
							axe_warn "$_axe_nmcap_outout"
							echo -e "$_axe_pkgname generated the following warning \n $_axe_nmcap_outout \n" >> "$_AXE_LISTS_DIR/src_fetch_errors.list"
						fi
					else	
						axe_fuck "tag application problem !!!!!!! am logging it !!"
						echo "+++++++++ tag application problem ++++++++++++++ $_axe_pkgname did not accept the axe modifications" >> "$_AXE_LISTS_DIR/src_fetch_errors.list"
						_axe_tag_problem=1
					fi
				else

					cd "$_AXE_RAM_BUILD_DIR/$_axe_pkgname"
					_axe_nmcap_outout=$(namcap PKGBUILD)
					if [[ "$_axe_nmcap_outout" ]]; then
						axe_info "${bldcyn}$_axe_nmcap_outout"
						axe_warn "nmcap is saying something about $_axe_pkgname please check the output"
						echo -e "$_axe_pkgname generated the following warning \n  $_axe_nmcap_outout \n " >> "$_AXE_LISTS_DIR/src_fetch_errors.list"
					fi
				fi
	
				cd "$_AXE_RAM_BUILD_DIR/$_axe_pkgname"
				
				if [[ $3 == "--nosync" ]]; then
					axe_warn "skipping.... sync of package $_axe_pkgname dsabled"
				else
					axe_info "sync package $_axe_pkgname deps ${bldcyn}using makpkg method"
					makepkg --asroot --nobuild --syncdeps --noconfirm
#					if [[ ! $? -eq 0 ]]; then
#						axe_info "sync package $_axe_pkgname deps using ${bldcyn}axe native method method"
#						_axe_deps_to_sync=$(axe_get_deps "$_AXE_RAM_BUILD_DIR/$_axe_pkgname")
#						if [[ $_axe_deps_to_sync ]]; then
#							pacman -S --needed --noconfirm $(axe_get_deps "$_AXE_RAM_BUILD_DIR/$_axe_pkgname")
							if [[ ! $? -eq 0 ]]; then
								axe_warn "failed to sync deps you need to check your internet connection or we are talking a pakage name as a dep that does not exist, sometiomes happens dude !"
								echo "+++++++++ dep sync problem ++++++++++++++ $_axe_pkgname failed to sync dependencies" >> "$_AXE_LISTS_DIR/src_fetch_errors.list"
								_axe_sync_problem=1
							fi
#						else
#							axe_warn "no deps detected (which is strange) not attempting to sync"
#						fi
#					fi
				fi
					
				makepkg --asroot --allsource --noconfirm --force
				if [[ $? -eq 0 ]]; then
					if [[ "$_axe_pkgname" == "attr" || "$_axe_pkgname" == "acl" || "$_axe_pkgname" == "doxygen" ]]; then
						cp -pf  $_AXE_RAM_BUILD_DIR/$_axe_pkgname/*$_AXE_SUFFIX_REL.src.tar.gz "$1"
						if [[ ! $? -eq 0 ]]; then
							_axe_copy_problem=1
							echo -e "+++++++++ copy problem ++++++++++++++ $_axe_pkgname did not copy to $1 " >> "$_AXE_LISTS_DIR/src_fetch_errors.list"
						fi
						cp -pf  $_AXE_RAM_BUILD_DIR/$_axe_pkgname/*$_AXE_SUFFIX_REL.src.tar.gz "$_AXE_SRC_EXPORT_DIR"
						if [[ ! $? -eq 0 ]]; then 
							_axe_copy_problem=1 
							echo -e "+++++++++ copy problem ++++++++++++++ $_axe_pkgname did not copy to $_AXE_SRC_EXPORT_DIR " >> "$_AXE_LISTS_DIR/src_fetch_errors.list"
						fi
					else
						cp -pf  $_AXE_RAM_BUILD_DIR/$_axe_pkgname/*.src.tar.gz "$1"
						if [[ ! $? -eq 0 ]]; then
							_axe_copy_problem=1
							echo -e "+++++++++ copy problem ++++++++++++++ $_axe_pkgname did not copy to $1 " >> "$_AXE_LISTS_DIR/src_fetch_errors.list"
						fi
						cp -pf  $_AXE_RAM_BUILD_DIR/$_axe_pkgname/*.src.tar.gz "$_AXE_SRC_EXPORT_DIR"
						if [[ ! $? -eq 0 ]]; then 
							_axe_copy_problem=1 
							echo -e "+++++++++ copy problem ++++++++++++++ $_axe_pkgname did not copy to $_AXE_SRC_EXPORT_DIR " >> "$_AXE_LISTS_DIR/src_fetch_errors.list"
						fi
					fi

					cd "$1"
					for _axe_filename in *.src.tar.gz 
						do
							tar -xzf "$_axe_filename"
							if [[ ! $? -eq 0 ]]; then
								axe_fuck "failed to extract $_axe_filename in $1 "
								echo -e "+++++++++ extract problem ++++++++++++++ $_axe_filename did not extract propperly" >> "$_AXE_LISTS_DIR/src_fetch_errors.list"		
								_axe_extract_problem=1
							fi
						done
					rm -f *.src.tar.gz
					cd /root/
					rm -fr "$_AXE_RAM_BUILD_DIR/$_axe_pkgname"
				else
					cd /root/
					rm -fr "$_AXE_RAM_BUILD_DIR/$_axe_pkgname"
					axe_fuck "$_axe_pkgname failed to make a --allsource archive, normally a validity or download problem"
					echo "+++++++++ PKGBUILD problem ++++++++++++++ $_axe_pkgname PKGBUILD validity or download problem" >> "$_AXE_LISTS_DIR/src_fetch_errors.list"
					_axe_pkgbuild_problem=1
				fi
				
			fi			
			
		else
			axe_info "package already collected skipping ${bldcyn} $_axe_pkgname"
		fi

		
	done
		
	[[ $_axe_fetch_problem -eq 1 || $_axe_tag_problem -eq 1 || $_axe_pkgbuild_problem -eq 1 || $_axe_extract_problem -eq 1 || $_axe_copy_problem -eq 1 || $_axe_sync_problem -eq 1 ]] && _axe_return=1
	

	return $_axe_return
	
}

function update_pkgbuild_dir()
{
	axe_block "Start of update_pkgbuild_dir $1 with $2"


	#first argument is path to folder to check
		#xxx /path/to/folder
	#argument 2 integrity check overide
		# --noint ... no integ check
		# --int ... do integ check
	
	#reset list so we dont get confused over runs
	echo "" > "$_AXE_LISTS_DIR/update_pkgbuild_dir_problems.list"
	#remove updatables from last run
	rm -fr $_AXE_DEV_UPDATE_EXPORT_DIR/*

	local _axe_process_problem
	local _axe_version_problem
	local _axe_abs_location
	local _axe_vercmp_return
	local _axe_pkgname
	local _axe_return
	local _axe_version_array_dir
	local _axe_version_array_abs
	local _axe_version_array_aur
	local _axe_maintained_pkgbuilds
	_axe_pkgname=0
	_axe_version_problem=0
	_axe_process_problem=0
	_axe_abs_location=""
	_axe_vercmp_return=0
	_axe_return=0
	_axe_maintained_pkgbuilds=""
	
	
	abs
	
		#	_axe_abs_ver= ${_axe_version_array_abs[1]}
		#	_axe_abs_rel= ${_axe_version_array_abs[2]}
		#	_axe_dir_ver= "${_axe_version_array_dir[1]}"
		#	_axe_dir_rel= $_arch_rel = "${_axe_version_array_dir[3]}"
		#	_axe_dir_axe_rel= "${_axe_version_array_dir[4]}"
		#	axe native flag = "${_axe_version_array_dir[5]}"
		#	split package flag = "${_axe_version_array_dir[5]}"
		#	_axe_aur_ver  "${_axe_version_array_aur[1]}"
		#   _axe_aur_rel   "${_axe_version_array_aur[2]}"
			
			#output order of axe_get_vers 
				#$pkgname(0) 
				#$pkgver(1)  
				#$pkgrel(2) 
				#$_arch_rel(3)
				#$_axe_rel(4) / axe_native_rel (4)
				#axe native flag = "axis" / "arch" (5)
				#split package flag = "split" / "single" (6)
	
	
	cd $1
	
	find * -prune -type d > "$_AXE_LISTS_DIR/update_pkgbuild_dir.list"
	
	cd "$_AXE_INPUT_PKGBUILD_DIR"
	
	find * -prune -type d > "$_AXE_LISTS_DIR/maintained_pkgbuilds.list"
	
	cd /root/
	
	for _axe_pkgname in $(cat "$_AXE_LISTS_DIR/update_pkgbuild_dir.list"); do
	
		_axe_abs_location=""
		_axe_abs_location=$(find "/var/abs" -type d -name "$_axe_pkgname")
	
		unset _axe_version_array_dir
		_axe_version_array_dir=($(axe_get_vers "$1/$_axe_pkgname"))
		
		#check if pck is on axe native list
		if [[ "${_axe_version_array_dir[5]}" == 'axis' ]]; then
			axe_warn "$_axe_pkgname not found but its an AXE native package hence keeping up to date is on you"
		else
	
			if [[ $_axe_abs_location ]]; then
			
				axe_info "$_axe_pkgname found in ABS"
				axe_info "abs location for  $_axe_pkgname is $_axe_abs_location"
			
				unset _axe_version_array_abs
				_axe_version_array_abs=($(axe_get_vers "$_axe_abs_location"))
				if [[ "${_axe_version_array_dir[0]}" == "$_axe_pkgname" && "${_axe_version_array_abs[0]}" == "$_axe_pkgname" ]]; then
				
			
					#						abs ver										abs rel                                       dir ver										dir rel
					if [[ ! "${_axe_version_array_abs[1]}" == "null"  &&  ! "${_axe_version_array_abs[2]}" == "null"  && ! "${_axe_version_array_dir[1]}" == "null" && ! "${_axe_version_array_dir[3]}" == "null" ]]; then
					
						axe_info "$_axe_pkgname version from ABS is ${bldcyn} ${_axe_version_array_abs[1]}-${_axe_version_array_abs[2]}" 
						axe_info "$_axe_pkgname version from $1 is ${bldcyn} ${_axe_version_array_dir[1]}-${_axe_version_array_dir[3]}" 
						axe_info "$_axe_pkgname axe pkgrel from $1 is ${bldcyn} ${_axe_version_array_dir[4]}"
						
						_axe_vercmp_return=$(vercmp "${_axe_version_array_abs[1]}-${_axe_version_array_abs[2]}" "${_axe_version_array_dir[1]}-${_axe_version_array_dir[3]}")
						
						[[ $_axe_vercmp_return -eq 0 ]] && axe_info "versions are the same ${bldcyn} no action taken" 
						[[ $_axe_vercmp_return -lt 0 ]] && axe_info "$1 version is greater than ABS version ${bldcyn} no action taken" 
						if [[ $_axe_vercmp_return -gt 0 ]]; then
							# is this package on the maintained list
							if [[ $(grep -Fx "$_axe_pkgname" "$_AXE_LISTS_DIR/maintained_pkgbuilds.list") ]]; then
								axe_fuck "$_axe_pkgname is out of date and its a maintained package so following standard procedure and exporting the tagged PKGBUILD to $_AXE_DEV_UPDATE_EXPORT_DIR and moving on to the next one" 
								echo "$_axe_pkgname from $1  is older than the AUR AUR VER=$_axe_aur_ver-$_axe_aur_rel DEV VER=$_axe_dir_ver-$_axe_dir_rel" >> "$_AXE_LISTS_DIR/update_pkgbuild_dir_problems.list"
								find /var/abs -type d -name "$_axe_pkgname" -exec cp -rpf {} "$_AXE_RAM_BUILD_DIR" \; 2> /dev/null
								if [[ -d "$_AXE_RAM_BUILD_DIR/$_axe_pkgname" ]]; then
									#apply axe tag 
									stamp_pkgbuild "$_AXE_RAM_BUILD_DIR/$_axe_pkgname"
									if [[ $? -eq 0 ]]; then 
										cp -fpr "$_AXE_RAM_BUILD_DIR/$_axe_pkgname" "$_AXE_DEV_UPDATE_EXPORT_DIR"
										if [[ $? -eq 0 ]]; then 
											cd "$1/$_axe_pkgname"
											axe_info "applying integrity checks"
											makepkg --asroot --nobuild --syncdeps --noconfirm --clean --force
											if [[ $? -eq 0 ]]; then 
												cd /root/
												axe_info "$_axe_pkgname tagged and exported to $_AXE_DEV_UPDATE_EXPORT_DIR"
												rm -fr "$_AXE_RAM_BUILD_DIR/$_axe_pkgname"
											else
												echo "$_axe_pkgname from $1  failed integrity checks" >> "$_AXE_LISTS_DIR/update_pkgbuild_dir_problems.list"
												axe_fuck "failed integrity checks normally not serious but can be please check the output above" && any_key
											fi
										else
											axe_fuck "$_axe_pkgname failed to move to $_AXE_DEV_UPDATE_EXPORT_DIR please check why !" && any_key
											rm -f "$_AXE_RAM_BUILD_DIR/$_axe_pkgname"
										fi
									else
										echo "$_axe_pkgname from $_AXE_RAM_BUILD_DIR/$_axe_pkgname failed to accept axe pkgrel tag" >> "$_AXE_LISTS_DIR/update_pkgbuild_dir_problems.list"
										axe_fuck "$_axe_pkgname from $_AXE_RAM_BUILD_DIR/$_axe_pkgname failed to accept axe pkgrel tag please check why !" && any_key
									fi
								else
									axe_fuck "failed to find and copy  $_axe_pkgname from the ABS to $_AXE_RAM_BUILD_DIR ( which by the way is impossible)"
									any_key
								fi	
									
						
							fi
							# is it a toolchain component
							if [[ $(sed '/^\#/d' "$_AXE_LISTS_DIR/toolchain.list" | grep -Fx "$_axe_pkgname") ]]; then
								axe_warn "$_axe_pkgname is a toolchain component marking the entire toolchain for rebuilding"
								_AXE_TOOLCHAIN_OPTIMUM_YES=0
								axe_warn " i will delete $_axe_pkgname then you can run the toolchan build from the main menu again"
								rm -f "$1/$_axe_pkgname"
							else
								rm -f "$1/$_axe_pkgname"
								find /var/abs -type d -name "$_axe_pkgname" -exec cp -rpf {} "$1" \; 2> /dev/null
								if [[ -d "$1/$_axe_pkgname" ]]; then
									stamp_pkgbuild "$1/$_axe_pkgname"
									if [[ $? -eq 0 ]]; then 
										build_axe_pkgbuild "$_axe_pkgname" "--noinstall" "--nocon" "$1" "$_AXE_OPT_TYPE" "$_AXE_LISTS_DIR/updatebuild_fail.list" "--nosuc" "--notag" "--nocheck"
										if [[ $? -eq 5 || $? -eq 6 || $? -eq 7 || $? -eq 9 ]]; then
											axe_fuck "$_axe_pkgname failed to rebuild  check build log"
											echo "$_axe_pkgname from $1  failed rebuild check build log" >> "$_AXE_LISTS_DIR/update_pkgbuild_dir_problems.list"
											_axe_rebuild_problem=1
										fi
									else
										echo "$_axe_pkgname from $1  failed to accept axe pkgrel tag" >> "$_AXE_LISTS_DIR/update_pkgbuild_dir_problems.list"
										axe_fuck "$_axe_pkgname refused  to accept axe pkgtag aborting rebuild"
									fi
								else
									axe_fuck "failed to find and copy  $_axe_pkgname from the ABS to $1 ( which by the way is impossible)"
									any_key
								fi
							fi
						fi
						
						#clean up
						rm -fr "$_AXE_DEV_UPDATE_EXPORT_DIR/$_axe_pkgname/src"
						rm -fr "$_AXE_DEV_UPDATE_EXPORT_DIR/$_axe_pkgname/pkg"
			
					else
						[[ "${_axe_version_array_abs[1]}" == "null" ]] && axe_fuck "canot obtain a version for $_axe_pkgname from $_axe_abs_location/PKGBUILD"  && echo "+++++++++++++++++++++++++++++NO VERSION++++++++++++++++++++++++++++ $_axe_pkgname did not provide a version from ABS " >> "$_AXE_LISTS_DIR/version_problems.list"
						[[ "${_axe_version_array_dir[1]}" == "null" ]] && axe_fuck "canot obtain a version for $_axe_pkgname from $1/$_axe_pkgname/PKGBUILD" && echo "+++++++++++++++++++++++++++++NO VERSION++++++++++++++++++++++++++++ $_axe_pkgname did not provide a version from $1 " >> "$_AXE_LISTS_DIR/version_problems.list"
						[[ "${_axe_version_array_abs[2]}" == "null" ]] && axe_fuck "canot obtain a rel for $_axe_pkgname from $_axe_abs_location/PKGBUILD"  && echo "+++++++++++++++++++++++++++++NO REL++++++++++++++++++++++++++++ $_axe_pkgname did not provide a rel from ABS " >> "$_AXE_LISTS_DIR/version_problems.list"
						[[ "${_axe_version_array_dir[3]}" == "null" ]] && axe_fuck "canot obtain a rel for $_axe_pkgname from $1/$_axe_pkgname/PKGBUILD" && echo "+++++++++++++++++++++++++++++NO REL++++++++++++++++++++++++++++ $_axe_pkgname did not provide a rel from $1 " >> "$_AXE_LISTS_DIR/version_problems.list"
						any_key
						_axe_process_problem=1
					fi
					
				else
					axe_fuck "returned value of axe_get_vers is incorrect it should be $_axe_pkgname but returned ${_axe_version_array_dir[0]} or ${_axe_version_array_abs[0]}"
					any_key
				fi
			
			
				
			else
				axe_info "$_axe_pkgname not found in the ABS looking for it from AUR" 
				cd "$_AXE_RAM_BUILD_DIR"
				yaourt -G --noconfirm "$_axe_pkgname"
				cd /root/
				if [[ -d "$_AXE_RAM_BUILD_DIR/$_axe_pkgname" ]]; then
					
					axe_info "$_axe_pkgname found in AUR" 
					unset _axe_version_array_aur
					_axe_version_array_aur=($(axe_get_vers "$_AXE_RAM_BUILD_DIR/$_axe_pkgname"))
					
					#						aur ver										aur rel                                       dir ver										dir rel
					if [[ ! "${_axe_version_array_aur[1]}" == "null"  && ! "${_axe_version_array_aur[2]}" == "null"  && ! "${_axe_version_array_dir[1]}" == "null" && ! "${_axe_version_array_dir[3]}" == "null" ]]; then
					
						axe_info "$_axe_pkgname version from $1 is ${bldcyn} ${_axe_version_array_dir[1]}-${_axe_version_array_dir[3]}" 
						axe_info "$_axe_pkgname version from AUR is ${bldcyn} ${_axe_version_array_aur[1]}-${_axe_version_array_aur[2]}" 
						axe_info "$_axe_pkgname native axe pkgrel from $1 is ${bldcyn} ${_axe_version_array_dir[4]}"
						axe_info "$_axe_pkgname axe pkgrel from $1 is ${bldcyn} ${_axe_version_array_dir[4]}"
						
						_axe_vercmp_return=$(vercmp "${_axe_version_array_aur[1]}-${_axe_version_array_aur[2]}" "${_axe_version_array_dir[1]}-${_axe_version_array_dir[3]}")
						
						[[ $_axe_vercmp_return -eq 0 ]] && axe_info "versions are the same ${bldcyn} no action taken" 
						[[ $_axe_vercmp_return -lt 0 ]] && axe_info "$1 version is greater than AUR version ${bldcyn} no action taken" 
						if [[ $_axe_vercmp_return -gt 0 ]]; then
							stamp_pkgbuild "$_AXE_RAM_BUILD_DIR/$_axe_pkgname"
							if [[ $? -eq 0 ]]; then
								cp -fpr "$_AXE_RAM_BUILD_DIR/$_axe_pkgname" "$1/$_axe_pkgname"
								build_axe_pkgbuild "$_axe_pkgname" "--noinstall" "--nocon" "$1" "$_AXE_OPT_TYPE" "--nofail" "--nosuc" "--tag" "--nocheck"
								if [[ $? -eq 5 || $? -eq 6 ]]; then
									axe_fuck "$_axe_pkgname failed to rebuild  check build log"
									echo "$_axe_pkgname from AUR  failed rebuild check build log" >> "$_AXE_LISTS_DIR/update_pkgbuild_dir_problems.list"
									_axe_rebuild_problem=1
								else
									rm -fr "$_AXE_RAM_BUILD_DIR/$_axe_pkgname"
								fi
							else
								echo "$_axe_pkgname from $_AXE_RAM_BUILD_DIR/$_axe_pkgname failed to accept axe pkgrel tag" >> "$_AXE_LISTS_DIR/update_pkgbuild_dir_problems.list"
								axe_fuck "$_axe_pkgname from $_AXE_RAM_BUILD_DIR/$_axe_pkgname failed to accept axe pkgrel tag please check why !"
							fi
						fi
						
						if [[ $(grep -Fx "$_axe_pkgname" "$_AXE_LISTS_DIR/maintained_pkgbuilds.list") ]]; then
							axe_fuck "$_axe_pkgname is out of date and its a maintained package so following standard procedure and exporting the tagged PKGBUILD to $_AXE_DEV_UPDATE_EXPORT_DIR and moving on to the next one" 
							echo "$_axe_pkgname from $1  is older than the AUR AUR VER=$_axe_aur_ver-$_axe_aur_rel DEV VER=$_axe_dir_ver-$_axe_dir_rel" >> "$_AXE_LISTS_DIR/update_pkgbuild_dir_problems.list"
							
							#apply axe tag 
							stamp_pkgbuild "$_AXE_RAM_BUILD_DIR/$_axe_pkgname"
							if [[ $? -eq 0 ]]; then 
								cp -fpr "$_AXE_RAM_BUILD_DIR/$_axe_pkgname" "$_AXE_DEV_UPDATE_EXPORT_DIR"
								if [[ $? -eq 0 ]]; then 
									cd "$1/$_axe_pkgname"
									axe_info "applying integrity checks"
									makepkg --asroot --nobuild --syncdeps --noconfirm --clean --force
									if [[ $? -eq 0 ]]; then 
										cd /root/
										axe_info "$_axe_pkgname tagged and exported to $_AXE_DEV_UPDATE_EXPORT_DIR"
										rm -fr "$_AXE_RAM_BUILD_DIR/$_axe_pkgname"
									else
										echo "$_axe_pkgname from $1  failed integrity checks" >> "$_AXE_LISTS_DIR/update_pkgbuild_dir_problems.list"
										axe_fuck "failed integrity checks normally not serious but can be please check the output above"
										any_key
									fi
								else
									axe_fuck "$_axe_pkgname failed to move to $_AXE_DEV_UPDATE_EXPORT_DIR please check why !" 
									any_key
									rm -f "$_AXE_RAM_BUILD_DIR/$_axe_pkgname"
								fi
							else
								echo "$_axe_pkgname from $_AXE_RAM_BUILD_DIR/$_axe_pkgname failed to accept axe pkgrel tag" >> "$_AXE_LISTS_DIR/update_pkgbuild_dir_problems.list"
								axe_fuck "$_axe_pkgname from $_AXE_RAM_BUILD_DIR/$_axe_pkgname failed to accept axe pkgrel tag please check why !"
								any_key
							fi
						else
						
							rm -f "$1/$_axe_pkgname"
							cp -fpr "$_AXE_RAM_BUILD_DIR/$_axe_pkgname" "$1"
							if [[ -d "$1/$_axe_pkgname" ]]; then
								stamp_pkgbuild "$1/$_axe_pkgname"
								if [[ $? -eq 0 ]]; then 
									build_axe_pkgbuild "$_axe_pkgname" "--noinstall" "--nocon" "$1" "$_AXE_OPT_TYPE" "--nofail" "--nosuc" "--tag" "--nocheck"
									if [[ $? -eq 5 || $? -eq 6 || $? -eq 7 || $? -eq 9 ]]; then
										axe_fuck "$_axe_pkgname failed to rebuild  check build log"
										echo "$_axe_pkgname from $1  failed rebuild check build log" >> "$_AXE_LISTS_DIR/update_pkgbuild_dir_problems.list"
										_axe_rebuild_problem=1
									fi
								else
									echo "$_axe_pkgname from $1  failed to accept axe pkgrel tag" >> "$_AXE_LISTS_DIR/update_pkgbuild_dir_problems.list"
									axe_fuck "$_axe_pkgname refused  to accept axe pkgtag aborting rebuild"
								fi
							else
								axe_fuck "failed copy  $_axe_pkgname from the ABS to $1"
								any_key
							fi
						fi
						
						
						#clean up
						rm -fr "$_AXE_DEV_UPDATE_EXPORT_DIR/$_axe_pkgname/src"
						rm -fr "$_AXE_DEV_UPDATE_EXPORT_DIR/$_axe_pkgname/pkg"
						
					else
						[[ "${_axe_version_array_aur[1]}" == "null" ]] && axe_fuck "canot obtain a version for $_axe_pkgname from AUR"  && echo "++++++++ NO VERSION ++++++++++ $_axe_pkgname did not provide a version from AUR" >> "$_AXE_LISTS_DIR/version_problems.list"
						[[ "${_axe_version_array_dir[1]}" == "null" ]] && axe_fuck "canot obtain a version for $_axe_pkgname from $1/$_axe_pkgname/PKGBUILD" && echo "++++++++ NO VERSION ++++++++++ $_axe_pkgname did not provide a version from $1 " >> "$_AXE_LISTS_DIR/version_problems.list"
						[[ "${_axe_version_array_aur[2]}" == "null" ]] && axe_fuck "canot obtain a rel for $_axe_pkgname from AUR"  && echo "+++++++ NO REL +++++++++ $_axe_pkgname did not provide a rel from AUR " >> "$_AXE_LISTS_DIR/version_problems.list"
						[[ "${_axe_version_array_dir[3]}" == "null" ]] && axe_fuck "canot obtain a rel for $_axe_pkgname from $1/$_axe_pkgname/PKGBUILD" && echo "+++++++ NO REL +++++++++ $_axe_pkgname did not provide a rel from $1 " >> "$_AXE_LISTS_DIR/version_problems.list"
						any_key
						_axe_process_problem=1
					fi
					
				else
				
					
					axe_fuck "$_axe_pkgname does not exist in AUR in ABS and is not a axe native package !!!!!!!!!!!!"
					axe_fuck "native tag returns as ${_axe_version_array_dir[5]}" 
					echo "$_axe_pkgname was not found in the ABS or AUR to make a version check, ignore this if  axe native package" >> "$_AXE_LISTS_DIR/version_problems.list"
					any_key
					_axe_process_problem=1
			
				fi
			fi	
			
		fi	
			
	done
	
	
	
	
	[[ "$_axe_rebuild_problem" -eq 0 && "$_axe_version_problem" -eq 0 && "$_axe_find_problem" -eq 0 ]] && _axe_return=0
	[[ "$_axe_rebuild_problem" -eq 0 && "$_axe_version_problem" -eq 0 && "$_axe_find_problem" -eq 1 ]] && _axe_return=1
	[[ "$_axe_rebuild_problem" -eq 0 && "$_axe_version_problem" -eq 1 && "$_axe_find_problem" -eq 0 ]] && _axe_return=2
	[[ "$_axe_rebuild_problem" -eq 0 && "$_axe_version_problem" -eq 1 && "$_axe_find_problem" -eq 1 ]] && _axe_return=3
	[[ "$_axe_rebuild_problem" -eq 1 && "$_axe_version_problem" -eq 0 && "$_axe_find_problem" -eq 0 ]] && _axe_return=4
	[[ "$_axe_rebuild_problem" -eq 1 && "$_axe_version_problem" -eq 0 && "$_axe_find_problem" -eq 1 ]] && _axe_return=5
	[[ "$_axe_rebuild_problem" -eq 1 && "$_axe_version_problem" -eq 1 && "$_axe_find_problem" -eq 0 ]] && _axe_return=6
	[[ "$_axe_rebuild_problem" -eq 1 && "$_axe_version_problem" -eq 1 && "$_axe_find_problem" -eq 1 ]] && _axe_return=7
		

	return $_axe_return
	
	


}

function load_optimised_toolchain_usb()
{
	axe_block "Start of load_optimised_toolchain_git"
	
	local _axe_return
	_axe_return=0
	
	toolchain_tag_check > /dev/null
	if [[ $? -eq 1 ]]; then
		
		axe_info "about to copy files from your usb stick, i expect to find the files in"
		axe_info "$_AXE_USB_STICK_MNT/$_AXE_USB_I7_TOOLCHAIN_BIN_DIR/<toolchain binaries> for optimised toolchain binary files and"
		axe_info "if the paths are different on your machine you need to ${_AXE_CTRLC} and either modify your machine or just modify my code"
		axe_info "my path is in the variables right at the top of my code listing , you cant miss it!"
		any_key
		
		if [[ ! -d "$_AXE_USB_STICK_MNT" ]]; then
			axe_info "creating usb mount dir $_AXE_USB_STICK_MNT"
			mkdir "$_AXE_USB_STICK_MNT"
		fi
		
		axe_info "mounting $_AXE_USB_STICK_DEVICE"
		mount -t vfat "$_AXE_USB_STICK_DEVICE" "$_AXE_USB_STICK_MNT"
		if [[ $? -eq 0 ]]; then
			axe_info "$_AXE_USB_STICK_DEVICE sucsessfully mounted to $_AXE_USB_STICK_MNT"
			
			if [[ -d "$_AXE_USB_STICK_MNT/$_AXE_USB_I7_TOOLCHAIN_BIN_DIR" ]]; then
				axe_info "copying over toolchain from $_AXE_USB_STICK_MNT/$_AXE_USB_I7_TOOLCHAIN_BIN_DIR to $_AXE_RAM_BUILD_DIR"
				cp -pfr $_AXE_USB_STICK_MNT/$_AXE_USB_I7_TOOLCHAIN_BIN_DIR/* "$_AXE_RAM_BUILD_DIR"
				if [[ $? -eq 0 ]]; then
					cd "$_AXE_RAM_BUILD_DIR"
					pacman -U  *.pkg.tar.xz
					if [[ $? -eq 0 ]]; then
						cd /root/
						toolchain_tag_check
						if [[ $? -eq 0 ]]; then
							axe_info "toolchain sucsessfully loaded"
							mask_toolchain_upgrades
							_axe_return=0
						fi
					else
						axe_fuck " something is wrong pacman did not install toolchain packages"
						_axe_return=1
					fi
				else
					axe_fuck " something is wrong did not copy anything check sources in correct directory"
					_axe_return=2
				fi
			else
				axe_fuck " $_AXE_USB_STICK_MNT/$_AXE_USB_I7_TOOLCHAIN_BIN_DIR does not exist aborting"
				_axe_return=3
			fi
			axe_info "UNmounting $_AXE_USB_STICK_DEVICE"
			umount  "$_AXE_USB_STICK_MNT"
			if [[ $? -eq 0 ]]; then
				axe_info "$_AXE_USB_STICK_DEVICE sucsessfully UNmounted"
			else
				axe_fuck " failed in UNmounting $_AXE_USB_STICK_DEVICE which will still be active"
				_axe_return=4
			fi
			
		else
			axe_fuck " failed to mount$_AXE_USB_STICK_DEVICE to $_AXE_USB_STICK_MNT"
			_axe_return=5
		fi
	else
		axe_info "toolchain already has the axe packeger tag skipping" 
		_axe_return=6
	fi	

	
	return $_axe_return
}

function lsd_init()
{
	axe_block "Start of lsd_init"
	
	local _axe_return
	_axe_return=0
	
	
	axe_info "building LSD init"
	pacman -Rsn --noconfirm systemd-sysvcompat
	if [[ $? -eq 0 ]]; then
		build_axe_pkgbuild "dhcpcd" "--install" "--nocon" "$_AXE_INPUT_PKGBUILD_DIR" "$_AXE_OPT_TYPE"  "--nofail" "--nosuc" "--notag" "--nocheck"
		if [[ $? -lt 5 ]]; then
			build_axe_pkgbuild "sysvinit" "--install" "--con" "$_AXE_INPUT_PKGBUILD_DIR" "$_AXE_OPT_TYPE"  "--nofail" "--nosuc" "--notag" "--nocheck"
			if [[ $? -lt 5 ]]; then
				build_axe_pkgbuild "initscripts-git" "--install-force" "--con" "$_AXE_INPUT_PKGBUILD_DIR" "$_AXE_OPT_TYPE"  "--nofail" "--nosuc" "--notag" "--nocheck"
				if [[ $? -lt 5 ]]; then
					configure_rc_conf
				else
					axe_fuck "init scripts failed to build, have no choice but to reset your init back to arch standard so you can try again"
					pacman -S systemd-sysvcompat dhcpcd systemd --noconfirm
					if [[ $? -eq 0 ]]; then
						axe_info "init reset you are cool to go on but i would reboot if i were you" 
						_axe_return=1 
						any_key
					else
						axe_fuck "well we are totally fucked,init refused to reset, your on your own im afraid, quitting"
						any_key
						shutdown -h now
						sleep 10
					fi
				fi
			else
				axe_fuck "sysvinit failed to build, have no choice but to reset your init back to arch standard so you can try again"
				pacman -S systemd-sysvcompat dhcpcd systemd --noconfirm
				if [[ $? -eq 0 ]]; then
					axe_info "init reset you are cool to go on but i would reboot if i were you"
					_axe_return=2
					any_key
				else
					axe_fuck "well we are totally fucked,init refused to reset, your on your own im afraid, quitting"
					any_key
					shutdown -h now
					sleep 10
				fi
			fi
		else
			axe_fuck "dhcpcd failed to build, have no choice but to reset your init back to arch standard so you can try again"
			pacman -S systemd-sysvcompat dhcpcd systemd --noconfirm
			if [[ $? -eq 0 ]]; then
				axe_info "init reset you are cool to go on but i would reboot if i were you"
				_axe_return=3
				any_key
			else
				axe_fuck "well we are totally fucked,init refused to reset, your on your own im afraid, quitting"
				any_key
				shutdown -h now
				sleep 10
			fi
		fi
	else
		axe_fuck "pacman failed to remove systemd-sysvcompat, have no choice but to reset your init back to arch standard so you can try again"
		pacman -S systemd-sysvcompat dhcpcd systemd --noconfirm
		if [[ $? -eq 0 ]]; then
			axe_info "init reset you are cool to go on but i would reboot if i were you" 
			_axe_return=5 
			any_key
		else
			axe_fuck "well we are totally fucked,init refused to reset, your on your own im afraid, quitting"
			any_key
			shutdown -h now
			sleep 10
		fi
	fi
	
	
	return $_axe_return

}

function axe_init_usb()
{	
	axe_block "Start of axe_init_usb"

	local _axe_return
	_axe_return=0
	
	axe_info "currently only the RUNIT based init scheme is supported from USB"
	axe_info "about to copy files from your usb stick, i expect to find the files in"
	axe_info "$_AXE_USB_STICK_MNT/$_AXE_INIT_BIN_DIR/<runit binaries> for the runit-based init"
	axe_info "if the paths are different on your machine you need to ${_AXE_CTRLC} and either modify your machine or just modify my code"
	axe_info "my path is in the variables right at the top of my code listing , you cant miss it!"
	any_key
	
	if [[ ! -d "$_AXE_USB_STICK_MNT" ]]; then
		axe_info "creating usb mount dir $_AXE_USB_STICK_MNT"
		mkdir "$_AXE_USB_STICK_MNT"
	fi
	
	axe_info "mounting usb device"
	mount -t vfat "$_AXE_USB_STICK_DEVICE" "$_AXE_USB_STICK_MNT"
	if [[ $? -eq 0 ]]; then
		axe_info "$_AXE_USB_STICK_DEVICE sucsessfully mounted to $_AXE_USB_STICK_MNT"
		
		if [[ -d "$_AXE_USB_STICK_MNT/$_AXE_INIT_BIN_DIR" ]]; then
			axe_info "copying over init and components from $_AXE_USB_STICK_MNT/$_AXE_INIT_BIN_DIR to $_AXE_RAM_BUILD_DIR"
			cp -pfr $_AXE_USB_STICK_MNT/$_AXE_INIT_BIN_DIR/* "$_AXE_RAM_BUILD_DIR"
			if [[ $? -eq 0 ]]; then
				pacman -Rsn systemd-sysvcompat
				cd "$_AXE_RAM_BUILD_DIR"
				pacman -U  *.pkg.tar.xz
				if [[ $? -eq 0 ]]; then
					cd /root/
					axe_info "configuring /etc/rc.conf"
					[[ -s "/etc/rc.conf" ]] && sed -i "/DAEMONS=/d" "/etc/rc.conf"
					echo "HARDWARECLOCK=\"$_AXE_HARDWARECLOCK\"
TIMEZONE=\"$_AXE_TIMEZONE\"
KEYMAP=\"$_AXE_KEYMAP\"
CONSOLEFONT=\"$_AXE_CONSOLEFONT\"
CONSOLEMAP=\"$_AXE_CONSOLEMAP\"
DAEMONS=($_AXE_DAEMON_ARRAY)" >> "/etc/rc.conf"
					axe_info "please check /etc/rc.conf"
					any_key
					nano /etc/rc.conf
					axe_info "was everything ok ?" 
					any_key
					_axe_return=0
				else
					axe_fuck "pacman failed to install the init, please panic"
					_axe_return=1
				fi
			else
				axe_fuck "something is wrong did not copy anything check sources in correct directory"
				_axe_return=2
			fi
		else
			axe_fuck "$_AXE_USB_STICK_MNT/$_AXE_INIT_BIN_DIR does not exist aborting"
			_axe_return=3
		fi
		axe_info "UNmounting $_AXE_USB_STICK_DEVICE"
		umount  "$_AXE_USB_STICK_MNT"
		if [[ $? -eq 0 ]]; then
			axe_info "$_AXE_USB_STICK_DEVICE sucsessfully UNmounted"
		else
			axe_fuck "failed in UNmounting $_AXE_USB_STICK_DEVICE driveletter will still be active"
			_axe_return=4
		fi
		
	else
		axe_fuck "failed to mount$_AXE_USB_STICK_DEVICE to $_AXE_USB_STICK_MNT"
		_axe_return=5
	fi
	
	
	return $_axe_return
}

function axe_init_git()
{
	axe_block "Start of axe_init_git"
	
	local _axe_return
	_axe_return=0
	
	axe_info "we use lsd init as our backup init"
	lsd_init
	if [[ $? -eq 0 ]]; then
		build_axe_pkgbuild "axe-runit" "--install" "--nocon" "$_AXE_INPUT_PKGBUILD_DIR" "$_AXE_OPT_TYPE"  "--nofail" "--nosuc" "--tag" "--nocheck"
		if [[ $? -lt 5 ]]; then
			build_axe_pkgbuild "axe-runit-scripts" "--install" "--nocon" "$_AXE_INPUT_PKGBUILD_DIR" "$_AXE_OPT_TYPE"  "--nofail" "--nosuc" "--tag" "--nocheck"
			if [[ $? -lt 5 ]]; then
				configure_axeinit
			else
				axe_fuck "pacman failed to install axe-runit-scripts resetting init"
				pacman -S systemd-sysvcompat dhcpcd systemd --noconfirm
				_axe_return=3
			fi	

		else
			axe_fuck "pacman failed to install axe-runit resetting init"
			pacman -S systemd-sysvcompat dhcpcd systemd --noconfirm
			_axe_return=2
		fi
	else
		_axe_return=1
	fi

}

function get_repo_choice()
{
	axe_block "Start of get_repo_choice"
	
	axe_info "axe maintains a list of precompiled binary repos maintained by users of axe"
	axe_info "i will download/refresh the list from git then allow you a choice from that list"
	if [[ $_AXE_BASE_GIT_FETCHED_YES -eq 1 ]]; then			
		refresh_git "$_AXE_GIT_BASE_INFORMATION_DIR"
		if [[ $? -eq 0 ]]; then
			_AXE_BASE_GIT_FETCHED_YES=1 
			save_settings
		else
			axe_fuck "BINARY git refused to update, check your internet connection"
		fi
		
	else		
		get_git "$_AXE_REPO_INFO_URL" "$_AXE_GIT_BASE_INFORMATION_DIR"
		if [[ $? -eq 0 ]]; then
			_AXE_BASE_GIT_FETCHED_YES=1 
			save_settings
		else
			axe_fuck "BINARY git refused to download, check your internet connection"
		fi
	fi
	if [[ $_AXE_BASE_GIT_FETCHED_YES -eq 1 ]]; then
		if [[ -s "$_AXE_GIT_BASE_INFORMATION_DIR/repo_list" ]]; then
			source "$_AXE_GIT_BASE_INFORMATION_DIR/repo_list"
			
			#need a dynamic menu here time for dialog !!!
			[[ $_AXE_REPO_1[0] ]] && axe_menu_active 1 "=_AXE_REPO_1=== $_AXE_REPO_1[0]"
			[[ $_AXE_REPO_2[0] ]] && axe_menu_active 2 "=_AXE_REPO_2=== $_AXE_REPO_2[0]"
			
			
			axe_info "please chose a repo from the list above,you can inspect its extended information before finalising a repo"
			read -s -n1 _AXE_TMP_CHAR
			axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
			case "$_AXE_TMP_CHAR" in
			
				1) axe_info "you have chosen repo $_AXE_TMP_CHAR ,the extended information for this repo is"
					 axe_info "processor synth "
				
				
				
				
				
				
					_AXE_PROCESOR_REL="$_axe_cpu_model_number$_axe_cpu_model_name_code$_axe_cpu_family_number"
					
					axe_info 'packager variable = axe-<stage code>-<cpuid code>'
					_AXE_PACKAGER_NAME_STAGE1_BINARIES="axe_seed_$_axe_cpu_id_code"
					_AXE_PACKAGER_NAME_STAGE2_BINARIES="axe_tree_$_axe_cpu_id_code"
					_AXE_PACKAGER_NAME_STAGE3_BINARIES="axe_apple_$_axe_cpu_id_code"
					_AXE_PACKAGER_NAME_TOOLCHAIN="axe_tool_$_axe_cpu_id_code"
					_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB="axe_tool_multi_$_axe_cpu_id_code"
					axe_info 'whichresults in the following packeger tags'
					axe_info "STAGE1_BINARIES ----- tag is----- axe_seed_$_axe_cpu_id_code"
					axe_info "STAGE2_BINARIES ----- tag is----- axe_tree_$_axe_cpu_id_code"
					axe_info "STAGE3_BINARIES ----- tag is----- axe_apple_$_axe_cpu_id_code"
					axe_info "TOOLCHAIN_BINARIES ----- tag is----- axe_tool_$_axe_cpu_id_code"
					axe_info "MULTILIB_TOOLCHAIN_BINARIES ----- tag is----- axe_tool_mult_$_axe_cpu_id_code"
					axe_info "is the above info good for you?"
					axe_menu_active Y "to fix the tags ${_AXE_ANY_OTHER_KEY} to not fix the tags and display detailed info on your processor"
					read -s -n1 _AXE_TMP_CHAR
					axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
					if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
						_AXE_BIN_GIT_URL="$_AXE_REPO_1[1]"
						_AXE_REMOTE_GIT_REPO_ENTRY="$_AXE_REPO_1[2]" 
					fi ;;
			
			
			
			esac
			
			
			
			save_settings
	
		else
			axe_fuck "$_AXE_GIT_BASE_INFORMATION_DIR/repo_list does not exist"
			any_key
		fi
	else
		axe_fuck "$_AXE_GIT_BASE_INFORMATION_DIR/repo_list not present git did not download"
		any_key
	fi
	

}

function questions_compile_options()
{
	
	

	axe_info "now its time for some descisions on what your eventual cinnamon based desktop will function like"
	axe_info "i have the abbility to compile my maintained packages with use flags a-la gentoo, i thus can give you the choice of including or excluding some desktop components at a compile level"
	axe_info "so far i have limited the choices to a sensible subset of what is actually possible hence the choices i will give you are"
	axe_info "CUPS ( linux printer support ) on/off"
	axe_info "BLUETOOTH ( linux blutooth support ) on/off"
	axe_info "COLRD ( linux monitor color profiles ) on/off"
	axe_info "NETWORKMANAGER ( weather to use network manager as the default network handler, or to allow alternatives such as wicd or connman ) on/off"
	echo -e "\n"


	axe_info "many people never use or want a fixed printer, removing support reduces system overhead considerably"
	axe_menu_active Y "if you want to enable CUPS ${_AXE_ANY_OTHER_KEY} if not"
	read -s -n1 _AXE_TMP_CHAR
	axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
	if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
		_AXE_CUPS=1
		save_settings
	else
		_AXE_CUPS=0
		save_settings
	fi


	echo -e "\n"
	axe_info "many people do not have integrated blutooth hardware, removing support reduces system overhead considerably"
	axe_menu_active Y " if you want to enable BLUETOOTH ${_AXE_ANY_OTHER_KEY} if not"
	read -s -n1 _AXE_TMP_CHAR
	axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
	if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
		_AXE_BLUETOOTH=1
		save_settings
	else
		_AXE_BLUETOOTH=0
		save_settings
	fi


	echo -e "\n"
	axe_info "COLORD is the most useless piece of crap ever invented ( unless you are a graphic artist ) please say no to COLORD"
	axe_menu_active Y "if you want to enable COLORD ${_AXE_ANY_OTHER_KEY} if not"
	read -s -n1 _AXE_TMP_CHAR
	axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
	if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
		_AXE_COLORD=1
		save_settings
	else
		_AXE_COLORD=0
		save_settings
	fi


	echo -e "\n"
	axe_info "Networkmanager is a excellent ( if a little bloated ) product but disabling this option will only prevent your desktop from complaining when you install connman"
	axe_menu_active Y "if you want to DISABLE networkmamager ${_AXE_ANY_OTHER_KEY} if not"
	read -s -n1 _AXE_TMP_CHAR
	axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
	if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
		_AXE_NETWORKMANAGER=0
		save_settings
	else
		_AXE_NETWORKMANAGER=1
		save_settings
	fi

	
	echo -e "\n"
	axe_info "now i need to establish your default optimization level"
	axe_info "are you a brave person? would you like to build all your packages with -O3 as stndard, or you a bit yellow and prefer -O2 ?"
	axe_info "no seariously building system wide with -O3 is a really really bad idea, you can build individual packages with -03"
	axe_info "ans still keep -O2 as the system default, just do a bit of work and edit axe list correctly"
	axe_menu_active Y "to build all the packages with -O3 as default, ${_AXE_ANY_OTHER_KEY} to build with -O2 as default"
	read -s -n1 _AXE_TMP_CHAR
	axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
	if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
		_AXE_OPT_TYPE="--o3"
		save_settings
	else
		_AXE_OPT_TYPE="--o2"
		save_settings
	fi
	
	echo -e "\n"
	axe_info "now you need to decide on a default checking level"
	axe_info "please note if you chose to enable checks your compile time will go up A LOT !!!!!!!, only chose full checks if you have time on your hands, and are suitably paranoid"
	axe_menu_active Y "to enable full compile-time checks ${_AXE_ANY_OTHER_KEY} to disable the majority of compile time checks"
	read -s -n1 _AXE_TMP_CHAR
	axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
	if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
		_AXE_GLOBAL_CHECK="--check"
		save_settings
	else
		_AXE_GLOBAL_CHECK="--nocheck"
		save_settings
	fi



}

function pre_menu()
{
	
	local _axe_cpu_model_name
	local _axe_cpu_model_name_code
	local _axe_cpu_model_number
	local _axe_cpu_vendor_id
	local _axe_cpu_family_number
	local _axe_gcc_ver
	local _axe_return
	local _axe_cpu_id
	local _axe_cpu_id_code
	local _axe_escape
	_axe_escape=0
	
	while [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 0 || $_AXE_CPU_IDENTIFIED_YES -eq 0 || $_AXE_MAKEPKG_CONF_SETUP_YES -eq 0 ]]; do
		echo -e "\n"
	
	axe_block '########################### PRE-MENU ##########################'
	
	
#get pkgbuiklds a b

																			     if [[ $_AXE_PKGBUILD_GIT_FETCHED_YES -eq 1 ]]; then
																			  	  	  axe_menu_active A "=PKGBUILD-GIT=== to update your input $_AXE_INPUT_PKGBUILD_DIR from ${bldblu}GIT ${txtrst}"
																			  	  	  axe_menu_active B "=PKGBUILD-USB=== to update your input $_AXE_INPUT_PKGBUILD_DIR from ${bldblu} USB ${txtrst}"
																			  	   else
																			  	  	  axe_menu_active A "=PKGBUILD-GIT=== to load your input $_AXE_INPUT_PKGBUILD_DIR from ${bldblu}GIT ${txtrst}"
																			  	  	  axe_menu_active B "=PKGBUILD-USB=== to load your input $_AXE_INPUT_PKGBUILD_DIR from ${bldblu}USB ${txtrst}"
																			     fi
	   [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 1 && $_AXE_CPU_IDENTIFIED_YES -eq 0 ]] && axe_menu_active C "=GET-CPU-INFO=== to identify and mark your cpu"
	 [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 0 && $_AXE_CPU_IDENTIFIED_YES -eq 0 ]] && axe_menu_inactive C "=GET-CPU-INFO=== OPTION UNAVAILABLE UNTILL $_AXE_INPUT_PKGBUILD_DIR FILLED"
	 [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 1 && $_AXE_CPU_IDENTIFIED_YES -eq 1 ]] && axe_menu_inactive C "=GET-CPU-INFO=== OPTION CPU ALREADY IDENTIFIED"
	 [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 0 && $_AXE_CPU_IDENTIFIED_YES -eq 1 ]] && axe_menu_inactive C "=GET-CPU-INFO=== OPTION CPU ALREADY IDENTIFIED"
											  [[ $_AXE_CPU_IDENTIFIED_YES -eq 1 ]] && axe_menu_active D "=MODIFY-MAKEPKG= to setup makepkg.conf for optimised binaries"
										    [[ $_AXE_CPU_IDENTIFIED_YES -eq 0 ]] && axe_menu_inactive D "=MODIFY-MAKEPKG= OPTION UNAVAILABLE PROCESSOR NOT YEY IDENTIFIED"
	
	
	
		read -s -n1 _AXE_TMP_CHAR
		axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
		case "$_AXE_TMP_CHAR" in
		
#pkgbuild usb			
			#pkgbuild git		
			a|A) if [[ $_AXE_PKGBUILD_GIT_FETCHED_YES -eq 1 ]]; then
					echo -e "\n"
					axe_info '############ PKGBUILD GIT REFRESH ###############'
					axe_info "PKGBUILD git already downloaded do you want to refresh and update your pkgbuild git ?  i will then force you to do another version check"
					axe_menu_active Y "if you want to update git and refresh $_AXE_INPUT_PKGBUILD_DIR ${_AXE_ANY_OTHER_KEY} if not,"
					read -s -n1 _AXE_TMP_CHAR
					axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
					if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then		
						refresh_git "$_AXE_GIT_PKGBUILD_DIR"
						if [[ $? -eq 0 ]]; then
							if [[ $(ls -A "$_AXE_GIT_MAINTAINED_PKGBUILD_DIR") ]]; then
								rm -fr $_AXE_INPUT_PKGBUILD_DIR/*
								cp -pfr $_AXE_GIT_MAINTAINED_PKGBUILD_DIR/* "$_AXE_INPUT_PKGBUILD_DIR"
								if [[ $? -eq 0 ]]; then
									axe_info "the following PKGBUILD folders have been copied to $_AXE_INPUT_PKGBUILD_DIR"
									dir "$_AXE_INPUT_PKGBUILD_DIR"
									_AXE_VERSIONS_CHECKED_YES=0
									_AXE_PKGBUILD_DIR_FILLED_YES=1
									save_settings
								else
									axe_fuck "there was a copy transfer problem between files from $_AXE_GIT_MAINTAINED_PKGBUILD_DIR to $_AXE_INPUT_PKGBUILD_DIR"
									any_key
								fi
							else
								axe_info "$_AXE_GIT_MAINTAINED_PKGBUILD_DIR empty not copying any files"
							fi
						else
							axe_fuck "PKGBUILD git $_AXE_PKGBUILD_GIT_URL refused to update, check your internet connection"
						fi	
					fi
				else
					echo -e "\n"
					axe_info '########## PKGBUILD GIT DOWNLOAD ############'
					axe_info "so first lets download the your git and fill $_AXE_INPUT_PKGBUILD_DIR"
					any_key
					get_git "$_AXE_PKGBUILD_GIT_URL" "$_AXE_GIT_PKGBUILD_DIR"
					if [[ $? -eq 0 ]]; then
						_AXE_PKGBUILD_GIT_FETCHED_YES=1 && save_settings
						if [[ $(ls -A "$_AXE_GIT_MAINTAINED_PKGBUILD_DIR") ]]; then
							cp -pfr $_AXE_GIT_MAINTAINED_PKGBUILD_DIR/* "$_AXE_INPUT_PKGBUILD_DIR"
							if [[ $? -eq 0 ]]; then
								axe_info "the following files have been copied to $_AXE_INPUT_PKGBUILD_DIR"
								dir "$_AXE_INPUT_PKGBUILD_DIR"
								_AXE_VERSIONS_CHECKED_YES=0
								_AXE_PKGBUILD_DIR_FILLED_YES=1
								save_settings
							else
								axe_fuck "there was a copy transfer problem between files from $_AXE_GIT_MAINTAINED_PKGBUILD_DIR to $_AXE_INPUT_PKGBUILD_DIR"
								any_key
							fi
						else
							axe_info "$_AXE_GIT_MAINTAINED_PKGBUILD_DIR empty not copying any files"
						fi
					else
						axe_fuck "PKGBUILD git $_AXE_PKGBUILD_GIT_URL refused to download, check your internet connection"
					fi	
				fi ;;
				
				
				
#pkgbuild usb			
			b|B) if [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 1 ]]; then
					echo -e "\n"
					axe_info '############ PKGBUILD USB REFRESH ############'
					axe_info "the input pkgbuild dir is already filled want to refresh it ? i will then force you to do another version check" 
					axe_menu_active Y "if you want to refresh $_AXE_INPUT_PKGBUILD_DIR from USB stick ${_AXE_ANY_OTHER_KEY} if not,"
				fi
				
				if [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 0 ]]; then
					echo -e "\n"
					axe_info '########## PKGBUILD USB DOWNLOAD ################'
					axe_info "ok you have elected to fill $_AXE_INPUT_PKGBUILD_DIR from USB"
					axe_menu_active Y "if you want to fill $_AXE_INPUT_PKGBUILD_DIR from USB stick ${_AXE_ANY_OTHER_KEY} if not,"
				fi
				read -s -n1 _AXE_TMP_CHAR
				axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
				if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
					fill_pkgbuild_dir_from_usb "$_AXE_INPUT_PKGBUILD_DIR"
					if [[ $? -eq 0 ]]; then
						_AXE_VERSIONS_CHECKED_YES=0
						_AXE_PKGBUILD_DIR_FILLED_YES=1 && save_settings
					else
						axe_fuck "there was some problem with fetching the files ,check the output above"
						any_key
					fi
				fi ;;
				
			c|C) if [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 1 && $_AXE_CPU_IDENTIFIED_YES -eq 0 ]]; then
					echo -e "\n"
					axe_info '######### PROCESSOR IDENTIFICATION ###############'
					axe_info "first you need to chose your processor code, this will be stamped on and in all the packages you compile"
					axe_info "to do tham am going to have to load a little tool not available from archlinux or the AUR"
					#export defaults
					export _AXE_PREFIX_REL
					export _AXE_STAGE
					export _AXE_PROCESOR_REL
					export _AXE_SUFFIX_REL
					build_axe_pkgbuild "cpuid" "--install" "--nocon" "$_AXE_INPUT_PKGBUILD_DIR" "--o2"  "--nofail" "--nosuc" "--notag" "--nocheck"
					if [[ $? -lt 5 || $? -eq 8 ]]; then
						if [ -f "$_AXE_CPUINFO_PATH" ]; then
							_axe_cpu_model_name=$(grep -m 1 "model name" "$_AXE_CPUINFO_PATH")
							_axe_cpu_model_name_code=$(grep -m 1 "model name" "$_AXE_CPUINFO_PATH"  | sed 's/(TM)//' | sed 's/(R)//' | sed 's/CPU//' | sed 's/GH//' | sed 's/-//g' | sed 's/[a-z@./ :\t]//g' | tr '[:upper:]' '[:lower:]')
							_axe_cpu_model_number=$(grep -m 1 "model" "$_AXE_CPUINFO_PATH" | awk '{print $3}')
							_axe_cpu_vendor_id=$(grep -m 1 "vendor_id" "$_AXE_CPUINFO_PATH")
							_axe_cpu_family_number=$(grep -m 1 "cpu family" "$_AXE_CPUINFO_PATH" | awk '{print $4}')
							_axe_cpu_id_code=$(cpuid --one-cpu | grep -m 1 '(synth)'| sed 's/(synth)//' | sed 's/[@./ :\t=,]//g')
							_axe_cpu_id=$(cpuid --one-cpu | grep -m 1 '(synth)')
							axe_info "your cpu   ${bldcyn}$_axe_cpu_model_name"
							axe_info "your cpu model name code is  ${bldcyn}$_axe_cpu_model_name_code"
							axe_info "your cpu model number is  ${bldcyn}$_axe_cpu_model_number"
							axe_info "your cpu  ${bldcyn}$_axe_cpu_vendor_id"
							axe_info "your cpu family number is  ${bldcyn}$_axe_cpu_family_number"
							axe_info "your cpuid is  ${bldcyn}$_axe_cpu_id"
							axe_info "your cpuid code is  ${bldcyn}$_axe_cpu_id_code"
							any_key
							echo -e "\n"
							axe_info 'i code your processor id into pkgrel for each package in the following manner ( no spaces )'
							axe_info 'rel segment = <model> <cpu code> <cpu family>'
							_AXE_PROCESOR_REL="$_axe_cpu_model_number$_axe_cpu_model_name_code$_axe_cpu_family_number"
							axe_info "hence your particular rel segment will be  ${bldcyn}$_AXE_PROCESOR_REL${bldwht} which will appear in the name of all the packages compiled on this machine"
							echo -e "\n"
							axe_info "furthermore i code your cpu code into the packager variable"
							axe_info 'packager variable = axe-<stage code>-<cpuid code>'
							_AXE_PACKAGER_NAME_STAGE1_BINARIES="axe_seed_$_axe_cpu_id_code"
							_AXE_PACKAGER_NAME_STAGE2_BINARIES="axe_tree_$_axe_cpu_id_code"
							_AXE_PACKAGER_NAME_STAGE3_BINARIES="axe_apple_$_axe_cpu_id_code"
							_AXE_PACKAGER_NAME_TOOLCHAIN="axe_tool_$_axe_cpu_id_code"
							_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB="axe_tool_multi_$_axe_cpu_id_code"
							axe_info 'whichresults in the following packeger tags'
							axe_info "STAGE1_BINARIES ----- tag is-----${bldcyn} axe_seed_$_axe_cpu_id_code"
							axe_info "STAGE2_BINARIES ----- tag is-----${bldcyn} axe_tree_$_axe_cpu_id_code"
							axe_info "STAGE3_BINARIES ----- tag is-----${bldcyn} axe_apple_$_axe_cpu_id_code"
							axe_info "TOOLCHAIN_BINARIES ----- tag is-----${bldcyn} axe_tool_$_axe_cpu_id_code"
							axe_info "MULTILIB_TOOLCHAIN_BINARIES ----- tag is-----${bldcyn} axe_tool_mult_$_axe_cpu_id_code"
							axe_info "is the above info good for you?"
							axe_menu_active Y "to fix the tags ${_AXE_ANY_OTHER_KEY} to not fix the tags and display detailed info on your processor"
							read -s -n1 _AXE_TMP_CHAR
							axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
							if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
								echo '----------- CPUID FULL OUTPUT ---------------------------' > "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
								cpuid --one-cpu >> "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
								echo '----------- /proc/cpuinfo FULL OUTPUT -------------------' >> "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
								cat "$_AXE_CPUINFO_PATH" >> "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
								echo '----------- dmesg FULL OUTPUT ---------------------------' >> "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
								dmesg >> "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
								_AXE_CPU_IDENTIFIED_YES=1
								save_settings
							else
								echo '----------- CPUID FULL OUTPUT ---------------------------' > "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
								cpuid --one-cpu >> "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
								echo '----------- /proc/cpuinfo FULL OUTPUT -------------------' >> "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
								cat "$_AXE_CPUINFO_PATH" >> "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
								echo '----------- dmesg FULL OUTPUT ---------------------------' >> "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
								dmesg >> "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
								nano "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
							fi
						else
							axe_fuck "could not optain any relevent processor info, basicly because i cannot find $_AXE_CPUINFO_PATH"
							axe_fuck "since it really really should be there on a fresh arch system i am considering this a fatal error"
						fi
					else 
						axe_fuck "cpuinfo refused to build or refused to install, please check the output above and try again"
						any_key
					fi
				else
					[[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 0 ]] && axe_warn " you need to fetch a pkgbuild repo either from git or usb first"
					[[ $_AXE_CPU_IDENTIFIED_YES -eq 0 ]] && axe_warn "cpu already identified skipping"
				fi ;;
		
		d|D) if [[ $_AXE_CPU_IDENTIFIED_YES -eq 1 && $_AXE_MAKEPKG_CONF_SETUP_YES -eq 0 ]]; then
				echo -e "\n"
				axe_info '############ SETUP MAKEPKG.CONF ############'
				axe_info "this routine alters your makepkg.conf, "
				axe_info "if you have an original, unaltered makepkg.con, then you are all set to go,"
				axe_info "otherwise chose to modify makepkg.conf yourself"
				axe_menu_active Y "to let me do the altrerations ${_AXE_ANY_OTHER_KEY} key to let you do makepkg.conf yourself"
				read -s -n1 _AXE_TMP_CHAR
				axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
				if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
					
					# backup first
					if [[ -s "$_AXE_DIR/makepkg.conf.original" ]]; then
						axe_info "$_AXE_DIR/makepkg.conf.original already present skipping backup"
					
					else
						#backup make.conf
						axe_info "$_AXE_DIR/makepkg.conf.original not found backing up to $_AXE_DIR/makepkg.conf.original"
						cp -p "$_AXE_MAKEPKG_CONF_PATH" "$_AXE_DIR/makepkg.conf.original"
					fi
					
					if [[ -s "/etc/makepkg.conf.axebackup" ]]; then
						axe_info "/etc/makepkg.conf.axebackup already present skipping backup"
					else
						axe_info "/etc/makepkg.conf.axebackup not found backing up to makepkg.conf.axebackup"
						#backup make.conf
						cp -p "/etc/makepkg.conf" "/etc/makepkg.conf.axebackup"
					fi
					
					#comment out current flags
					sed -i 's/CFLAGS=/#commented out by axe CFLAGS/' "$_AXE_MAKEPKG_CONF_PATH"
					if [[ $? -eq 0 ]]; then
						sed -i 's/CXXFLAGS=/#commented out by axe CXXFLAGS/' "$_AXE_MAKEPKG_CONF_PATH"
						if [[ $? -eq 0 ]]; then
							axe_info "standard compiler flags commented out"
						else
							axe_fuck "problem with commenting out CXXFLAGS"
							_axe_return=2
						fi
					else
						axe_fuck "problem with commenting out CFLAGS"
						_axe_return=1
					fi
					
					#mark makepkg.conf as modified by axe
					echo "#AXE modified this file $(date)" >> "$_AXE_MAKEPKG_CONF_PATH"
		
					#setup compiler flags
					
					_axe_gcc_ver=$(cat "/var/abs/core/gcc/PKGBUILD" | grep -m 1 'pkgver=' | sed 's/pkgver=//' )
		
					_AXE_CFLAGS=$(echo "" | gcc -march=native -v -E - 2>&1 | grep cc1 | sed 's/^/CFLAGS="-O2 -pipe/' | sed "s:/usr/lib/gcc/x86_64-unknown-linux-gnu/$_axe_gcc_ver/cc1 -E -quiet -v - ":: | sed 's:--param :--param=:g')
					_AXE_CXXFLAGS=$(echo "" | gcc -march=native -v -E - 2>&1 | grep cc1 | sed 's/^/CXXFLAGS="-O2 -pipe/' | sed "s:/usr/lib/gcc/x86_64-unknown-linux-gnu/$_axe_gcc_ver/cc1 -E -quiet -v - ":: | sed 's:--param :--param=:g')
					
					echo '----------- CFLAGS AND CXXFLAGS -----------' >> "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
					echo -e "CFLAGS= $_AXE_CFLAGS \nCXXFLAGS=$_AXE_CXXFLAGS \n" >> "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
		
					axe_info "at this point you need to decide what your compiler flags should be,"
					axe_info "i have detected your flags and can automatically add them, they are"
					axe_info "${bldcyn}$_AXE_CFLAGS"
					axe_info "${bldcyn}CXXFLAGS = CFLAGS"
					axe_info "but you may be more comfortable with ${bldcyn}-march=native${bldwht} which is what i used to calculate your flags, so im giving you the choice at this point"
					axe_info "here is a detailed and accurate summary of your cpu features"
					any_key
					nano "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
					axe_info "################ CFAGS-SUB-MENU ####################"
					axe_menu_active M "=FLAGS-TO-MARCH======= to set CFLAGS and CXXFLAGS to -march=native"
					axe_menu_active A "=FLAGS-TO-AXE========= to set CFLAGS and CXXFLAGS to the values above"
					axe_menu_active H "=FLAGS-TO-HUMAN======= to set CFLAGS and CXXFLAGS by hand from the processor information supplied"
					read -s -n1 _AXE_TMP_CHAR
					axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
					while [[ $_axe_escape -eq 0 ]]; do
						case "$_AXE_TMP_CHAR" in
							m|M) sed -i "/#commented out by axe CFLAGS/aCFLAGS=\"-O2 -pipe -march=native\"" "$_AXE_MAKEPKG_CONF_PATH"
								if [[ $? -eq 0 ]]; then
									sed -i "/#commented out by axe CXXFLAGS/aCXXFLAGS=\"-O2 -pipe -march=native\"" "$_AXE_MAKEPKG_CONF_PATH"
									if [[ $? -eq 0 ]]; then
										axe_info "axe compiler flags -march=native sucessfully inserted"
										_axe_escape=1
									else
										axe_fuck "problem with inserting axe CFLAGS compiler flags -march=native"
										_axe_return=4
										_axe_escape=1
									fi
								else
									axe_fuck "problem with inserting axe CXXFLAGS compiler flags -march=native"
									_axe_return=3 
									_axe_escape=1
								fi ;;
						
							a|A) sed -i "/#commented out by axe CFLAGS/a$_AXE_CFLAGS\"" "$_AXE_MAKEPKG_CONF_PATH"
							if [[ $? -eq 0 ]]; then
								sed -i "/#commented out by axe CXXFLAGS/a$_AXE_CXXFLAGS\"" "$_AXE_MAKEPKG_CONF_PATH"
								if [[ $? -eq 0 ]]; then
									axe_info "axe compiler flags $_AXE_CXXFLAGS sucessfully inserted"
									_axe_escape=1
								else
									axe_fuck "problem with inserting axe CFLAGS compiler flags $_AXE_CXXFLAGS"
									_axe_return=6
									_axe_escape=1
								fi
							else
								axe_fuck "problem with inserting axe CXXFLAGS compiler flags $_AXE_CXXFLAGS"
								_axe_return=5
								_axe_escape=1
							fi ;;
							
							h|H) nano "$_AXE_DIR/cpuinfo"
								nano "$_AXE_MAKEPKG_CONF_PATH" 
								_axe_escape=1 ;;
						esac
					done
		
					sed -i "s/\#PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_STAGE1_BINARIES\"/" "$_AXE_MAKEPKG_CONF_PATH"
					if [[ $? -eq 0 ]]; then
						axe_info "$_AXE_PACKAGER_NAME_STAGE1_BINARIES sucsessfully written as packeger"
					else
						axe_fuck "problem with inserting $_AXE_PACKAGER_NAME_STAGE1_BINARIES" 
						_axe_return=7
					fi

					#get rid of all the checks with !check and remove fakeroot since building in root
					sed -i 's/fakeroot !distcc color !ccache check !sign/!fakeroot !distcc color !ccache !check !sign/' "$_AXE_MAKEPKG_CONF_PATH"
					if [[ $? -eq 0 ]]; then
						axe_info "default compile tests commented out"
					else
						axe_fuck "problem with commenting out default compile tests"
						_axe_return=8
					fi
		
					#add makeflags
					#work out how many cores
					_AXE_CORES=$(cat "$_AXE_CPUINFO_PATH" | grep 'processor' | wc -l)
					let _AXE_CORES=$_AXE_CORES+1
					#make the change
					sed -i "s/#MAKEFLAGS=.*/MAKEFLAGS=\"-j$_AXE_CORES\"/" "$_AXE_MAKEPKG_CONF_PATH"
					if [[ $? -eq 0 ]]; then
						axe_info "sucsessfully added cores to make flags"
					else
						axe_fuck "problem with adding cores to make flags"
						_axe_return=9
					fi
					
					
					if [[ $_axe_return -eq 0 ]]; then
						questions_compile_options
						#final check
						axe_block '############## COOL !! ################'
						axe_info "everything seems to have gone well"
						axe_info "as a double check examin make.conf make sure changes are correct"
						any_key
						nano "$_AXE_MAKEPKG_CONF_PATH"
						#backup modified makepkg.conf we are going to need it as a check for next time i am run
						cp -pf "$_AXE_MAKEPKG_CONF_PATH" "$_AXE_DIR/makepkg.conf.axemodified"
						_AXE_MAKEPKG_CONF_SETUP_YES=1
						save_settings
					else
						[[ $_axe_return -eq 1 ]] && axe_fuck "problem with commenting out CFLAGS"
						[[ $_axe_return -eq 2 ]] && axe_fuck "problem with commenting out CXXFLAGS"
						[[ $_axe_return -eq 3 ]] && axe_fuck "problem with inserting axe CXXFLAGS compiler flags -march=native"
						[[ $_axe_return -eq 4 ]] && axe_fuck "problem with inserting axe CFLAGS compiler flags -march=native"
						[[ $_axe_return -eq 5 ]] && axe_fuck "problem with inserting axe CXXFLAGS compiler flags $_AXE_CXXFLAGS"
						[[ $_axe_return -eq 6 ]] && axe_fuck "problem with inserting axe CFLAGS compiler flags $_AXE_CXXFLAGS"
						[[ $_axe_return -eq 7 ]] && axe_fuck "problem with inserting $_AXE_PACKAGER_NAME_STAGE1_BINARIES" 
						[[ $_axe_return -eq 8 ]] && axe_fuck "problem with commenting out default compile tests"
						[[ $_axe_return -eq 9 ]] && axe_fuck "problem with adding cores to make flags"
						axe_info "given that any failiure at this stage is critical, i will reset makepkg.conf"
						axe_info "to the state it was in when i found it, then you can try again or go manual"
						axe_warn "remember though i NEED A ORIGINAL UNMODIFIED MAKEPKG.CONF to do any auto modifications"
						cp -pf "$_AXE_DIR/makepkg.conf.original" "$_AXE_MAKEPKG_CONF_PATH"
						rm -f "$_AXE_DIR/makepkg.conf.original"
						
					fi
		
					
				else
					questions_compile_options
					axe_info "ok you have chosen to make your own changes to makepkg.conf------ i will open it up in nano for you"
					axe_info "when you are done i will mark the file as modified so we do not repeat this step, please do not remove my tag ,its bloody obvious what it is"
					axe_info "here is a detailed and accurate summary of your cpu features"
					any_key
					nano "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
					nano "$_AXE_MAKEPKG_CONF_PATH"
					echo "#THE HUMAN modified this file $(date)" >> "$_AXE_MAKEPKG_CONF_PATH"
					#backup modified makepkg.conf we are going to need it to make sure update function works
					cp -p "$_AXE_MAKEPKG_CONF_PATH" "$_AXE_DIR/makepkg.conf.humanmodified"
				fi
			else
				[[ $_AXE_CPU_IDENTIFIED_YES -eq 0 ]] && axe_warn " you need to check your processor type first first"
				[[ $_AXE_MAKEPKG_CONF_SETUP_YES -eq 0 ]] && axe_warn "makepkg.conf already setup skipping"
			fi ;;
		
		
		*) axe_warn "incorrect key, try again" ;;

		esac
	done		
	

}




# ref and working on *******************************************************************************************************************************************
#***************************************************************************************************************************************************************




# trash bin *******************************************************************************************************************************************
#***************************************************************************************************************************************************************


# main script *******************************************************************************************************************************************
#***************************************************************************************************************************************************************

	# Check if root
	if [[ $(whoami) != root ]]; then
		echo -e "\n"
		axe_fuck "you must be some kind of root to even get my attention !  Goodbye !"
		exit 1
	fi
	
	#process input argument
#	case $1 in
#		-v|--verbose) _AXE_VERBOSE_YES=1 ;;
		
#	esac

	

	# basic environment setup
	
	
	check_dir
	
	#load settings if settings not there do first run tasks ( order of tasks impotant do not change)
	if [[ -s "$_AXE_DIR/settings" ]]; then
		source "$_AXE_DIR/settings"
	else
		if [[ ! -s "$_AXE_DIR/original_installed_packages.list" ]]; then
			axe_warn "no settings file detected assuming first run doing first run tasks and writing default values"
			
			#check for and do tmpfs
			if [[ $(cat "$_AXE_FSTAB_PATH" | grep "tmpfs") ]]; then
				axe_info "tmpfs ref found in fstab skipping"
			else
				axe_info "it has come to my attention that sysd is handling tmpfs"
				axe_info "this is not acceptable, since its simply not working, so am writing the correct ref to fstab"
				any_key
				echo "tmpfs		/tmp	tmpfs	nodev,nosuid	0	0" >> "$_AXE_FSTAB_PATH"
				axe_info "please check everything is cool in fstab, you should know how critical that is"
				axe_info "maybe move the tmpfs entry to your prefered location, after you double check i will reboot your pc so do not panic!"
				any_key
				nano "$_AXE_FSTAB_PATH"
				axe_info "double check !!! one typo and your system is unbootable !!!!!!!"
				any_key
				nano "$_AXE_FSTAB_PATH"
				echo "axe" >> "$_AXE_BASH_PROFILE_PATH"
				shutdown -r now
				exit 0 
			fi
			
			#backup pacman.conf
			if [[ -s "$_AXE_DIR/pacman.conf.original" ]]; then
				axe_info "$_AXE_DIR/pacman.conf.original already present skipping"
			else
				axe_info "$_AXE_DIR/pacman.conf.original not found backing up to $_AXE_DIR/pacman.conf.original"
				cp -p "$_AXE_PACMAN_CONF_PATH" "$_AXE_DIR/pacman.conf.original"
				[[ ! -s "$_AXE_DIR/pacman.conf.original" ]] && axe_warn "unable to backup pacman .conf to _AXE_DIR/pacman.conf.original, please check the output above" && any_key
			fi
		
			if [[ -s "/etc/pacman.conf.axebackup" ]]; then
				axe_info "/etc/pacman.conf.axebackup already present skipping"
			else
				cp -p "$_AXE_PACMAN_CONF_PATH" "/etc/pacman.conf.axebackup"
				[[ ! -s "/etc/pacman.conf.axebackup" ]] && axe_warn "unable to backup pacman .conf to _AXE_DIR/pacman.conf.original, please check the output above" && any_key
				axe_info "/etc/pacman.conf.axebackup not found backing up to pacman.conf.axebackup"
			fi
			#add archlinux fr
			if [[ $(cat "$_AXE_PACMAN_CONF_PATH" | grep 'archlinuxfr') ]]; then
				axe_info "an entry for archlinuxfr already exists------skipping"
			else
				axe_info "did not find an entry for archlinuxfr creating one"
				echo "#entry added by AXE cos you dont have it and i need yaourt for AUR" >> "$_AXE_PACMAN_CONF_PATH"
				echo "[archlinuxfr]" >> "$_AXE_PACMAN_CONF_PATH"
				echo 'Server = http://repo.archlinux.fr/$arch' >> "$_AXE_PACMAN_CONF_PATH"
				echo "#end of AXE entry" >> "$_AXE_PACMAN_CONF_PATH"
				if [[ $(cat "$_AXE_PACMAN_CONF_PATH" | grep 'archlinuxfr') ]]; then
					axe_info "archlinuxfr sucsessfully added"
				else
					axe_fuck "archlinuxfr not added, since i need yaourt this is a fatal error, exiting"
					exit 3
				fi
			fi
			
			#fetch deps
			axe_info "ok time to fetch all the progs i need to get the job done"
			any_key
		
			if [[ -s "/usr/lib32" ]]; then
				pacman -Syu
				pacman -S --needed  expac yaourt abs pkgtools git sed grep nano diffutils patch autoconf automake bison fakeroot flex m4 make pkg-config multilib-devel mc dialog
				if [[ ! $? -eq 0 ]]; then
					axe_fuck "pacman install problem, read the output above and rectify, this is a fatal error exiting"
					exit 3
				fi														
			else
				pacman -Syu
				pacman -S --needed expac yaourt abs pkgtools git devtools sed grep nano diffutils mc base-devel dialog
				if [[ ! $? -eq 0 ]]; then
					axe_fuck "pacman install problem, read the output above and rectify, this is a fatal error exiting"
					exit 3
				fi			
			fi
		
		
			axe_info "updating ABS"
			axe_info "by the way if ABS sync gets stuck at multilib download just ${_AXE_CTRLC} and i will continue,"
			axe_info "there is no harm in this and it only happend once, subsiquent times ABS uses a different sync method which does not stick, so i just check twice to make sure :)"
			
			abs
			abs
			
			
			
			#make backup of originally installed packages, if not already there, we will use this later
			if [[ -s "$_AXE_LISTS_DIR/original_installed_packages.list" ]]; then
				axe_fuck "$_AXE_LISTS_DIR/original_installed_packages.list already there very strange and should not happen,someone been tampering ?"
				any_key
			else
				axe_info "writing all installed packages to $_AXE_LISTS_DIR/original_installed_packages.list"
				expac "%n %v %p"  > "$_AXE_LISTS_DIR/original_installed_packages.list"
				if [[ -s "$_AXE_LISTS_DIR/original_installed_packages.list" ]]; then
					axe_info "installed packages list in $_AXE_LISTS_DIR/original_installed_packages.list written sucessfully"
				else
					axe_warn "problem with writing $_AXE_LISTS_DIR/original_installed_packages.list please check output above this is a fatal error, exiting"
					any_key
					exit 3
				fi
			fi
			
#			create minor lists that are retained
			echo "" > "$_AXE_LISTS_DIR/axe_sucsess_stage2.list"
			echo "" > "$_AXE_LISTS_DIR/axe_fail_stage2.list"
			echo "" > "$_AXE_LISTS_DIR/axe_sucsess_stage3.list"
			echo "" > "$_AXE_LISTS_DIR/axe_fail_stage3.list"
			echo "" > "$_AXE_LISTS_DIR/desktop_st2_sucess.list"
			echo "" > "$_AXE_LISTS_DIR/desktop_st2_fail.list"
			echo "" > "$_AXE_LISTS_DIR/desktop_st3_sucess.list"
			echo "" > "$_AXE_LISTS_DIR/desktop_st3_fail.list"
			echo "" > "$_AXE_LISTS_DIR/nvidia_st2_sucess.list"
			echo "" > "$_AXE_LISTS_DIR/nvidia_st2_fail.list"
			echo "" > "$_AXE_LISTS_DIR/nvidia_st3_sucess.list"
			echo "" > "$_AXE_LISTS_DIR/nvidia_st3_fail.list"
			echo "" > "$_AXE_LISTS_DIR/x64_fail.list"
			echo "" > "$_AXE_LISTS_DIR/x64_sucess.list"
			
			echo "" > "$_AXE_LISTS_DIR/updatebuild_fail.list"
			
			_AXE_FIRST_RUN_COMPLETE_YES=1
			save_settings
			
			if [[ -s "$_AXE_DIR/settings" ]]; then
				axe_info "default settings file written sucsessfully"
			else
				axe_fuck "problem with writing default settings file, this is a fatal error, exiting"
				any_key
				exit 3
			fi
			
		else
			axe_fuck "well fucked up dude !!! my settings file, is missing, this is a fatal error . exiting"
			any_key
			exit 3
		fi
	fi
	

	
	#check up to date
	if [[ $(cat "$_AXE_BASH_PROFILE_PATH" | grep 'axe') ]]; then
		axe_info "removing my entry from $_AXE_BASH_PROFILE_PATH"
		sed -i 's/axe//' "$_AXE_BASH_PROFILE_PATH"
		_AXE_RESUME_YES=0
		save_settings
	else
		axe_info "first things first we need to make sure your Arch mirrors are correct"
		pacman -Sy
		if [[ ! $? -eq 0 ]]; then
			axe_warn "problem with pacman sync, check output above and internet connection"
			any_key
		fi
		
	fi
	
	check_for_toolchain_change
	create_toolchain_list
	create_axe_list
	create_helper_axe_get_vers
	create_replace_systemd_list
	create_nvidia_list
	create_desktop_list
	create_x64_list
	create_base_reinstall_list
	intro
	[[ $_AXE_MAKEPKG_CONF_SETUP_YES -eq 1 ]] && check_makepkg_valid

	# some pkg fail in root without this
	export FORCE_UNSAFE_CONFIGURE=1


	#pre main run actions
	pre_menu
	
	#exports makeflags
	export _AXE_CUPS
	export _AXE_BLUETOOTH
	export _AXE_COLORD
	export _AXE_NETWORKMANAGER
	#exports pkg tags
	export _AXE_PREFIX_REL
	export _AXE_STAGE
	export _AXE_PROCESOR_REL
	export _AXE_SUFFIX_REL
	
	
	#bootstrap or dev choice
	
#	dialog --title "Axe Mode Choice"  --yesno "Are you having\ fun?" 6 25

	if [[ ! $_AXE_BOOTSTRAP ]]; then
		echo -e "\n"
		axe_info "ok now comes a critical choice"
		axe_info "do you want to bootsrap your machine, or build to stage 2 or 3"
		axe_info "bootstrapping is using precompiled optimised binaries maintained by other axe users"
		axe_info "this has the advantage of saving you many hours compiling , and the bother of self maintanence"
		axe_info "but the disadvantage that you are tied to the work of the repo maintrainer"
		axe_info "building your own binaries takes many hours of compiling but you are in complete"
		axe_info "control of every aspect of your system, also if no repo exists for you processor type you are stuck"
		axe_info "with building"
		axe_info "this is a one-way choice, i cannot at this time allow mixing of pre-compiled binaries"
		axe_info "with true-native packages. "
		axe_info "you can get back to this choice if you do not find a repo suitable in the bootstrap menu"
		axe_info "but otherwise you are tied to either mode from now on"
		axe_menu_active Y "to acess the BOOTSTRAP menu ${_AXE_ANY_OTHER_KEY} to access the DEV/BUILD menu"
		read -s -n1 _AXE_TMP_CHAR
		axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
		if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
			_AXE_BOOTSTRAP="yes"
			save_settings
		else
			_AXE_BOOTSTRAP="no"
			save_settings
		fi
	fi


	
	if [[ $_AXE_BOOTSTRAP == "yes" ]]; then
	
		
		while [[ $_AXE_ESCAPE -eq 50 ]]; do
			echo -e "\n"
		
		
			axe_block "############# BOOTSTRAP-MENU ###########"
			axe_fuck "BOOTSTRAP MENU STILL IN DEVELOPMENT DO NOT USE THIS MENU UNLESS YOU ARE FARMILIAR WITH MY CODE"
			axe_fuck "INSTEAD PRESS Z TO PROGRESS TO THE DEV MENU"
			
		#setupbootstrap S
			[[ $_AXE_BOOTSTRAP_SETUP_YES -eq 0 ]] && axe_menu_active S "=CHOSE-REPO========== to setup your system for bootsrapping"	
		#refresh binary git R
			[[ $_AXE_BOOTSTRAP_SETUP_YES -eq 1 ]] && axe_menu_active S "=REFRESH-REPO======== to refresh your local binary repo"
		#bootstrap toolchain T 
			[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]] && axe_menu_active T "=TOOLCHAIN========= to bootstrap your toolchain to an optimised state from git"
			[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]] && axe_menu_inactive T "=TOOLCHAIN========= OPTION UNAVAILABLE TOOLCHAIN ALREADY AN OPTIMISED VERSION"		
		#bootstrap init A L
			axe_menu_active A "=INIT============== to bootstrap your AXE INIT "
			axe_menu_active L "=INIT============== to bootstrap your LSD INIT"
		#bootstrap udev U
			[[ $_AXE_INIT_REPLACED_YES -eq 1 ]] && axe_menu_active U "=UDEV============== to bootstrap udev and replace systemd"
			[[ $_AXE_INIT_REPLACED_YES -eq 0 ]] && axe_menu_inactive U "=UDEV============== OPTION UNAVAILABLE UNTILL INIT REPLACED"
		#bootstrap desktop D		
			[[ $_AXE_UDEV_INSTALLED_YES -eq 1 ]] && axe_menu_active D "=DESKTOP=========== to bootstrap your desktops"
			[[ $_AXE_UDEV_INSTALLED_YES -eq 0 ]] && axe_menu_inactive D "=DESKTOP=========== OPTION UNAVAILABLE UNTILL SYSTEMD REPLACED"	
		#bootstrap kernel K
			[[ $_AXE_UDEV_INSTALLED_YES -eq 1 ]] && axe_menu_active K "=KERNEL============ to bootstrap your kernel"
			[[ $_AXE_UDEV_INSTALLED_YES -eq 0 ]] && axe_menu_inactive K "=KERNEL============ OPTION UNAVAILABLE UNTILL SYSTEMD REPLACED"
		#bootstrap nvidia N
			[[ $_AXE_UDEV_INSTALLED_YES -eq 1 ]] && axe_menu_active N "=NVIDIA============ to bootstrap Nvidia drivers and CUDA"
			[[ $_AXE_UDEV_INSTALLED_YES -eq 0 ]] && axe_menu_inactive N "=NVIDIA============ OPTION UNAVAILABLE UNTILL SYSTEMD REPLACED"
		
		#to dev menu Z		
			[[ $_AXE_BOOTSTRAP_SETUP_YES -eq 0 ]] && axe_menu_active Z "=OPTIMISATION-MENU= to abandon bootstrapping and progress to the Optimisation/DEV menu"
			[[ $_AXE_BOOTSTRAP_SETUP_YES -eq 1 ]] && axe_menu_inactive Z "=OPTIMISATION-MENU= OPTION UNAVAILABLE you have started to bootstrap"
			
			 
			read -s -n1 _AXE_TMP_CHAR
			axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
			case "$_AXE_TMP_CHAR" in
	
	# setup bootstrap			
				s|S) if [[ $_AXE_BOOTSTRAP_SETUP_YES -eq 0 ]]; then
						axe_info '########### SETUP BOOTSTRAP ##############'
						axe_info "ok you have chosen to bootstrap your system into stage 3 using precompiled optimised binaries"
						axe_info "the fist step in this is to match your processor with a suitable set of optimised binaries"
						axe_menu_active G "=TOOLCHAIN=========== to load your optimised binaries from ${bldblu} GIT${txtrst}"
						axe_menu_active P "=TOOLCHAIN=========== to load your optimised binaries by pacman repo assignment"
						read -s -n1 _AXE_TMP_CHAR
						axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
						case "$_AXE_TMP_CHAR" in
							g|G) get_repo_choice	
								if [[ $_AXE_BINARY_GIT_FETCHED_YES -eq 1 ]]; then
									axe_warn "my settings say git binary git is already fetched, which at this point is a bit suspicious, plese check the code"
									any_key
								else
									axe_info "so first lets download $_AXE_BIN_GIT_URL git to $_AXE_GIT_BIN_DIR and refresh $_AXE_LOCAL_BINARY_REPO_DIR"
									any_key				
									get_git "$_AXE_BIN_GIT_URL" "$_AXE_GIT_BIN_DIR"
									if [[ $? -eq 0 ]]; then
										_AXE_BINARY_GIT_FETCHED_YES=1 
										save_settings
										if [[ $(ls "$_AXE_GIT_BIN_DIR") ]]; then 
											cp -prf $_AXE_GIT_BIN_DIR/* "$_AXE_LOCAL_BINARY_REPO_DIR"
											if [[ $? -eq 0 ]]; then
												axe_info "the following files have been copied to $_AXE_LOCAL_BINARY_REPO_DIR"
												dir "$_AXE_LOCAL_BINARY_REPO_DIR"
												_AXE_BINARY_DIR_FILLED_YES=1
												save_settings
												any_key
												
												rm -f /var/cache/pacman/pkg/*
												rm -f $_AXE_PACMAN_CACHE_DIR/*
												update_repo_database "$_AXE_GIT_BIN_DIR" "axelocal"
												if [[ $? -eq 0 ]]; then
													mod_axe_repo_entries --local
													if [[ $? -eq 0 ]]; then
														_AXE_BOOTSTRAP_SETUP_YES=1
														SAVE_SETTINGS
													else
														axe_fuck "add local repo entry"
														any_key
													fi
												else
													axe_fuck "failed repo-add in $_AXE_LOCAL_BINARY_REPO_DIR"
													any_key
												fi
												
											else
												axe_fuck "there was a copy transfer problem between files from $_AXE_GIT_BIN_DIR to _AXE_LOCAL_BINARY_REPO_DIR"
												any_key
											fi
										else
											axe_info "$_AXE_GIT_BIN_DIR empty not copying any files"
										fi
									else
										axe_fuck "choasen BINARY git refused to download, check your internet connection"
									fi
								fi ;;
								
							p|P) get_repo_choice
								rm -f /var/cache/pacman/pkg/*
								rm -f $_AXE_PACMAN_CACHE_DIR/*
								mod_axe_repo_entries --remote
								if [[ $? -eq 0 ]]; then
									_AXE_BOOTSTRAP_SETUP_YES=1
									SAVE_SETTINGS
								else
									axe_fuck "add remote repo entry"
									any_key
								fi ;;
						esac
					else
						axe_warn "bootstrap already setup"
					fi ;;
			
	
	
	# refresh binary git
	
				r|R) if [[ $_AXE_BINARY_GIT_FETCHED_YES -eq 1 && $_AXE_BOOTSTRAP_SETUP_YES -eq 1 ]]; then
						axe_menu_active Y "if you want to update git and refresh $_AXE_LOCAL_BINARY_REPO_DIR ${_AXE_ANY_OTHER_KEY} if not,"
						read -s -n1 _AXE_TMP_CHAR
						axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
						if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then					
							refresh_git "$_AXE_GIT_BIN_DIR"
							if [[ $? -eq 0 ]]; then
								_AXE_BINARY_GIT_FETCHED_YES=1
								save_settings
								if [[ $(ls "$_AXE_GIT_BIN_DIR") ]]; then
									rm -fr $_AXE_LOCAL_BINARY_REPO_DIR/*
									cp -prf $_AXE_GIT_BIN_DIR/* "$_AXE_LOCAL_BINARY_REPO_DIR"
									if [[ $? -eq 0 ]]; then
										update_repo_database "$_AXE_GIT_BIN_DIR" "axelocal"
										if [[ $? -eq 0 ]]; then
											axe_info "the following files have been copied to $_AXE_LOCAL_BINARY_REPO_DIR"
											dir "$_AXE_LOCAL_BINARY_REPO_DIR"
											_AXE_BINARY_DIR_FILLED_YES=1 && save_settings
										else
											axe_fuck "failed repo-add in $_AXE_LOCAL_BINARY_REPO_DIR"
											any_key
										fi	
									else
										axe_fuck "there was a copy transfer problem between files from $_AXE_GIT_BIN_DIR to $_AXE_LOCAL_BINARY_REPO_DIR" && any_key
									fi
								else
									axe_info "$_AXE_GIT_BIN_DIR empty not copying any files"
								fi
							else
								axe_fuck "BINARY git refused to update, check your internet connection"
							fi
						fi
						
					else
						axe_fuck "you must complete bootstrap setup first"
					fi ;;
	
	
	# bootstrap	toolchain		
				t|T) pacman -S linux-api-headers glibc "libtool$_AXE_MULTILIB_SUFFIX" libltdl "binutils$_AXE_MULTILIB_SUFFIX" "gcc$_AXE_MULTILIB_SUFFIX" "gcc-ada$_AXE_MULTILIB_SUFFIX" "gcc-fortran$_AXE_MULTILIB_SUFFIX" "gcc-go$_AXE_MULTILIB_SUFFIX" "gcc-libs$_AXE_MULTILIB_SUFFIX" "gcc-objc$_AXE_MULTILIB_SUFFIX" zlib file gmp mpfr libmpc attr acl isl cloog ppl
					if [[ $? -eq 0 ]]; then
						#check load sucsessful
						toolchain_tag_check
						if [[ $? -eq 0 ]]; then
							axe_fuck "toolchain reset procedure failed one of the toolchain components still has the tag/tags "
							_axe_local_return_rtt=1
							any_key
						fi
					else
						axe_fuck "toolchain reset procedure failed pacman bailed out"
						_axe_local_return_rtt=2
						any_key
					fi	;;
				
	# bootstrap	init
	
				"A") pacman -S linux-api-headers ;;
				
				"L") pacman -Rsn --noconfirm systemd-sysvcompat
					if [[ $? -eq 0 ]]; then
						pacman -S "dhcpcd" "sysvinit" "initscripts-git"
						if [[ $? -eq 0 ]]; then 
							axe_info "now you need to configure rc.conf"
							any_key 
							nano /etc/rc.conf
							_AXE_RESUME_YES=1
							save_settings
							# write restsrt command to /etc/profile
							echo "axe" >> "$_AXE_BASH_PROFILE_PATH"
							shutdown -r now
							exit 0
						else
							axe_fuck "a LSD init component failed to install, have no choice but to reset your init back to arch standard so you can try again"
							pacman -S systemd-sysvcompa dhcpcd systemd --noconfirm
							if [[ $? -eq 0 ]]; then
								axe_info "init reset you are cool to go on but i would reboot if i were you"
								any_key
							else
								axe_fuck "well we are totally fucked,init refused to reset, your on your own im afraid, quitting"
								any_key
								exit 3
							fi
						
						fi

					else
						axe_fuck "pacman failed to remove systemd-sysvcompat, have no choice but to reset your init back to arch standard so you can try again"
						pacman -S systemd-sysvcompat dhcpcd systemd --noconfirm
						if [[ $? -eq 0 ]]; then
							axe_info "init reset you are cool to go on but i would reboot if i were you"  
							any_key
						else
							axe_fuck "well we are totally fucked,init refused to reset, your on your own im afraid, quitting"
							any_key
							exit 3
						fi
					fi ;;
	# bootstrap	udev
	
				"4") pacman -S syslog-ng mkinitcpio dbus ;;
	
	# bootstrap	kernel
	
				"5") bootstrap_kernel ;;
	
	# bootstrap	nvidia
	
				"6") stage3_bootstrap ;;
	
	
	# bootstrap	stage 3
	
				"7") stage3_bootstrap ;;
	
	# bootstrap	desktop
	
				"8") stage3_bootstrap ;;
				
	#update		
				
				
				
				
	#to dev menu		
				z|Z) axe_info "you have chosen to leave the boostrap menu in favour of the developer menu"
					axe_menu_active Y "to attemp to leave the bootstrap menu and acess the bootstrap/dev choice again  ${_AXE_ANY_OTHER_KEY} to return to bootstrap menu"
					read -s -n1 _AXE_TMP_CHAR
					axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
					if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
						if [[ $_AXE_BOOTSTRAP_SETUP_YES -eq 0 ]]; then
							_AXE_BOOTSTRAP=""
							save_settings
							_AXE_ESCAPE=51
							axe_info "ok you are cool to access the bootstrap/dev choice again, just run me again"
						else
							axe_warn "you have already started bootstrapping your machine, i cannot allow you to mix compiled packages with optimised binaries at this time"
							axe_warn "complete bootstrapping then we can talk about it"
						fi	
					fi ;;
				
		
				*) axe_warn "incorrect key please try again" ;;
				
				
				
			esac
		
		done
		
	else	
		
		
		
		
		#main menu
		
		
		#check the toolchain still cool
		toolchain_tag_check
		if [[ $? -eq 1 ]]; then
			axe_info "One or more of the toolchain components have been updated rendering the toolchain non-perfect, hence am marking the toolchain for recompilation"
			_AXE_TOOLCHAIN_OPTIMUM_YES=0
			save_settings
		fi
		
		_AXE_ESCAPE=50
	
		while [[ $_AXE_ESCAPE -eq 50 ]]; do
			echo -e "\n"
		
			axe_block "########################### MAIN-MENU ##########################"
			
			
	#usb sub-menu x		
			
			axe_menu_active X "=USB-SUB-MENU========== to perform various actions from ${bldblu}USB ${txtrst}"
			
	#get pkgbuiklds G
			[[ $_AXE_PKGBUILD_GIT_FETCHED_YES -eq 1 ]] && axe_menu_active G "=PKGBUILD-GIT======== to update your input $_AXE_INPUT_PKGBUILD_DIR from git"
			[[ $_AXE_PKGBUILD_GIT_FETCHED_YES -eq 0 ]] && axe_menu_active G "=PKGBUILD-GIT======== to load your input $_AXE_INPUT_PKGBUILD_DIR from git"
	
			
	#version check V
			[[ $_AXE_VERSIONS_CHECKED_YES -eq 0 && $_AXE_PKGBUILD_DIR_FILLED_YES -eq 1 ]] && axe_menu_active V "=VERSION-CHECK======= to run a version check on $_AXE_INPUT_PKGBUILD_DIR, note you need to pass this before i will let you move on"
			[[ $_AXE_VERSIONS_CHECKED_YES -eq 1 && $_AXE_PKGBUILD_DIR_FILLED_YES -eq 1 ]] && axe_menu_active V "=VERSION-CHECK======= to re-run a version check on $_AXE_INPUT_PKGBUILD_DIR"
			[[ $_AXE_VERSIONS_CHECKED_YES -eq 0 && $_AXE_PKGBUILD_DIR_FILLED_YES -eq 0 ]] && axe_menu_inactive V "=VERSION-CHECK======= OPTION UNAVAILABLE UNTILL $_AXE_INPUT_PKGBUILD_DIR FILLED"
			
	
			
	#toolchain T 
			
	
			[[ $_AXE_VERSIONS_CHECKED_YES -eq 1 && $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]] && axe_menu_active T "=TOOLCHAIN=========== to build a optimised toolchain"
			[[ $_AXE_VERSIONS_CHECKED_YES -eq 0 && $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]] && axe_menu_inactive T "=TOOLCHAIN=========== OPTION UNAVAILABLE UNTILL $_AXE_INPUT_PKGBUILD_DIR VERSIONS CHECKED"
			[[ $_AXE_VERSIONS_CHECKED_YES -eq 1 && $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]] && axe_menu_inactive T "=TOOLCHAIN=========== OPTION UNAVAILABLE TOOLCHAIN ALREADY AN OPTIMISED VERSION"
			[[ $_AXE_VERSIONS_CHECKED_YES -eq 0 && $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]] && axe_menu_inactive T "=TOOLCHAIN=========== OPTION UNAVAILABLE UNTILL $_AXE_INPUT_PKGBUILD_DIR VERSIONS CHECKED AND TOOLCHAIN NEEDS UPGRADING"
	
			
	#init R I
	
			[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]] && axe_menu_active R "=INIT================ to load and build the AXE init from git"
			[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]] && axe_menu_inactive R "=INIT================ OPTION UNAVAILABLE UNTILL TOOLCHAIN BUILT"
			[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]] && axe_menu_active I "=INIT================ to load and install the sysv based LSD init from git"
			[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]] && axe_menu_inactive I "=INIT================ OPTION UNAVAILABLE UNTILL TOOLCHAIN OPTIMUM"
	
	
			
	#udev U
			[[ $_AXE_UDEV_INSTALLED_YES -eq 0 && $_AXE_INIT_REPLACED_YES -eq 1 && $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]] &&  axe_menu_active U "=UDEV================ to build udev and replace systemd"
			[[ $_AXE_INIT_REPLACED_YES -eq 0 ]] &&  axe_menu_inactive U "=UDEV================ OPTION UNAVAILABLE UNTILL INIT REPLACED"
			[[ $_AXE_UDEV_INSTALLED_YES -eq 1 ]] &&  axe_menu_inactive U "=UDEV================ OPTION UNAVAILABLE UDEV ALREADY BUILT AND INSTALLED"
			[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]] &&  axe_menu_inactive U "=UDEV================ OPTION UNAVAILABLE UNTILL TOOLCHAIN OPTIMUM"
	
			
	#fetch sources F
			[[ $_AXE_SOURCES_FETCHED_YES -eq 1 && $_AXE_UDEV_INSTALLED_YES -eq 1 ]] && axe_menu_active F "=FETCH-SOURCES======= to update your sources by re-downloading everything"
			[[ $_AXE_SOURCES_FETCHED_YES -eq 0 && $_AXE_UDEV_INSTALLED_YES -eq 1 ]] && axe_menu_active F "=FETCH-SOURCES======= to fetch your sources"
			[[ $_AXE_SOURCES_FETCHED_YES -eq 1 && $_AXE_UDEV_INSTALLED_YES -eq 0 ]] && axe_menu_inactive F "=FETCH-SOURCES======= OPTION UNAVAILABLE UNTILL UDEV INSTALLED AND SYSTEMD REMOVED"
			[[ $_AXE_SOURCES_FETCHED_YES -eq 0 && $_AXE_UDEV_INSTALLED_YES -eq 0 ]] && axe_menu_inactive F "=FETCH-SOURCES======= OPTION UNAVAILABLE UNTILL UDEV INSTALLED AND SYSTEMD REMOVED"
	
			
	#kernel	K
			check_pkg_tag "linux" "--nofail" "--nosuc" "--tag" > /dev/null
			if [[  $? -eq 0 ]]; then
				[[ $_AXE_SOURCES_FETCHED_YES -eq 1 && $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]] && axe_menu_active K "=KERNEL============== to rebuild and optimise your kernal"
				[[ $_AXE_SOURCES_FETCHED_YES -eq 0 ]] && axe_menu_inactive K "=KERNEL============== OPTION UNAVAILABLE UNTILL SOURCES FETCHED"
				[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]] && axe_menu_inactive K "=KERNEL============== OPTION UNAVAILABLE UNTILL TOOLCHAIN OPTIMUM"
			else
				[[ $_AXE_SOURCES_FETCHED_YES -eq 1 && $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]] && axe_menu_active K "=KERNEL============== your kernal is already optimum but i will allow subsiquent rebuilds"
				[[ $_AXE_SOURCES_FETCHED_YES -eq 0 ]] && axe_menu_inactive K "=KERNEL============== OPTION UNAVAILABLE UNTILL SOURCES FETCHED"
				[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]] && axe_menu_inactive K "=KERNEL============== OPTION UNAVAILABLE UNTILL TOOLCHAIN OPTIMUM"
			fi
			
			
			
			
	#build stage 2 binaries B
			[[ $_AXE_SOURCES_FETCHED_YES -eq 1  && $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 && $_AXE_STAGE -eq 1 ]] && axe_menu_active B "=STAGE2-BINARIES===== to build stage 2 binaries"
			[[ $_AXE_SOURCES_FETCHED_YES -eq 0 ]] && axe_menu_inactive B "=STAGE2-BINARIES===== OPTION UNAVAILABLE UNTILL SOURCES FETCHED"
			[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]] && axe_menu_inactive B "=STAGE2-BINARIES===== OPTION UNAVAILABLE UNTILL TOOLCHAIN OPTIMUM"
			[[ $_AXE_STAGE -eq 3 ]] &&  axe_menu_inactive B "=STAGE2-BINARIES===== OPTION UNAVAILABLE SYSTEM ALREADY AT STAGE 3"
			[[ $_AXE_STAGE -eq 2 ]] &&  axe_menu_inactive B "=STAGE2-BINARIES===== OPTION UNAVAILABLE SYSTEM ALREADY AT STAGE 2"
			
			
	
	#nvidia stage2 N
			if [[ $_AXE_STAGE -eq 2 ]]; then
				[[ $_AXE_NVIDIA_STAGE -eq 1 && $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]] && axe_menu_active N "=NVIDIA============== to build Nvidia drivers and CUDA to stage2 level"
				[[ $_AXE_NVIDIA_STAGE -eq 2 ]] && axe_menu_inactive N "=NVIDIA-STAGE2======= OPTION UNAVAILABLE NVIDIA ALREADY BUILT TO STAGE 2"
				[[ $_AXE_NVIDIA_STAGE -eq 3 ]] && axe_menu_inactive N "=NVIDIA-STAGE2======= OPTION UNAVAILABLE NVIDIA ALREADY BUILT TO STAGE 3"
				[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]] && axe_menu_inactive N "=NVIDIA-STAGE2======= OPTION UNAVAILABLE UNTILL TOOLCHAIN OPTIMUM"
			else
				axe_menu_inactive N "=NVIDIA-STAGE2======= OPTION UNAVAILABLE UNTILL SYSTEM AT STAGE 2"
			fi
			
			
	#build desktop stage 2 D
			if [[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]]; then
				[[ $_AXE_STAGE -eq 1 ]] &&  axe_menu_inactive D "=DESKTOP-STAGE2====== OPTION UNAVAILABLE UNTILL SYSTEM AT STAGE 2"
				[[ $_AXE_STAGE -eq 2 ]] &&  axe_menu_active D "DESKTOP-STAGE2====== to build a your desktops at a stage 2 level"
				[[ $_AXE_STAGE -eq 3 ]] &&  axe_menu_active D "DESKTOP-STAGE2====== OPTION UNAVAILABLE YOU ARE AT STAGE 3"
			else
				axe_menu_inactive D "=DESKTOP-STAGE2====== OPTION UNAVAILABLE UNTILL TOOLCHAIN OPTIMUM"
			fi	
	
	
	#build stage 3 binaries C
			if [[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]]; then
				[[ $_AXE_STAGE -eq 2 ]] &&  axe_menu_active C "=STAGE3-BINARIES===== to build stage 3 binaries"
				[[ $_AXE_STAGE -eq 1 ]] &&  axe_menu_inactive C "=STAGE3-BINARIES===== OPTION UNAVAILABLE UNTILL STAGE 2 BINARIES BUILT"
				[[ $_AXE_STAGE -eq 3 ]] &&  axe_menu_inactive C "=STAGE3-BINARIES===== OPTION UNAVAILABLE SYSTEM ALREADY AT STAGE 3"
			else
				axe_menu_inactive C "=STAGE3-BINARIES===== OPTION UNAVAILABLE UNTILL TOOLCHAIN OPTIMUM"
			fi
		
			
	#nvidia stage3 H
		if [[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]]; then
			if [[ $_AXE_NVIDIA_STAGE -eq 2 && $_AXE_STAGE -eq 3 ]]; then
				[[ $_AXE_STAGE -eq 3 ]] && axe_menu_active H "=NVIDIA-STAGE3======= to rebuild Nvidia drivers and CUDA to stage3 level"
			else
				axe_menu_inactive H "=NVIDIA-STAGE3======= OPTION UNAVAILABLE YOU DID NOT BUILD NVIDIA AT STAGE 2"
			fi
		else
			axe_menu_inactive H "=NVIDIA-STAGE3======= OPTION UNAVAILABLE UNTILL TOOLCHAIN OPTIMUM"
		fi

			
	#build desktop stage 3 P
		if [[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]]; then
			if [[ $_AXE_DESKTOP_STAGE -eq 2 && $_AXE_STAGE -eq 3 ]]; then
				[[ $_AXE_STAGE -lt 3 ]] &&  axe_menu_inactive P "DESKTOP-STAGE3====== OPTION UNAVAILABLE UNTILL SYSTEM AT STAGE 3"
				[[ $_AXE_STAGE -eq 3 ]] &&  axe_menu_active P "DESKTOP-STAGE3====== to build a your desktops at a stage 3 level"
			else
				axe_menu_inactive H "=DESKTOP-STAGE3======= OPTION UNAVAILABLE YOU DID NOT BUILD YOUR DESKTOP AT STAGE 2"
			fi
			
		else
			axe_menu_inactive D "DESKTOP-STAGE3====== OPTION UNAVAILABLE UNTILL TOOLCHAIN OPTIMUM"
		fi
			
			
			
	#build x64 binaries	Q
			[[ $_AXE_UDEV_INSTALLED_YES -eq 1 ]] && axe_menu_active Q "=X64-BINARIES-NO-SYSD to build a minimal set of basic non optimised x64 biaries for folks who just hate systemd"
			[[ $_AXE_UDEV_INSTALLED_YES -eq 0 ]] && axe_menu_active Q "=X64-BINARIES-NO-SYSD OPTION UNAVAILABLE UNTILL $_AXE_INPUT_PKGBUILD_DIR VERSIONS CHECKED"				
			
			
	#update M	
			if [[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]]; then
				[[ $_AXE_STAGE -eq 1 ]] &&  axe_menu_inactive M "=MAINTAIN============ OPTION UNAVAILABLE UNTILL SYSTEM STABILISED AT STAGE 2 OR 3"
				[[ $_AXE_STAGE -gt 1 ]] &&  axe_menu_active M "=MAINTAIN============ to clean and update $_AXE_PKGBUILD_DIR"
			else
				axe_menu_inactive M "=MAINTAIN============ OPTION UNAVAILABLE UNTILL TOOLCHAIN OPTIMUM"
			fi
			
			axe_menu_active "${_AXE_ANY_OTHER_KEY} to quit AXE"
		
			
			read -s -n1 _AXE_TMP_CHAR
			axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
			case "$_AXE_TMP_CHAR" in
			
			
	#pkgbuild git		
				g|G) if [[ $_AXE_PKGBUILD_GIT_FETCHED_YES -eq 1 ]]; then
						echo -e "\n"
						axe_info "PKGBUILD git already downloaded do you want to refresh and update your pkgbuild git ?  i will then force you to do another version check"
						axe_menu_active Y "if you want to update git and refresh $_AXE_INPUT_PKGBUILD_DIR ${_AXE_ANY_OTHER_KEY} if not,"
						read -s -n1 _AXE_TMP_CHAR
						axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
						if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then		
							refresh_git "$_AXE_GIT_PKGBUILD_DIR"
							if [[ $? -eq 0 ]]; then
								if [[ $(ls -A "$_AXE_GIT_MAINTAINED_PKGBUILD_DIR") ]]; then
									rm -fr $_AXE_INPUT_PKGBUILD_DIR/*
									cp -pfr $_AXE_GIT_MAINTAINED_PKGBUILD_DIR/* "$_AXE_INPUT_PKGBUILD_DIR"
									if [[ $? -eq 0 ]]; then
										axe_info "the following PKGBUILD folders have been copied to $_AXE_INPUT_PKGBUILD_DIR"
										dir "$_AXE_INPUT_PKGBUILD_DIR"
										_AXE_VERSIONS_CHECKED_YES=0
										_AXE_PKGBUILD_DIR_FILLED_YES=1
										save_settings
									else
										axe_fuck "there was a copy transfer problem between files from $_AXE_GIT_MAINTAINED_PKGBUILD_DIR to $_AXE_INPUT_PKGBUILD_DIR"
										any_key
									fi
								else
									axe_info "$_AXE_GIT_MAINTAINED_PKGBUILD_DIR empty not copying any files"
								fi
							else
								axe_fuck "PKGBUILD git $_AXE_PKGBUILD_GIT_URL refused to update, check your internet connection"
							fi	
						fi
					else
						echo -e "\n"
						axe_info "so first lets download the your git and fill $_AXE_INPUT_PKGBUILD_DIR"
						any_key
						get_git "$_AXE_PKGBUILD_GIT_URL" "$_AXE_GIT_PKGBUILD_DIR"
						if [[ $? -eq 0 ]]; then
							_AXE_PKGBUILD_GIT_FETCHED_YES=1
							save_settings
							if [[ $(ls -A "$_AXE_GIT_MAINTAINED_PKGBUILD_DIR") ]]; then
								cp -pfr $_AXE_GIT_MAINTAINED_PKGBUILD_DIR/* "$_AXE_INPUT_PKGBUILD_DIR"
								if [[ $? -eq 0 ]]; then
									axe_info "the following files have been copied to $_AXE_INPUT_PKGBUILD_DIR"
									dir "$_AXE_INPUT_PKGBUILD_DIR"
									_AXE_VERSIONS_CHECKED_YES=0
									_AXE_PKGBUILD_DIR_FILLED_YES=1
									save_settings
								else
									axe_fuck "there was a copy transfer problem between files from $_AXE_GIT_MAINTAINED_PKGBUILD_DIR to $_AXE_INPUT_PKGBUILD_DIR"
									any_key
								fi
							else
								axe_info "$_AXE_GIT_MAINTAINED_PKGBUILD_DIR empty not copying any files"
							fi
						else
							axe_fuck "PKGBUILD git $_AXE_PKGBUILD_GIT_URL refused to download, check your internet connection"
						fi	
					fi ;;
					
					
					
	
	#check versions				
				v|V) if [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 1 ]]; then
						if [[ $_AXE_VERSIONS_CHECKED_YES -eq 1 ]]; then
							echo -e "\n"
							axe_info '######### VERSION-CHECK-SUB-MENU #####'
							axe_info "versions in  $_AXE_INPUT_PKGBUILD_DIR already checked want to do it again ?"
							axe_menu_active V "if you want to recheck the versions in $_AXE_INPUT_PKGBUILD_DIR with integrity checks in place,this forces a source fetch for each package so can be slow"
							axe_menu_active N "if you want to recheck the versions in $_AXE_INPUT_PKGBUILD_DIR with integrity checks turned off"
						else
							echo -e "\n"
							axe_info '######### VERSION-CHECK-SUB-MENU #####'
							axe_info "ok lets check the versions of the packages in  $_AXE_INPUT_PKGBUILD_DIR"
							axe_menu_active V "if you want to do a check of the versions in $_AXE_INPUT_PKGBUILD_DIR with integrity checks in place,this forces a source fetch for each package so can be slow"
							axe_menu_active N "if you want to do a check of the versions in $_AXE_INPUT_PKGBUILD_DIR with integrity checks turned off"
						fi
						axe_menu_active "${_AXE_ANY_OTHER_KEY}" "to do nothing and return to the main menu"
						read -s -n1 _AXE_TMP_CHAR
						axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
						
						[[ "$_AXE_TMP_CHAR" == "v" || "$_AXE_TMP_CHAR" == "V" ]] && version_check_pkgbuild_dir "$_AXE_INPUT_PKGBUILD_DIR" --int
						[[ "$_AXE_TMP_CHAR" == "n" || "$_AXE_TMP_CHAR" == "N" ]] && version_check_pkgbuild_dir "$_AXE_INPUT_PKGBUILD_DIR" --noint
						
						case $? in
						
						0) axe_info '################ COOL !! ################'
							axe_info "There were no upgrades to process and no errors stamping the pkgbuilds"
							axe_info '##########################################'
							_AXE_VERSIONS_CHECKED_YES=1
							save_settings ;;
				
						2) axe_warn "There were some process problems but nothing was out of date, will display a list so you can double check"
							any_key
							nano "$_AXE_LISTS_DIR/version_problems.list"
							axe_menu_active Y "if you want to quit now and investigate some pkgbuilds etc ${_AXE_ANY_OTHER_KEY} to continue"
							#backup version_problems.list
							cat "$_AXE_LISTS_DIR/version_problems.list" > "$_AXE_LISTS_DIR/version_problems-$(date +%Y%m%d-%H%M%S)"
							rm -f "$_AXE_LISTS_DIR/version_problems.list"
							read -s -n1 _AXE_TMP_CHAR
							axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
							if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then 
								_AXE_ESCAPE=2
							else
								_AXE_VERSIONS_CHECKED_YES=1
								save_settings
							fi ;;
						
						3) axe_fuck "there were some process problems and some packages are definatly are out of date, rectify the situation then re-run"
							any_key
							nano "$_AXE_LISTS_DIR/version_problems.list"
							#backup version_problems.list
							cat "$_AXE_LISTS_DIR/version_problems.list" > "$_AXE_LISTS_DIR/version_problems-$(date +%Y%m%d-%H%M%S)"
							rm -f "$_AXE_LISTS_DIR/version_problems.list"
							axe_menu_active Y "if you want to export the updateable pkgbuilds to USB stick ${_AXE_ANY_OTHER_KEY} if not,"
							read -s -n1 _AXE_TMP_CHAR
							axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
							[[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]] && export_pkgbuilds_to_usb "$_AXE_DEV_UPDATE_EXPORT_DIR" "$_AXE_USB_UPDATEABLE_PKGBUILD_DIR"
							_AXE_ESCAPE=3 ;;
						
						1) axe_fuck "the following PKGBUILDS are out of date, rectify the situation then re-run"
							any_key
							nano "$_AXE_LISTS_DIR/version_problems.list"
							#backup version_problems.list
							cat "$_AXE_LISTS_DIR/version_problems.list" > "$_AXE_LISTS_DIR/version_problems-$(date +%Y%m%d-%H%M%S)"
							rm -f "$_AXE_LISTS_DIR/version_problems.list"
							axe_menu_active Y "if you want to export the updateable pkgbuilds to USB stick ${_AXE_ANY_OTHER_KEY} if not,"
							read -s -n1 _AXE_TMP_CHAR
							axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
							[[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]] && export_pkgbuilds_to_usb "$_AXE_DEV_UPDATE_EXPORT_DIR" "$_AXE_USB_UPDATEABLE_PKGBUILD_DIR"
							_AXE_ESCAPE=4 ;;
							
						esac
	
						
					else	
						axe_warn " you need to fetch a pkgbuild repo either from git or usb first"
					fi ;;
					
					
					
				
	# toolchain build			
				t|T) echo -e "\n"
					axe_menu_active Y "if you want to build a optimised toolchain first i will fetch some minor sources then build  ${_AXE_ANY_OTHER_KEY} if not,"
					read -s -n1 _AXE_TMP_CHAR
					axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
					if [[ "$_AXE_TMP_CHAR" == "y" && $_AXE_VERSIONS_CHECKED_YES -eq 1 ]]; then		
						axe_info "Fetching sources for your toolchain build"	
						fetch_sources "$_AXE_PKGBUILD_DIR" "$_AXE_LISTS_DIR/toolchain.list"
						if [[ $? -eq 0 ]]; then
							# contains tool tag check so wont be built needlesly
							build_toolchain
							if [[ $? -eq 0 ]]; then
								toolchain_tag_check
								if [[ $? -eq 0 ]]; then
									axe_info "tolchain now has the correct packeger variable, saving toolchain version"
									_AXE_TOOLCHAIN_OPTIMUM_YES=1
									save_settings
								else
									axe_fuck "wow wierd for some reason the above packeges failed to take the packger tag after a rebuild will let you try again"
									any_key
								fi
							else
								axe_fuck "There was a problem with building your optimised toolchain read the above output"
								any_key
							fi
						else	
							axe_fuck "the following sources gave ncamp warnings AND critical processing errors errors"
							axe_fuck "read the following list"
							axe_fuck "rectify the situation then re-run"
							any_key
							nano "$_AXE_LISTS_DIR/src_fetch_errors.list"
							#backup src_fetch_errors.list
							cat "$_AXE_LISTS_DIR/src_fetch_errors.list" > "$_AXE_LISTS_DIR/src_fetch_errors-$(date +%Y%m%d-%H%M%S)"
							rm -f "$_AXE_LISTS_DIR/src_fetch_errors.list"
							_AXE_ESCAPE=6
						fi
					else
						[[ $_AXE_VERSIONS_CHECKED_YES -eq 0 ]] && axe_warn "you need to check versions before i will allow this.......... skipping"			
					fi ;;
					
					
	#axe init from git			
				r|R) echo -e "\n"
					axe_info "most of the steps in this process require youi to say yes, this is deliberate so you can see whats going on"
					axe_menu_active Y "if you want to build and load the runit-based axe-init from git ${_AXE_ANY_OTHER_KEY} if not,"
					read -s -n1 _AXE_TMP_CHAR
					axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
					if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then	
						if [[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]]; then
							axe_init_git
							if [[ $? -eq 0 ]]; then
								axe_info "init loaded "
								expac "%n" | grep -v 'systemd' > "$_AXE_LISTS_DIR/int_installed_packages.list"
								echo "udev-axe" >> "$_AXE_LISTS_DIR/int_installed_packages.list"
								_AXE_INIT_REPLACED_YES=1
								_AXE_RESUME_YES=1
								save_settings
								# write restsrt command to /etc/profile
								echo "axe" >> "$_AXE_BASH_PROFILE_PATH"
								shutdown -r now
								exit 0
							else
								axe_fuck "There was a problem with init replacement read the above output"
								any_key
							fi
						else
							axe_warn "for the build part of this opperation you need a optimised toolchain .......... skipping"
						fi 
					fi ;;
					
				
	
	#lsd init from git				
				i|I) echo -e "\n"
					axe_menu_active Y "if you want to build LSD init from git ${_AXE_ANY_OTHER_KEY} if not,"
					read -s -n1 _AXE_TMP_CHAR
					axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
					if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then	
						if [[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]]; then
							lsd_init
							if [[ $? -eq 0 ]]; then
								axe_info "init loaded "
								expac "%n" | grep -v 'systemd' > "$_AXE_LISTS_DIR/int_installed_packages.list"
								echo "udev-axe" >> "$_AXE_LISTS_DIR/int_installed_packages.list"
								_AXE_INIT_REPLACED_YES=1
								_AXE_RESUME_YES=1
								save_settings
								# write restsrt command to /etc/profile
								echo "axe" >> "$_AXE_BASH_PROFILE_PATH"
								shutdown -r now
								exit 0
							else
								axe_fuck "There was a problem with init replacement read the above output"
								any_key
							fi 
						else
							axe_warn "for the build part of this opperation you need a optimised toolchain .......... skipping"
						fi 		
					fi ;;				
					
	#udev			
				u|U) echo -e "\n"
					axe_menu_active Y "if you want to build udev and all its deps, thus replacing systemd, i will download the needed sources first ${_AXE_ANY_OTHER_KEY} if not,"
					read -s -n1 _AXE_TMP_CHAR
					axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
					if [[ "$_AXE_TMP_CHAR" == "y" && $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]]; then
						axe_info "Fetching sources for your udev and associated components build"
						fetch_sources "$_AXE_PKGBUILD_DIR" "$_AXE_LISTS_DIR/replace_systemd.list" --nosync
						if [[ $? -eq 0 ]]; then
							if [[ $_AXE_UDEV_INSTALLED_YES -eq 0 ]]; then
								build_list "$_AXE_LISTS_DIR/replace_systemd.list" --nofail --nosuc --tag
								case $?	in
									0) _AXE_UDEV_INSTALLED_YES=1
										_AXE_RESUME_YES=1
										save_settings
										# write restsrt command to /etc/profile
										echo "axe" >> "$_AXE_BASH_PROFILE_PATH"
										shutdown -r now
										exit 0 ;;
									1)  axe_fuck " one or more systemd replacement components did not build install export or was not found altogether"
										axe_fuck " this could be a problem or just a minor glitch you can ignore"
										axe_fuck " these are the packages that failed build"
										any_key
										nano "$_AXE_LISTS_DIR/fails_display.list"
										axe_menu_active Y "to quit , examin your build fail logs, do some work and try again ${_AXE_ANY_OTHER_KEY} to ignore the situation and mark udev as replaced"
										read -s -n1 _AXE_TMP_CHAR
										axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
										if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
											_AXE_ESCAPE=7
										else
											_AXE_UDEV_INSTALLED_YES=1
											_AXE_RESUME_YES=1
											save_settings
											# write restsrt command to /etc/profile
											echo "axe" >> "$_AXE_BASH_PROFILE_PATH"
											shutdown -r now
											exit 0
										fi ;;
								esac
								
							else
								axe_info "udev already installed skipping ......"
							fi
							
						else	
							axe_fuck "the following sources failed in some way, rectify the situation then re-run, also available in $_AXE_LISTS_DIR/src_fetch_errors.list"
							any_key
							nano "$_AXE_LISTS_DIR/src_fetch_errors.list"
							#backup src_fetch_errors.list
							cat "$_AXE_LISTS_DIR/src_fetch_errors.list" > "$_AXE_LISTS_DIR/src_fetch_errors-$(date +%Y%m%d-%H%M%S)"
							rm -f "$_AXE_LISTS_DIR/src_fetch_errors.list"
							_AXE_ESCAPE=9
						fi	
					else
						axe_warn "you need a optimised toolchain before i will allow this opperation .......... skipping"
					fi ;;
					
					
	#fetch sources				
				f|F) if [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 1 && $_AXE_VERSIONS_CHECKED_YES -eq 1 && $_AXE_INIT_REPLACED_YES -eq 1 && $_AXE_UDEV_INSTALLED_YES -eq 1 ]]; then
						[[ $_AXE_SOURCES_FETCHED_YES -eq 0 ]] && axe_info "now lets do an initial run of downloading these sources you may have to ctrl c many times and fix"
						[[ $_AXE_SOURCES_FETCHED_YES -eq 0 ]] && axe_info "broken source url's upstream servers often take a break!!"
						[[ $_AXE_SOURCES_FETCHED_YES -eq 0 ]] && axe_menu_active Y "if you want to fetch your sources  ${_AXE_ANY_OTHER_KEY} if not"
						[[ $_AXE_SOURCES_FETCHED_YES -eq 1 ]] && axe_info "sources already fetched so i will be fething those pkgbuilds not already present in $_AXE_PKGBUILD_DIR"
						[[ $_AXE_SOURCES_FETCHED_YES -eq 1 ]] && axe_menu_active Y "if you want to rerun fetches  ${_AXE_ANY_OTHER_KEY} if not"
						read -s -n1 _AXE_TMP_CHAR
						axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
						if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
							axe_info "the speed of this stage depends on your internet connection, about 1 hour on a 1.3 mbit connection"
							axe_info "and obviously faster or slower depending on connection and country etc"
							any_key
							cat "$_AXE_LISTS_DIR/axe.list" > "$_AXE_LISTS_DIR/sources.list"
							echo "linux" >> "$_AXE_LISTS_DIR/sources.list"
							fetch_sources "$_AXE_PKGBUILD_DIR" "$_AXE_LISTS_DIR/sources.list"
							if [[ $? -eq 0 ]]; then
								axe_info '################ COOL !! ################'
								axe_info "all sources fetched, no problems of any kind"
								_AXE_SOURCES_FETCHED_YES=1
								save_settings
							else
								axe_fuck "the following sources gave ncamp warnings AND critical processing errors"
								axe_fuck "read the following list"
								axe_fuck "rectify the situation then re-run"
								any_key
								nano "$_AXE_LISTS_DIR/src_fetch_errors.list"
								#backup src_fetch_errors.list
								cat "$_AXE_LISTS_DIR/src_fetch_errors.list" > "$_AXE_LISTS_DIR/src_fetch_errors-$(date +%Y%m%d-%H%M%S)"
								rm -f "$_AXE_LISTS_DIR/src_fetch_errors.list"
								_AXE_ESCAPE=10	
							fi
						fi
					else
						[[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 0 ]] && axe_warn " you need to fetch a pkgbuild repo either from git or usb first"
						[[ $_AXE_VERSIONS_CHECKED_YES -eq 0 ]] && axe_warn " you need to check the pkgbuild repo versions first"
						[[ $_AXE_INIT_REPLACED_YES -eq 0 ]] && axe_warn " you need to load an init first"
						[[ $_AXE_UDEV_INSTALLED_YES -eq 0 ]] && axe_warn " you need to build udev and replace systemd first"
					fi ;;
					
	#rebuild kernal			
				k|K) check_pkg_tag "linux" "--nofail" "--nosuc" "--tag"
					if [[  $? -eq 0 ]]; then
						if [[ $_AXE_SOURCES_FETCHED_YES -eq 1 && $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]]; then
							axe_menu_active Y "if you want to optimise your kernal, i will present you with some choices before build ${_AXE_ANY_OTHER_KEY} if not"
							read -s -n1 _AXE_TMP_CHAR
							axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
							if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
								axe_info "right ! time to make some descisions about rebuilding your kernel i will build it with full CFLAGS optimisation which should give you a bit of a performance boost"
								axe_info "do you want to configure the kernel for yourself ? if you say yes i will bring up a standard kernal config menu"
								axe_info "which SHOULD show your standard arch config,if unsure use the menue to load the standard arch config in  $_AXE_RAM_BUILD_DIR/linux"
								axe_info "then you can make any alterations you need , save and quit, then i will finish the build"
								axe_info "it is quite usefull to change processor type from generic to your prefered type, this will gain you another 5pc boost ontop of the gains from optimisation"
								axe_info "but i would not bother with much else, arch kernal configs are very good in my opinion"
								axe_info "at the end of the build i will reboot your pc which could be automatic or need your assistance, if you get a build fail, follow the instructions, or your nose"
								axe_info "do you want to build your kernal with a menu? this will allow you to reconfigure your kernel but can be risky if your not sure what your doing"
								axe_menu_active Y "to build your kernel with a menu, ${_AXE_ANY_OTHER_KEY} to use default menu config as provided by Arch"
								read -s -n1 _AXE_TMP_CHAR
								axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
								if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
									_AXE_LINUX_MENU_YES=1
								else
									_AXE_LINUX_MENU_YES=0
								fi
								
								
								axe_info "ok you fancy being really daring and building the kernel with -O3 ?"
								axe_menu_active Y "to build your kernal with -O3 ${_AXE_ANY_OTHER_KEY} to build your kernal with O2"
								read -s -n1 _AXE_TMP_CHAR
								axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
								if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
									_AXE_LINUX_O2_O3="--o3"
								else
									_AXE_LINUX_O2_O3="--o2"
								fi
								
								build_axe_pkgbuild "linux" "--install" "--nocon" "$_AXE_PKGBUILD_DIR" "$_AXE_LINUX_O2_O3" "--nofail" "--nosuc" "--tag" "--nocheck"
								if [[ $? -lt 5 ]]; then
									_AXE_RESUME_YES=1
									save_settings
									# write restsrt command to /etc/profile
									echo "axe" >> "$_AXE_BASH_PROFILE_PATH"
									shutdown -r now
									exit 0
								fi
							fi
						
						else	
							[[ $_AXE_SOURCES_FETCHED_YES -eq 0 ]] && axe_warn "you need to fetch sources first"
							[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]] && axe_warn "you need a optimised toolchain before i will allow this opperation .......... skipping"
						fi 				
					
					else
						axe_info "kernal already has the packeger variable set but maybe you need to rebuild it anyway ( change your config etc )"
						axe_menu_active Y "if you want to re-optimise your kernal, i will present you with the usual choices before build ${_AXE_ANY_OTHER_KEY} if not"
						read -s -n1 _AXE_TMP_CHAR
						axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
						if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
							if [[ $_AXE_SOURCES_FETCHED_YES -eq 1 && $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]]; then
								
								axe_info "right ! time to make some descisions about rebuilding your kernel i will build it with full CFLAGS optimisation which should give you a bit of a performance boost"
								axe_info "do you want to configure the kernel for yourself ? if you say yes i will bring up a standard kernal config menu"
								axe_info "which SHOULD show your standard arch config,if unsure use the menue to load the standard arch config in  $_AXE_RAM_BUILD_DIR/linux"
								axe_info "then you can make any alterations you need , save and quit, then i will finish the build"
								axe_info "it is quite usefull to change processor type from generic to your prefered type, this will gain you another 5pc boost ontop of the gains from optimisation"
								axe_info "but i would not bother with much else, arch kernal configs are very good in my opinion"
								axe_info "at the end of the build i will reboot your pc which could be automatic or need your assistance, if you get a build fail, follow the instructions, or your nose"
								axe_info "do you want to build your kernal with a menu? this will allow you to reconfigure your kernel but can be risky if your not sure what your doing"
								axe_menu_active Y "to build your kernel with a menu, ${_AXE_ANY_OTHER_KEY} to use default menu config as provided by Arch"
								read -s -n1 _AXE_TMP_CHAR
								axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
								if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
									_AXE_LINUX_MENU_YES=1
								else
									_AXE_LINUX_MENU_YES=0
								fi
								
								
								axe_info "ok you fancy being really daring and building the kernel with -O3 ?"
								axe_menu_active Y "to build your kernal with -O3 ${_AXE_ANY_OTHER_KEY} to build your kernal with O2"
								read -s -n1 _AXE_TMP_CHAR
								axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
								if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
									_AXE_LINUX_O2_O3="--o3"
								else
									_AXE_LINUX_O2_O3="--o2"
								fi
								
								build_axe_pkgbuild "linux" "--install" "--nocon" "$_AXE_PKGBUILD_DIR" "$_AXE_LINUX_O2_O3" "--nofail" "--nosuc" "--tag" "--nocheck"
								if [[ $? -lt 5 ]]; then
									_AXE_RESUME_YES=1
									save_settings
									# write restsrt command to /etc/profile
									echo "axe" >> "$_AXE_BASH_PROFILE_PATH"
									shutdown -r now
									exit 0
								fi
							
							else	
								[[ $_AXE_SOURCES_FETCHED_YES -eq 0 ]] && axe_warn "you need to fetch sources first"
								[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]] && axe_warn "you need a optimised toolchain before i will allow this opperation .......... skipping"
							fi
						fi
					fi ;;
	
	
					
	#build stage 2 binaries		
				b|B) if [[ $_AXE_STAGE -eq 1 && $_AXE_SOURCES_FETCHED_YES -eq 1 && $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]]; then
						echo -e "\n"
						axe_menu_active Y "if you want to build your stage 2 binaries ${_AXE_ANY_OTHER_KEY} to return to the main menu"
						read -s -n1 _AXE_TMP_CHAR
						axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
						if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
							axe_info "ok about to build all the stage2 binaries this is a fucking automated long build so piss off, get a coffe, roll a spliff and check on me in a few hours"
							axe_info "dont worry though i will present you with a summary at the end so you wont have to sit there and watch"
							#switch over the packager name
							sed -i "s/PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_STAGE2_BINARIES\"/" "$_AXE_MAKEPKG_CONF_PATH"
							sed -i "s/PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_STAGE2_BINARIES\"/" "$_AXE_DIR/makepkg.conf.axemodified"
							_AXE_STAGE=2
							export _AXE_STAGE
							build_list "$_AXE_LISTS_DIR/axe.list" "$_AXE_LISTS_DIR/axe_fail_stage2.list" "$_AXE_LISTS_DIR/axe_sucsess_stage2.list" --notag
							case $?	in
								0) stage2_finish
									if [[  $? -eq 0 ]]; then
										_AXE_STAGE=2
										save_settings
									fi ;;
								1)  axe_fuck "one or more stage 2 pkgbuilds in $_AXE_LISTS_DIR/axe.list did not build install export or was not found"
									axe_fuck "given the number of packages in this list, and that"
									axe_fuck "most of them are non-axe native ( my creator is not maintaining them)"
									axe_fuck "then this situation is almost enevitable, unless any of these fails are reallly scary"
									axe_fuck "i would ignore them"
									axe_fuck " these are the packages that failed build"
									any_key
									nano "$_AXE_LISTS_DIR/fails_display.list"
									axe_menu_active Y "to exit, check your build logs, do some work and try again ${_AXE_ANY_OTHER_KEY} to ignore the situation and mark stag2 binaries as built"
									read -s -n1 _AXE_TMP_CHAR
									axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
									if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
										nano "$_AXE_LISTS_DIR/fails_display.list"
										_AXE_ESCAPE=14
									else
										stage2_finish
										if [[  $? -eq 0 ]]; then
											_AXE_STAGE=2
											save_settings
										fi
									fi ;;
							esac
						fi
					else
						[[ $_AXE_SOURCES_FETCHED_YES -eq 0 ]] && axe_warn "you need to fetch sources first ......"
						[[ $_AXE_STAGE -gt 1 ]] && axe_info "you already are at stage $_AXE_STAGE"
						[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]] && axe_warn "you need a optimised toolchain before i will allow this opperation .......... skipping"
					fi ;;
					
					
		
		
	#build stage 3 binaries		
				c|C) if [[ $_AXE_STAGE -eq 2 && $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]]; then
						echo -e "\n"
						axe_info "ok about to build all the stage3 binaries this is a fucking long build so piss off, get a coffe, roll a spliff and check on me in a couple of hours"
						axe_menu_active Y "if you want to build your stage 3 binaries ${_AXE_ANY_OTHER_KEY} to return to the main menu"
						read -s -n1 _AXE_TMP_CHAR
						axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
						if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
							axe_info "ok about to build all the stage3 binaries this is a fucking automated long build so piss off, get a coffe, roll a spliff and check on me in a couple of hours"
							axe_info "dont worry though i will present you with a summary at the end so you dont have to sit there and watch"
							any_key
							#switch over the packager name
							sed -i "s/PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_STAGE3_BINARIES\"/" "$_AXE_MAKEPKG_CONF_PATH"
							sed -i "s/PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_STAGE3_BINARIES\"/" "$_AXE_DIR/makepkg.conf.axemodified"
							_AXE_STAGE=3
							export _AXE_STAGE
						
							build_list "$_AXE_LISTS_DIR/axe.list" "$_AXE_LISTS_DIR/axe_fail_stage3.list" "$_AXE_LISTS_DIR/axe_sucsess_stage3.list" --notag
							case $?	in
								0) stage3_finish
									if [[  $? -eq 0 ]]; then
										_AXE_STAGE=3
										save_settings
									fi ;;
								1) axe_fuck "one or more pkgbuilds in $_AXE_LISTS_DIR/axe.list did not build install export or was not found"
									axe_fuck "given the number of packages in this list, and that"
									axe_fuck "most of them are non-axe native ( my creator is not maintaining them)"
									axe_fuck "then this situation is almost enevitable, unless any of these fails are reallly scary"
									axe_fuck "i would ignore them"
									axe_fuck " these are the packages that failed build"
									any_key
									nano "$_AXE_LISTS_DIR/fails_display.list"
									axe_menu_active Y "to exit, check your build logs, do some work and try again ${_AXE_ANY_OTHER_KEY} to ignore the situation and mark stag3 binaries as built"
									read -s -n1 _AXE_TMP_CHAR
									axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
									if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
										nano "$_AXE_LISTS_DIR/fails_display.list"
										_AXE_ESCAPE=16
									else
										stage3_finish
										if [[  $? -eq 0 ]]; then
											_AXE_STAGE=3
											save_settings
										fi
									fi ;;
							esac
						fi
					else
						[[ ! $_AXE_STAGE -eq 2 ]] && axe_info "you need to be at stage 2 to build to stage 3"
						[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]] && axe_warn "you need a optimised toolchain before i will allow this opperation .......... skipping"
					fi ;;	
		
		
		
	#nvidia		stage 2	
				n|N) if [[ $_AXE_NVIDIA_STAGE -eq 1 && $_AXE_STAGE -eq 2 && $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]]; then
						axe_info "are you running a fairly modern nvidia graphics card ?"
						axe_info "if so you can take advantage of all the wonderfull cuda powered utils"
						axe_menu_active Y "if you are running a NVIDIA and want to build the drivers${_AXE_ANY_OTHER_KEY} if running some other piece of crap or are utterly mad and dont want cuda"
						read -s -n1 _AXE_TMP_CHAR
						axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
						if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
							axe_info "Fetching sources for your Nvidia and associated components build"	
							fetch_sources "$_AXE_PKGBUILD_DIR" "$_AXE_LISTS_DIR/nvidia.list" --nosync
							if [[ $? -eq 0 ]]; then
									pacman -Rc ati-dri intel-dri nouveau-dri --noconfirm
									if [[ $? -eq 0 ]]; then
										build_list "$_AXE_LISTS_DIR/nvidia.list" --nofail --nosuc --tag
										case $?	in
											0) _AXE_NVIDIA_STAGE=2
												#setup xinitrc and add startx to profile
												_AXE_RESUME_YES=1
												save_settings
												# write restsrt command to /etc/profile
												echo "axe" >> "$_AXE_BASH_PROFILE_PATH"
												shutdown -r now
												exit 0 ;;
												
											1)  axe_fuck " one or more nvidia components did not build install export or was not found altogether"
												axe_fuck " this could be a problem or just a minor glitch you can ignore"
												axe_fuck " these are the packages that failed build" 
												any_key
												nano "$_AXE_LISTS_DIR/fails_display.list"
												axe_menu_active Y "to exit, check your build logs, do some work and try again ${_AXE_ANY_OTHER_KEY} to ignore the situation and mark Nvidia as installed"
												read -s -n1 _AXE_TMP_CHAR
												axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
												if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
													_AXE_ESCAPE=12
												else
													#setup xinitrc and add startx to profile
													_AXE_NVIDIA_STAGE=2
													_AXE_RESUME_YES=1
													save_settings
													# write restsrt command to /etc/profile
													echo "axe" >> "$_AXE_BASH_PROFILE_PATH"
													shutdown -r now
													exit 0
												fi ;;
										esac
									else	
										axe_fuck "pacman failed to remove ati-dri intel-dri nouveau-dri please check why then rerun " 
										any_key
									fi		
							else	
								axe_fuck "the following sources failed in some way, rectify the situation then re-run, also available in $_AXE_LISTS_DIR/src_fetch_errors.list"
								any_key
								nano "$_AXE_LISTS_DIR/src_fetch_errors.list"
								#backup src_fetch_errors.list
								cat "$_AXE_LISTS_DIR/src_fetch_errors.list" > "$_AXE_LISTS_DIR/src_fetch_errors-$(date +%Y%m%d-%H%M%S)"
								rm -f "$_AXE_LISTS_DIR/src_fetch_errors.list"
								_AXE_ESCAPE=16
							fi	
							
						fi
						
					else
						[[ $_AXE_NVIDIA_STAGE -eq 2 ]] && axe_info "nvidia and CUDA already installed skipping ......"
						[[ $_AXE_NVIDIA_STAGE -eq 3 ]] && axe_info "nvidia and CUDA already at stage 3 skipping ......"
						[[ ! $_AXE_STAGE -eq 2 ]] && axe_warn "you need to be at stage 2 for this"
						[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]] && axe_warn "you need a optimised toolchain before i will allow this opperation .......... skipping"
					fi ;;
					
					
	#nvidia		stage 3
				h|H) if [[ $_AXE_NVIDIA_STAGE -eq 2 && $_AXE_STAGE -eq 3 && $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]]; then
						axe_info "are you running a fairly modern nvidia graphics card ?"
						axe_info "if so you can take advantage of all the wonderfull cuda powered utils"
						axe_menu_active Y "if you are running a NVIDIA and want to build the drivers${_AXE_ANY_OTHER_KEY} if running some other piece of crap or are utterly mad and dont want cuda"
						read -s -n1 _AXE_TMP_CHAR
						axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
						if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
							build_list "$_AXE_LISTS_DIR/nvidia.list" --nofail --nosuc --tag
							case $?	in
								0) _AXE_NVIDIA_STAGE=3 
									save_settings ;;
								1)  axe_fuck " one or more nvidia components did not build install export or was not found altogether"
									axe_fuck " this could be a problem or just a minor glitch you can ignore"
									axe_fuck " these are the packages that failed build" 
									any_key
									nano "$_AXE_LISTS_DIR/fails_display.list"
									axe_menu_active Y "to exit, check your build logs, do some work and try again ${_AXE_ANY_OTHER_KEY} to ignore the situation and mark Nvidia as installed"
									read -s -n1 _AXE_TMP_CHAR
									axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
									if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
										_AXE_ESCAPE=12
									else
										_AXE_NVIDIA_STAGE=3 
										save_settings
									fi ;;
							esac
						
						fi
						
					else
						[[ $_AXE_NVIDIA_STAGE -eq 3 ]] && axe_info "nvidia and CUDA already installed skipping ......"
						[[ ! $_AXE_STAGE -eq 3 ]] && axe_warn "you need to be at stage 3 for this"
						[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]] && axe_warn "you need a optimised toolchain before i will allow this opperation .......... skipping"
					fi ;;				
					
		
		
	#desktop 	stage2		
					
				d|D) if [[ $_AXE_STAGE -eq 2 ]]; then
						if [[ $_AXE_DESKTOP_STAGE -eq 1 && $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]]; then
							echo -e "\n"
							axe_menu_active Y "if you want to build your full desktop ${_AXE_ANY_OTHER_KEY} to return to the main menu"
							read -s -n1 _AXE_TMP_CHAR
							axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
							if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
								axe_info "Fetching sources for your desktop and associated components build"	
								fetch_sources "$_AXE_PKGBUILD_DIR" "$_AXE_LISTS_DIR/desktop.list" --nosync
								if [[ $? -eq 0 ]]; then
									build_list "$_AXE_LISTS_DIR/desktop.list" "$_AXE_LISTS_DIR/desktop_st2_fail.list" "$_AXE_LISTS_DIR/desktop_st2_sucess.list" --notag
#									build_list "$_AXE_LISTS_DIR/desktop.list" --nosuc --nofail --tag
									case $?	in
										0) configure_desktop
										_AXE_DESKTOP_STAGE=2
										save_settings ;;
										1)  axe_fuck " one or more pkgbuilds in $_AXE_LISTS_DIR/desktop.list did not build install export or was not found"
											axe_fuck " this could be a problem or just a minor glitch you can ignore"
											axe_fuck " these are the packages that failed build"
											any_key
											nano "$_AXE_LISTS_DIR/fails_display.list"
											axe_menu_active Y "to exit, check your build logs, do some work and try again ${_AXE_ANY_OTHER_KEY} to ignore the situation and mark desktop as built"
											read -s -n1 _AXE_TMP_CHAR
											axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
											if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
												nano "$_AXE_LISTS_DIR/fails_display.list"
												_AXE_ESCAPE=14
											else
												configure_desktop
												_AXE_DESKTOP_STAGE=2
												save_settings
											fi ;;
									esac
								else	
									axe_fuck "the following sources failed in some way, rectify the situation then re-run, also available in $_AXE_LISTS_DIR/src_fetch_errors.list"
									any_key
									nano "$_AXE_LISTS_DIR/src_fetch_errors.list"
									#backup src_fetch_errors.list
									cat "$_AXE_LISTS_DIR/src_fetch_errors.list" > "$_AXE_LISTS_DIR/src_fetch_errors-$(date +%Y%m%d-%H%M%S)"
									rm -f "$_AXE_LISTS_DIR/src_fetch_errors.list"
									_AXE_ESCAPE=16
								fi
							fi		
									
						else
							[[ $_AXE_DESKTOP_STAGE -eq 2 ]] && axe_warn "desktop already built to stage 2"
							[[ $_AXE_DESKTOP_STAGE -eq 3 ]] && axe_warn "desktop already built to stage 3"
							[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]] && axe_warn "you need a optimised toolchain before i will allow this opperation .......... skipping"
						fi
					else
						axe_warn "you need to be at stage 2 for this opperation"
					fi ;;
					
					
	#desktop 	stage3	
					
				p|P) if [[ $_AXE_STAGE -eq 3 ]]; then
						if [[ $_AXE_DESKTOP_STAGE -eq 2 && $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]]; then
							echo -e "\n"
							axe_menu_active Y "if you want to build your full desktop ${_AXE_ANY_OTHER_KEY} to return to the main menu"
							read -s -n1 _AXE_TMP_CHAR
							axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
							if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
								build_list "$_AXE_LISTS_DIR/desktop.list" "$_AXE_LISTS_DIR/desktop_st3_fail.list" "$_AXE_LISTS_DIR/desktop_st3_sucess.list" --notag
#								build_list "$_AXE_LISTS_DIR/desktop.list" --nosuc --nofail --tag
								case $?	in
									0) configure_desktop
									_AXE_DESKTOP_STAGE=3
									save_settings ;;
									1)  axe_fuck " one or more pkgbuilds in $_AXE_LISTS_DIR/desktop.list did not build install export or was not found"
										axe_fuck " this could be a problem or just a minor glitch you can ignore"
										axe_fuck " these are the packages that failed build"
										any_key
										nano "$_AXE_LISTS_DIR/fails_display.list"
										axe_menu_active Y "to exit, check your build logs, do some work and try again ${_AXE_ANY_OTHER_KEY} to ignore the situation and mark desktop as built"
										read -s -n1 _AXE_TMP_CHAR
										axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
										if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
											nano "$_AXE_LISTS_DIR/fails_display.list"
											_AXE_ESCAPE=14
										else
											_AXE_DESKTOP_STAGE=3
											save_settings
										fi ;;
								esac
							fi
						else
							[[ $_AXE_DESKTOP_STAGE -eq 1 ]] && axe_warn "desktop not built to stsage 2 "
							[[ $_AXE_DESKTOP_STAGE -eq 3 ]] && axe_warn "desktop already built to stage 3"
							[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]] && axe_warn "you need a optimised toolchain before i will allow this opperation .......... skipping"
						fi
					else
						axe_warn "you need to be at stage 3 for this opperation"
					fi ;;
					
					
	#update pkgbuild dir		
				m|M) if [[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]]; then
						if [[ $_AXE_STAGE -gt 1 ]]; then
							echo -e "\n"
							axe_info "lets run through $_AXE_PKGBUILD_DIR clean out any out of date pkgbuilds, rebuilding as i go"
							any_key
							refresh_git "$_AXE_GIT_PKGBUILD_DIR" "$_AXE_GIT_MAINTAINED_PKGBUILD_DIR" "$_AXE_INPUT_PKGBUILD_DIR" 
							if [[ $? -eq 0 ]]; then
								version_check_pkgbuild_dir "$_AXE_INPUT_PKGBUILD_DIR" --noint
								
								case $?	in
									
								2) axe_warn "There were some process problems but nothing was out of date, will display a list so you can double check"
									any_key
									nano "$_AXE_LISTS_DIR/update_pkgbuild_dir_problems.list"
									axe_menu_active Y "if you want to quit now and investigate some pkgbuilds etc ${_AXE_ANY_OTHER_KEY} to continue"
									#backup update_pkgbuild_dir_problems.list
									cat "$_AXE_LISTS_DIR/update_pkgbuild_dir_problems.list" > "$_AXE_LISTS_DIR/update_problems-$(date +%Y%m%d-%H%M%S)"
									rm -f "$_AXE_LISTS_DIR/update_pkgbuild_dir_problems.list"
									read -s -n1 _AXE_TMP_CHAR
									axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
									[[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]] && _AXE_ESCAPE=18 ;;
								
								
								3) axe_fuck "there were some process problems and some packages are definatly are out of date, rectify the situation then re-run"
									any_key
									nano "$_AXE_LISTS_DIR/update_pkgbuild_dir_problems.list"
									#backup update_pkgbuild_dir_problems.list
									cat "$_AXE_LISTS_DIR/update_pkgbuild_dir_problems.list" > "$_AXE_LISTS_DIR/update_problems-$(date +%Y%m%d-%H%M%S)"
									rm -f "$_AXE_LISTS_DIR/update_pkgbuild_dir_problems.list"
									axe_menu_active Y "if you want to export the updateable pkgbuilds to USB stick ${_AXE_ANY_OTHER_KEY} if not,"
									read -s -n1 _AXE_TMP_CHAR
									axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
									[[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]] && export_pkgbuilds_to_usb "$_AXE_DEV_UPDATE_EXPORT_DIR" "$_AXE_USB_UPDATEABLE_PKGBUILD_DIR"
									_AXE_ESCAPE=19 ;;
								
								1) axe_fuck "the following PKGBUILDS are out of date, rectify the situation then re-run" 
									any_key
									nano "$_AXE_LISTS_DIR/update_pkgbuild_dir_problems.list"
									#backup update_pkgbuild_dir_problems.list
									cat "$_AXE_LISTS_DIR/update_pkgbuild_dir_problems.list" > "$_AXE_LISTS_DIR/update_problems-$(date +%Y%m%d-%H%M%S)"
									rm -f "$_AXE_LISTS_DIR/update_pkgbuild_dir_problems.list"
									axe_menu_active Y "if you want to export the updateable pkgbuilds to USB stick ${_AXE_ANY_OTHER_KEY} if not,"
									read -s -n1 _AXE_TMP_CHAR
									axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
									[[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]] && export_pkgbuilds_to_usb "$_AXE_DEV_UPDATE_EXPORT_DIR" "$_AXE_USB_UPDATEABLE_PKGBUILD_DIR"
									_AXE_ESCAPE=20 ;;
								
								
								0) update_pkgbuild_dir "$_AXE_PKGBUILD_DIR"
									if [[ ! $? -eq 0 ]]; then
										axe_fuck "the following PKGBUILDS have some issues, rectify the situation then re-run"
										#backup update_pkgbuild_dir_problems.list
										cat "$_AXE_LISTS_DIR/update_pkgbuild_dir_problems.list" > "$_AXE_LISTS_DIR/update_problems-$(date +%Y%m%d-%H%M%S)"
										rm -f "$_AXE_LISTS_DIR/update_pkgbuild_dir_problems.list"
										_AXE_ESCAPE=21
									fi ;;
								
								esac
								
							else
								axe_warn "git failed to refresh"
							fi
						else	
							axe_warn "you need to be at stage 2 or 3 for this opperation"
						fi 
					else
						axe_warn "you need a optimised toolchain before i will allow this opperation .......... skipping"
					fi ;;
					
	#x64 binaries				
					
				q|Q) axe_menu_active Y "if you want to build a minimal set of x64 binaries with systemd stripped out i will download the needed sources first ${_AXE_ANY_OTHER_KEY} if not,"
					read -s -n1 _AXE_TMP_CHAR
					axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
					if [[ "$_AXE_TMP_CHAR" == "y" && $_AXE_VERSIONS_CHECKED_YES -eq 1 ]]; then
						axe_info "Fetching sources for your x64 and associated components build"	
						fetch_sources "$_AXE_PKGBUILD_DIR" "$_AXE_LISTS_DIR/x64.list" --nosync
						if [[ $? -eq 0 ]]; then
							build_x64 "$_AXE_LISTS_DIR/x64.list"
							case $?	in
								0) _AXE_RESUME_YES=1
									save_settings
									# write restsrt command to /etc/profile
									echo "axe" >> "$_AXE_BASH_PROFILE_PATH"
									shutdown -r now
									exit 0 ;;
								1)  axe_fuck " one or x64 components did not build or export or was not found altogether"
									axe_fuck " this could be a problem or just a minor glitch you can ignore"
									axe_fuck " these are the packages that failed build"
									any_key
									nano "$_AXE_LISTS_DIR/fails_display.list"
									axe_menu_active Y "to quit , examin your build fail logs, do some work and try again ${_AXE_ANY_OTHER_KEY} to ignore the situation and mark udev as replaced"
									read -s -n1 _AXE_TMP_CHAR
									axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
									if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
										_AXE_ESCAPE=7
									else
										_AXE_ESCAPE=8
									fi ;;
							esac
							
						else	
							axe_fuck "the following sources failed in some way, rectify the situation then re-run, also available in $_AXE_LISTS_DIR/src_fetch_errors.list"
							any_key
							nano "$_AXE_LISTS_DIR/src_fetch_errors.list"
							#backup src_fetch_errors.list
							cat "$_AXE_LISTS_DIR/src_fetch_errors.list" > "$_AXE_LISTS_DIR/src_fetch_errors-$(date +%Y%m%d-%H%M%S)"
							rm -f "$_AXE_LISTS_DIR/src_fetch_errors.list"
							_AXE_ESCAPE=9
						fi	
					else
						[[ $_AXE_VERSIONS_CHECKED_YES -eq 0 ]] && axe_warn "you need to have checked your versions before i will allow this opperation .......... skipping"
					fi ;;
	
					
	

					
	
				x|X) axe_block "###################### USB-SUB-MENU ##########################"
					[[ $_AXE_PKGBUILD_GIT_FETCHED_YES -eq 1 ]] && axe_menu_active U "=PKGBUILD-USB======== to update your input $_AXE_INPUT_PKGBUILD_DIR from ${bldblu} USB ${txtrst}"
					[[ $_AXE_PKGBUILD_GIT_FETCHED_YES -eq 0 ]] && axe_menu_active U "=PKGBUILD-USB======== to load your input $_AXE_INPUT_PKGBUILD_DIR from ${bldblu}USB ${txtrst}"
					[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]] && axe_menu_active T "=TOOLCHAIN=========== to install a completed toolchain from ${bldblu}USB${txtrst}"
					[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]] && axe_menu_inactive T "=TOOLCHAIN=========== OPTION UNAVAILABLE TOOLCHAIN ALREADY AN OPTIMISED VERSION"
					axe_menu_active I "=INIT================ to load and install the AXE init from ${bldblu}USB ${txtrst}"
					read -s -n1 _AXE_TMP_CHAR
					axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
					case "$_AXE_TMP_CHAR" in

						#toolchain usb			
						t|T) echo -e "\n"
							axe_menu_active Y "if you want to load your optimised toolchain from USB ${_AXE_ANY_OTHER_KEY} if not,"
							read -s -n1 _AXE_TMP_CHAR
							axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
							if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
								load_optimised_toolchain_usb				
								if [[ $? -gt 0 ]]; then
									axe_fuck "toolchain did not load please check the output above for clues"
									any_key
								fi 
							fi ;;
							
			
						#axe init usb				
						i|I) echo -e "\n"
							axe_menu_active Y "if you want to build and load the runit-based axe-init from USB ${_AXE_ANY_OTHER_KEY} if not,"
							read -s -n1 _AXE_TMP_CHAR
							axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
							if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then	
								if [[ $_AXE_INIT_REPLACED_YES -eq 0 ]]; then
									axe_init_usb
									if [[ $? -eq 0 ]]; then
										axe_info "init loaded "
										_AXE_INIT_REPLACED_YES=1
										_AXE_RESUME_YES=1
										save_settings
										# write restsrt command to /etc/profile
										echo "axe" >> "$_AXE_BASH_PROFILE_PATH"
										shutdown -r now
										exit 0
									else
										axe_fuck "There was a problem with init replacement read the above output"
										any_key
									fi
								else
									axe_warn "you have already replaced your init.......... skipping"
								fi 
							fi ;;
							
			
			
						#pkgbuild usb			
						u|U) if [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 1 ]]; then
								axe_info "the input pkgbuild dir is already filled want to refresh it ? i will then force you to do another version check" 
								axe_menu_active Y "if you want to refresh $_AXE_INPUT_PKGBUILD_DIR from USB stick ${_AXE_ANY_OTHER_KEY} if not,"
							else
								axe_info "ok you have elected to fill $_AXE_INPUT_PKGBUILD_DIR from USB" 
								axe_menu_active Y "if you want to fill $_AXE_INPUT_PKGBUILD_DIR from USB stick ${_AXE_ANY_OTHER_KEY} if not,"
							fi
							read -s -n1 _AXE_TMP_CHAR
							axe_info "you pressed ${bldcyn}$_AXE_TMP_CHAR"
							if [[ "$_AXE_TMP_CHAR" == "y" || "$_AXE_TMP_CHAR" == "Y" ]]; then
								fill_pkgbuild_dir_from_usb "$_AXE_INPUT_PKGBUILD_DIR"
								if [[ $? -eq 0 ]]; then
									_AXE_VERSIONS_CHECKED_YES=0
									_AXE_PKGBUILD_DIR_FILLED_YES=1
									save_settings
								else
									axe_fuck "there was some problem with fetching the files ,check the output above"
									any_key
								fi
							fi ;;	

					esac ;;
					
				*) _AXE_ESCAPE=51 ;;
	
			esac
		done
	fi
		
	
	#end of main section**************************************************************************************************************************************
	
