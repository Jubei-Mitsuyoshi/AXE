#!/bin/bash
#Archlinux eXtream rEbuilder
#AXE-0.0.1


	#vars that work :)
	_AXE_DIR='/root/axebuilder'
	_AXE_MAKEPKG_CONF_PATH='/etc/makepkg.conf'
	_AXE_PACMAN_CONF_PATH='/etc/pacman.conf'
	_AXE_BASH_PROFILE_PATH='/etc/profile'
	_AXE_FSTAB_PATH='/etc/fstab'
	
	#calculate subdirs created by setup
	#build locations
	_AXE_CHROOT_BUILD_DIR="$_AXE_DIR/AxeBuildChroot"
	_AXE_HDD_BUILD_DIR="$_AXE_DIR/AxeBuildHdd"
	_AXE_RAM_BUILD_DIR="/tmp/axebuild"
	#general
	_AXE_PACMAN_CACHE_DIR="$_AXE_DIR/AxePacmanCache"
	_AXE_GIT_PKGBUILD_DIR="$_AXE_DIR/AxeGitPkgbuilds"
	_AXE_GIT_BIN_DIR="$_AXE_DIR/AxeGitBinaries"
	_AXE_GIT_BASE_INFORMATION_DIR="$_AXE_DIR/AxeBaseInformation"
	#log dirs
	_AXE_LOGS_DIR="$_AXE_DIR/AxeBuildLogsProgress"
	_AXE_FAIL_BUILD_LOGS_DIR="$_AXE_DIR/AxeBuildLogsFailed"
	#pkgbuild input dirs
	_AXE_PKGBUILD_DIR="$_AXE_DIR/AxePkgbuilds"
	_AXE_INPUT_PKGBUILD_DIR="$_AXE_DIR/AxePkgbuildsInput"
	_AXE_USER_OVERIDE_PKGBUILD_DIR="$_AXE_DIR/AxePkgbuildsUserOveride"
	#binary repo dirs
	_AXE_LOCAL_BINARY_REPO_DIR="$_AXE_DIR/AxeBinaryRepoLocal"
	_AXE_STAGE2_BINARY_REPO_DIR="$_AXE_DIR/AxeBinaryRepoStage2"
	_AXE_STAGE3_BINARY_REPO_DIR="$_AXE_DIR/AxeBinaryRepoStage3"
	#export dirs
	_AXE_BINARY_EXPORT_DIR="$_AXE_DIR/AxeExportsBinary"
	_AXE_SRC_EXPORT_DIR="$_AXE_DIR/AxeExportsAllSource"
	_AXE_DEV_UPDATE_EXPORT_DIR="$_AXE_DIR/AxePkgbuildsUpdatable"
	

	
	#fixed urls
	
	_AXE_PKGBUILD_GIT_URL='git://github.com/Jubei-Mitsuyoshi/AXE-PKGBUILDS.git'
	_AXE_REPO_INFO_URL='git://github.com/Jubei-Mitsuyoshi/AXE-REPO-INFORMATION.git'
	_AXE_ARCHLINUX_COMMUNITY_GIT_URL="git://projects.archlinux.org/svntogit/community.git"
	_AXE_ARCHLINUX_PACKAGES_GIT_URL="git://projects.archlinux.org/svntogit/packages.git"
	_AXE_PORTAGE_URL=""
	
	#git locations
	_AXE_GIT_MAINTAINED_PKGBUILD_DIR="$_AXE_GIT_PKGBUILD_DIR/AXE-MAINTAINED"

	# runit init settings
	_AXE_HARDWARECLOCK='localtime'
	_AXE_TIMEZONE='Europe/Copenhagen'
	_AXE_KEYMAP='dk'
	_AXE_CONSOLEFONT=""
	_AXE_CONSOLEMAP=""
	_AXE_DAEMON_ARRAY='syslog-ng acpid eth0 crond agetty-tty1'
	
	#usb stick locations
	_AXE_USB_STICK_DEVICE='/dev/sdd'
	_AXE_USB_STICK_MNT='/mnt/usbstick'
	_AXE_USB_MAINTAINED_PKGBUILD_DIR='AXE-MAINTAINED'
	_AXE_USB_I7_TOOLCHAIN_BIN_DIR='I7-TOOLCHAIN'
	_AXE_INIT_BIN_DIR='RUNIT-MUSL'
	_AXE_USB_UPDATEABLE_PKGBUILD_DIR='AxePkgbuilds_NeedingUpdating'

	
	
	#initialise vars (INTS)
	_AXE_CORES=0
	_AXE_GLIBC_REP=1
	_AXE_GCC_REP=1
	_AXE_BINUTILS_REP=1
	_AXE_LIBTOOL_REP=1
	_AXE_LIBLTDL_REP=0
	_AXE_LINUX_MENU_YES=0
	_AXE_VERBOSE_YES=0
	
	#initialise vars (CHARS)
	_AXE_TMP_CHAR=""
	_AXE_LINUX_O2_O3='--o2'
	
	
	
	#defaults ( should all be listed in save_settings )
	#resumes
	_AXE_RESUME_YES=0
	
	# choices
	_AXE_OPT_TYPE="--o2"
	_AXE_SKIP_INTRO_YES=0
	_AXE_GLOBAL_CHECK="--nocheck"
	
	#program stage counters
	_AXE_STAGE=1
	_AXE_TOOLCHAIN_OPTIMUM_YES=0
	_AXE_FIRST_RUN_COMPLETE_YES=0
	
	#exports
	_AXE_CUPS=0
	_AXE_BLUETOOTH=1
	_AXE_COLORD=0
	_AXE_NETWORKMANAGER=1
	_AXE_PROCESOR_REL="i7"

	
	#menu variables
	_AXE_SOURCES_FETCHED_YES=0
	_AXE_VERSIONS_CHECKED_YES=0
	_AXE_INIT_REPLACED_YES=0
	_AXE_UDEV_INSTALLED_YES=0
	_AXE_STAGE3_SETUP_COMPLETE_YES=0
	_AXE_STAGE2_FINALISE_COMPLETE_YES=0
	_AXE_STAGE3_FINALISE_COMPLETE_YES=0
	_AXE_PKGBUILD_DIR_FILLED_YES=0
	_AXE_PKGBUILD_GIT_FETCHED_YES=0
	_AXE_BINARY_GIT_FETCHED_YES=0
	_AXE_BASE_GIT_FETCHED_YES=0
	_AXE_BINARY_DIR_FILLED_YES=0
	_AXE_STAGE2_BINARIES_BUILT_YES=0
	_AXE_NVIDIA_YES=0
	_AXE_ARCHLINUX_GITS_FETCHED_YES=0
	_AXE_MAKEPKG_CONF_SETUP_YES=0
	_AXE_CPU_IDENTIFIED_YES=0
	_AXE_SKIP_BOOTSTRAP_MENU_YES=0
	_AXE_BOOTSTRAP_YES=0
	
	
	#tags
	_AXE_PACKAGER_NAME_STAGE1_BINARIES="undecided"
	_AXE_PACKAGER_NAME_STAGE2_BINARIES="undecided"
	_AXE_PACKAGER_NAME_STAGE3_BINARIES="undecided"
	_AXE_PACKAGER_NAME_TOOLCHAIN="undecided"
	_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB="undecided"
	_AXE_MULTILIB_SUFFIX="undecided"
	_AXE_BIN_GIT_URL='git://github.com/Jubei-Mitsuyoshi/AXE-REPO-Intel-Core-i3-2000--Core-i5-2000--Core-i7-2000--Sandy-Bridge-D2J1Q0--32nm.git'
	_AXE_REMOTE_GIT_REPO_ENTRY='Server = https://github.com/Jubei-Mitsuyoshi/AXE-REPO-Intel-Core-i3-2000--Core-i5-2000--Core-i7-2000--Sandy-Bridge-D2J1Q0--32nm.git/raw/master/'
	_AXE_PREFIX_REL='999'
	_AXE_SUFFIX_REL='axis'
	
	txtred='\e[0;31m' # red
	txtgrn='\e[0;32m' # green
	txtylw='\e[0;33m' # yellow
	txtblu='\e[0;34m' # blue
	txtpur='\e[0;35m' # purple
	txtcyn='\e[0;36m' # cyan
	txtwht='\e[0;37m' # white
	bldred='\e[1;31m' # red - Bold
	bldgrn='\e[1;32m' # green
	bldylw='\e[1;33m' # yellow
	bldblu='\e[1;34m' # blue
	bldpur='\e[1;35m' # purple
	bldcyn='\e[1;36m' # cyan
	bldwht='\e[1;37m' # white
	txtund=$(tput sgr 0 1) # Underline
	txtbld=$(tput bold) # Bold
	txtrst='\e[0m' # Text reset


	# Feedback indicators
	_AXE_ANY_KEY="${bldblu} ANY KEY ${bldwht}"
	_AXE_ANY_OTHER_KEY="${bldblu} ANY OTHER KEY ${bldwht}"
	_AXE_CTRLC="${bldcyn} CTRL-C ${bldwht}"
	_AXE_AER="${bldcyn}A${bldwht}rch e${bldcyn}X${bldwht}tream r${bldcyn}E${bldwht}builder"


	_AXE_M="${bldblu} m ${bldwht}"
	_AXE_N="${bldblu} n ${bldwht}"
	_AXE_V="${bldblu} v ${bldwht}"
	_AXE_Y="${bldblu} y ${bldwht}"



# list functions these lists are here to allow easy edditing ***************************************************************************************************
#***************************************************************************************************************************************************************

function create_helper_axe_get_deps()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of create_helper_axe_get_deps"
	
	
echo '#!/bin/bash
unset pkgname depends makedepends optdepends
. "$1/PKGBUILD"
for dep in "${depends[@]}"; do
	# lose the version comparator, if any
	depname=${dep%%[<>=]*} && echo "$depname"
done
for dep in "${makedepends[@]}"; do
	# lose the version comparator, if any
	depname=${dep%%[<>=]*} && echo "$depname"
done
if [[ $2 == "--opt" ]]; then
	for dep in "${optdepends[@]/:*}"; do
		# lose the version comaparator, if any
		depname=${dep%%[<>=]*} && echo "$depname"
	done
fi
exit 0' > "$_AXE_DIR/axe_get_deps"

	chmod u+x "$_AXE_DIR/axe_get_deps"

	mv "$_AXE_DIR/axe_get_deps" "/usr/bin/axe_get_deps"


	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of create_helper_axe_get_deps"
}


function create_helper_axe_get_vers()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of create_helper_axe_get_vers"
	
	
echo '#!/bin/bash
unset pkgname pkgver _arch_rel _axe_rel pkgrel pkgbase _axe_native_rel
. "$1/PKGBUILD"

if [[ $pkgbase ]];then
	echo "$pkgbase"
else
	if [[ $pkgname ]];then
		echo "$pkgname"
	else
		echo "null"
	fi
fi

if [[ $pkgver ]];then
	echo "$pkgver"
else
	echo "null"
fi

if [[ $pkgrel ]];then
	echo "$pkgrel"
else
	echo "null"
fi

if [[ $_arch_rel ]];then
	echo "$_arch_rel"
else
	echo "null"
fi

if [[ $_axe_rel ]];then
	echo "$_axe_rel"
else
	if [[ $_axe_native_rel ]];then
		echo "$_axe_native_rel"
	else
		echo "null"
	fi
fi

if [[ $_axe_native_rel ]];then
	echo "axis"
else
	echo "archlinux"
fi

if [[ $pkgbase ]];then
	echo "split"
else
	echo "single"
fi

exit 0
' > "$_AXE_DIR/axe_get_vers"

	chmod u+x "$_AXE_DIR/axe_get_vers"

	mv "$_AXE_DIR/axe_get_vers" "/usr/bin/axe_get_vers"


	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of create_helper_axe_get_vers"
}

function create_toolchain_list()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of create_toolchain_list"
echo "linux-api-headers
glibc
binutils$_AXE_MULTILIB_SUFFIX
gcc$_AXE_MULTILIB_SUFFIX
libtool$_AXE_MULTILIB_SUFFIX
zlib
file
gmp
mpfr
libmpc
attr
acl
isl
cloog
ppl
linux" > "$_AXE_DIR/toolchain.list"

	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of create_toolchain_list"
}

function create_axe_list()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of create_axe_list"
#list good as of 1/10/2012
echo "#base system packages, order from LFS mainly
filesystem
sed
bzip2
ncurses
dialog
shadow
libcap
coreutils
bash
m4
bison
procps-ng
grep
readline
gdbm
inetutils
db
perl
autoconf
automake
procinfo-ng
diffutils
gawk
findutils
flex
gettext
groff
xz
less
gzip
iproute2
kbd
kmod
make
libpipeline
man-db
patch
tar
texinfo
dash
fakeroot
elfutils
# the rest of the base packages including udev deps
eventlog
expat
perl-xml-parser
intltool
libgssglue
libtirpc
cracklib
hdparm
idnkit
ifenslave
iptables
libcap-ng
keyutils
libedit
libnl
libusbx
libusb-compat
lzo2
net-tools
run-parts
popt
sysfsutils
traceroute
p11-kit
nettle
libtasn1
gnutls
usbutils
libpcap
freetype2
fontconfig
nano
bridge-utils
wireless_tools
which
psmisc
pambase
pam
util-linux
e2fsprogs
mlocate
isdn4k-utils
ifenslave
pth
pcre
libffi
openssl
glib2
pkg-config
pinentry
isdn4k-utils
libarchive
iputils
libsasl
openldap
libssh2
curl
openslp
dnsutils
mtdev
acpid
xf86-input-evdev
mkinitcpio-nfs-utils
mkinitcpio-busybox
mkinitcpio
udev-axe
syslog-ng
dbus
lvm2
dmraid
libwacom
iw
libatasmart
lockdev
libgpg-error
libassuan
libgcrypt
libxslt
libksba
sdparm
libgusb
crda
cronie
dnsmasq
dhcpcd
dhcp
gpm
krb5
heirloom-mailx
mdadm
netcfg
librpcsecgss
dirmngr
nfsidmap
rpcbind
openssh
openvpn
pciutils
pcmciautils
gnupg
gpgme
ppp
rfkill
cryptsetup
logrotate
wpa_supplicant
sudo
nfs-utils
sysvinit
wpa_actiond
ca-certificates
# the extended components leading to a desktop eventually
menu-cache
sqlite
python2
python
pygobject2
p11-kit
nettle
libtasn1
gnutls
libxml2
libpng
netpbm
libice
libsm
libxt
libxdmcp
libxau
libxcb
xcb-util
startup-notification
pmount
libx11
libxv
libxext
libdmx
libxi
libxt
libxss
libxmu
libxrender
libxfixes
libxcursor
libfs
libxft
libxrandr
libxinerama
libxcomposite
libxpm
libxtst
libfontenc
libxfont
links
orc
libogg
libvorbis
cdparanoia
shared-mime-info
jade
docbook-xml
rarian
gnome-doc-utils
gtk-doc
pixman
flac
libsndfile
libsamplerate
libxxf86vm
cairo
libdatrie
libthai
pango
gstreamer0.10
gstreamer0.10-base
gstreamer0.10-good
bluez
python2-pybluez
libpciaccess
libdrm
mesa
freeglut
xf86-video-intel
libjpeg-turbo
libtiff
lcms2
alsa-lib
alsa-utils
alsa-firmware
alsa-plugins
python2-pyalsa
python-pyalsaaudio
jasper
lcms
pyudev
rsync
vala
libfm
spacefm
libplist
usbmuxd
libxvmc
xinetd
xorg-server
xf86-video-nouveau
xf86-video-intel
xorg-xrandr
xorg-xbacklight
xorg-xauth
xorg-utils
xorg-server-utils
numactl
icu
libfbclient
irqbalance
dkms
distcc
bftpd
connman
atop
arptables
audit
libdaemon
libexif
libgdiplus
mono
bc
nss-mdns
libglade
python2-cairo
lapack
python-nose
python-numpy
pygtk
dbus-glib
dbus-python
libmng
mysql
postgresql
unixodbc
atk
gdk-pixbuf2
libnotify
python-notify
avahi
cups
apcupsd
system-config-printer
pycups
talloc
cifs-utils
samba
pysmbc
sane
colord
gtk
gtk2
gtk3
gtk3-axe
libcroco
librsvg
emacs
apr-util
apache
git
subversion
texlive-bin
qt3
ghostscript
doxygen
man-db
groff
libasyncns
fftw
pulseaudio
parted
sg3_utils
lsof
gptfdisk
fuse
laptop-mode-tools
networkmanager
modemmanager
libvirt
eeze
pup-volume-monitor" > "$_AXE_DIR/axe.list"

	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of create_axe_list"

}

function create_nvidia_list()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of create_nvidia_list"
	
echo "nvclock --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --nofail --nosuc --tag --nocheck
nvdock --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --nofail --nosuc --tag --nocheck
libvdpau --install --con $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --nofail --nosuc --tag --nocheck
libcl --install --con $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --nofail --nosuc --tag --nocheck
nvidia --install --con $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --nofail --nosuc --tag --nocheck
nvidia-utils --install --con $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --nofail --nosuc --tag --nocheck
cuda --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --nofail --nosuc --tag --nocheck
nvidia-cg-toolkit --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --nofail --nosuc --tag --nocheck
python2-pycuda --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --nofail --nosuc --tag --nocheck" > "$_AXE_DIR/nvidia.list"

	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of create_nvidia_list"
}

function create_desktop_list()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of create_desktop_list"
	
echo "connman-gnome-git
consolekit
polkit-axe
xfce4-session
gnome-keyring
gparted
udisks
sdl
qingy
wicd
upower
packagekit
accountsservice
pup-volume-monitor
gvfs
gnome-control-center
gnome-session
gnome-settings-daemon
gnome-settings-daemon-ubuntu
gnome-menus2
muffin-wm
muffin-git
cinnamon
cinnamon-git
alacarte
nemo-fm
nemo-git
compiz-axe
linux-zen" > "$_AXE_DIR/desktop.list"

	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of create_desktop_list"
}

function create_replace_systemd_list()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of create_replace_systemd_list"

echo "syslog-ng --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag --nocheck
mkinitcpio --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag --nocheck
dbus --install --con $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag --nocheck
udev-axe --install --con $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag $_AXE_GLOBAL_CHECK
pcmciautils --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag $_AXE_GLOBAL_CHECK
crda --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag $_AXE_GLOBAL_CHECK
libgusb --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag $_AXE_GLOBAL_CHECK
pyudev --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag $_AXE_GLOBAL_CHECK
libatasmart --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag $_AXE_GLOBAL_CHECK
lockdev --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag $_AXE_GLOBAL_CHECK
#known arch fail, willnot be back in list till i fix it
#libcec --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag $_AXE_GLOBAL_CHECK
syslog-ng --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag $_AXE_GLOBAL_CHECK
mkinitcpio-busybox --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag $_AXE_GLOBAL_CHECK
mkinitcpio --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag $_AXE_GLOBAL_CHECK
dbus --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag $_AXE_GLOBAL_CHECK
lvm2 --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag $_AXE_GLOBAL_CHECK
dmraid --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag $_AXE_GLOBAL_CHECK
mtdev --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag $_AXE_GLOBAL_CHECK
xf86-input-evdev --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag $_AXE_GLOBAL_CHECK
xorg-server --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag $_AXE_GLOBAL_CHECK
xf86-video-nouveau --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag $_AXE_GLOBAL_CHECK
xf86-video-intel --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag $_AXE_GLOBAL_CHECK
xf86-video-modesetting --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag $_AXE_GLOBAL_CHECK
polkit-axe --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag --nocheck
cronie --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag $_AXE_GLOBAL_CHECK
libwacom --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag --nocheck
colord --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag --nocheck
cups --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag --nocheck
system-config-printer --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag --nocheck
gstreamer0.10-good --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag --nocheck
bluez --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag --nocheck
mesa --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag --nocheck
mysql --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag --nocheck
udisks --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag --nocheck
udisks2 --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag --nocheck
pulseaudio --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag --nocheck
upower --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag --nocheck
gvfs --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag --nocheck
libvirt --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag --nocheck
eeze --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag --nocheck
networkmanager --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag $_AXE_GLOBAL_CHECK
modemmanager --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag $_AXE_GLOBAL_CHECK
packagekit --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag --nocheck
pup-volume-monitor --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag --nocheck
thunar --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag $_AXE_GLOBAL_CHECK
udevil --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag $_AXE_GLOBAL_CHECK
spacefm --install --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE --fail --nosuc --notag $_AXE_GLOBAL_CHECK" > "$_AXE_DIR/replace_systemd.list"



	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of create_replace_systemd_list"
}

# dialog functions *********************************************************************************************************************************************
#***************************************************************************************************************************************************************

function any_key()
{
		echo -e " ${bldgrn}AXE-->${bldwht} press ${_AXE_ANY_KEY} to continue  ${txtrst}"
		read -n1 -s
}

function axe_info()
{

	#argument 1 text to display
		# xxx .. text to display...
		
		echo -e " ${bldgrn}AXE-->${bldwht} $1 ${txtrst}"
}

function axe_block()
{

	#argument 1 text to display
		# xxx .. text to display...
		
		echo -e "${bldblu}BLOCK-->${txtgrn} $1 ${txtrst}"
}

function axe_warn()
{

	#argument 1 text to display
		# xxx .. text to display...
		
		echo -e "  ${bldylw}AXE---WARNING-->${bldwht} $1 ${txtrst}"
}

function axe_fuck()
{

	#argument 1 text to display
		# xxx .. text to display...
		
		echo -e "${bldred}AXE!!--> $1 ${txtrst}"
}

function axe_debug()
{

	#argument 1 text to display
		# xxx .. text to display...
		
		echo -e "${bldpur}DEBUG-->${bldwht} $1 ${txtrst}"
}

function axe_menu_red()
{
		
	#argument 1 menu key
		# x .. key to display
	#argument 2 text to display
		# xxx .. text to display...
		
		echo -e "${bldwht}KEY ${bldblu} $1 ${bldred} $2 ${txtrst}"	
}


function axe_menu_inactive()
{
	#argument 1 menu key
		# x .. key to display
	#argument 2 text to display
		# xxx .. text to display...
		
		echo -e "${bldwht}KEY======  ${bldblu} $1 ${txtcyn} $2 ${txtrst}"
}


function axe_menu_active()
{
	#argument 1 menu key
		# x .. key to display
	#argument 2 text to display
		# xxx .. text to display...
		
		echo -e "${bldwht}KEY======  ${bldblu} $1 ${txtgrn} $2 ${txtrst}"
}


# functions that do not call any other internal functions except dialogs ***************************************************************************************
#***************************************************************************************************************************************************************

function save_settings()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of save_settings"

	#save new settings
	echo "_AXE_OPT_TYPE=\"$_AXE_OPT_TYPE\"
_AXE_PROCESOR_REL=\"$_AXE_PROCESOR_REL\"
_AXE_PACKAGER_NAME_STAGE1_BINARIES=\"$_AXE_PACKAGER_NAME_STAGE1_BINARIES\"
_AXE_PACKAGER_NAME_STAGE2_BINARIES=\"$_AXE_PACKAGER_NAME_STAGE2_BINARIES\"
_AXE_PACKAGER_NAME_STAGE3_BINARIES=\"$_AXE_PACKAGER_NAME_STAGE3_BINARIES\"
_AXE_PACKAGER_NAME_TOOLCHAIN=\"$_AXE_PACKAGER_NAME_TOOLCHAIN\"
_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB=\"$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB\"
_AXE_MULTILIB_SUFFIX=\"$_AXE_MULTILIB_SUFFIX\"
_AXE_GLOBAL_CHECK=\"$_AXE_GLOBAL_CHECK\"
_AXE_BIN_GIT_URL=\"$_AXE_BIN_GIT_URL\"
_AXE_REMOTE_GIT_REPO_ENTRY=\"$_AXE_REMOTE_GIT_REPO_ENTRY\"
_AXE_PREFIX_REL=\"$_AXE_PREFIX_REL\"
_AXE_SUFFIX_REL=\"$_AXE_SUFFIX_REL\"
_AXE_STAGE=$_AXE_STAGE
_AXE_RESUME_YES=$_AXE_RESUME_YES
_AXE_TOOLCHAIN_OPTIMUM_YES=$_AXE_TOOLCHAIN_OPTIMUM_YES
_AXE_FIRST_RUN_COMPLETE_YES=$_AXE_FIRST_RUN_COMPLETE_YES
_AXE_SKIP_INTRO_YES=$_AXE_SKIP_INTRO_YES
_AXE_MAKEPKG_CONF_SETUP_YES=$_AXE_MAKEPKG_CONF_SETUP_YES
_AXE_PKGBUILD_GIT_FETCHED_YES=$_AXE_PKGBUILD_GIT_FETCHED_YES
_AXE_BINARY_GIT_FETCHED_YES=$_AXE_BINARY_GIT_FETCHED_YES
_AXE_BASE_GIT_FETCHED_YES=$_AXE_BASE_GIT_FETCHED_YES
_AXE_ARCHLINUX_GITS_FETCHED_YES=$_AXE_ARCHLINUX_GITS_FETCHED_YES
_AXE_PKGBUILD_DIR_FILLED_YES=$_AXE_PKGBUILD_DIR_FILLED_YES
_AXE_BINARY_DIR_FILLED_YES=$_AXE_BINARY_DIR_FILLED_YES
_AXE_UDEV_INSTALLED_YES=$_AXE_UDEV_INSTALLED_YES
_AXE_SOURCES_FETCHED_YES=$_AXE_SOURCES_FETCHED_YES
_AXE_VERSIONS_CHECKED_YES=$_AXE_VERSIONS_CHECKED_YES
_AXE_INIT_REPLACED_YES=$_AXE_INIT_REPLACED_YES
_AXE_NVIDIA_YES=$_AXE_NVIDIA_YES
_AXE_STAGE3_SETUP_COMPLETE_YES=$_AXE_STAGE3_SETUP_COMPLETE_YES
_AXE_STAGE2_FINALISE_COMPLETE_YES=$_AXE_STAGE2_FINALISE_COMPLETE_YES
_AXE_STAGE2_BINARIES_BUILT_YES=$_AXE_STAGE2_BINARIES_BUILT_YES
_AXE_CPU_IDENTIFIED_YES=$_AXE_CPU_IDENTIFIED_YES
_AXE_STAGE3_FINALISE_COMPLETE_YES=$_AXE_STAGE3_FINALISE_COMPLETE_YES
_AXE_CUPS=$_AXE_CUPS
_AXE_BLUETOOTH=$_AXE_BLUETOOTH
_AXE_COLORD=$_AXE_COLORD
_AXE_NETWORKMANAGER=$_AXE_NETWORKMANAGER
_AXE_SKIP_BOOTSTRAP_MENU_YES=$_AXE_SKIP_BOOTSTRAP_MENU_YES
_AXE_BOOTSTRAP_YES=$_AXE_BOOTSTRAP_YES" > "$_AXE_DIR/settings"
	

	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of save_settings"	
}


function copy_pkgbuild_single()
{
	#first argument is pkgbuild name
		#xxxxxx ...pkgbuild name
	#second argument is destination path
		#xxxxxx ... path/to/dir (either hdd build dir or ram build dir usually)
	#third argument is the single input path, defaults to $_AXE_PKGBUILD_DIR
		#xxxxxx ... path/to/dir
		
	local VAR="_axe_local_return_cps"
	_axe_local_return_cps=0
	
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of copy_pkgbuild_single"

	local VAR="_axe_source"
	_axe_source="$_AXE_PKGBUILD_DIR"
	[[ $3 ]] && _axe_source="$3"
	
	if [[ ! -d "$2/$1" ]]; then

		find "$_axe_source" -type d -name "$1" -exec cp -rp {} "$2" \; 2> /dev/null
		if [[ ! -d "$2/$1" ]]; then
			axe_fuck "ok something is seariously wrong cannot locate the $1 pkg build directory in my lookup locations check the code!!!"
			any_key
			_axe_local_return_cps=1
		else
			axe_info "found $1 PKGBUILD in $_axe_source fetching and using it as source PKGBUILD"
		fi

	else
		axe_info "found $2/$1 not fetching"
	fi
	

	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of copy_pkgbuild_single"
	return $_axe_local_return_cps
}

function check_pkg_tag()
{
	 [[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of check_pkg_tag"
	 
	 local VAR="_axe_local_return_cpt"
	 local VAR="_axe_display_cpt"
	 _axe_local_return_cpt=0
	
	#first argument is pkg name
		#xxxx pkgbuild name
	#second argument is check for build fail lisings
		#--fail .. check the build fail list
		#--nofail ..do not check the build fail list
	#third argument is check for build sucess lisings
		#--suc .. check the build sucess list
		#--nosuc ..do not check the build sucess list
	#fourth argument is check for packager tag
		#--tag .. check the packager variable
		#--tag-all .. check the packager variable ignoring stage mask
		#--notag .. do not check the packager variable

	
	if [[ -s "$_AXE_DIR/build_fail.list" && "$2" == "--fail" ]]; then
		if [[ $(sed '/^\#/d' $_AXE_DIR/build_fail.list | grep -v "^$" | sed 's/ .*//' | grep -Fx "$1") ]]; then
			axe_info "PKGBUILD $1  is on the build fail list"
			_axe_local_return_cpt=2
		fi
	fi
	
	# built in build_sucsess.list check
	if [[ -s "$_AXE_DIR/build_sucsess.list" && "$3" == "--suc"  ]]; then
	#   delete comments | delete emty lines | delete everything after first space | print only package name> to file
		if [[ $(sed '/^\#/d' $_AXE_DIR/build_sucsess.list | grep -v "^$" | sed 's/ .*//' | grep -Fx "$1") ]]; then
			axe_info "PKGBUILD $1  is on the build sucess list"
			_axe_local_return_cpt=3
		fi
	fi

	
	#check if passed argument has taken the PACKEGER variable, if not report back with return value 1
	
	if [[ "$4" == "--tag" ||  "$4" == "--tag-all" ]]; then
		if [[ "$4" == "--tag-all" ]]; then
			if [[ "$1" == "zlib" || "$1" == "file" || "$1" == "gmp" || "$1" == "mpfr" || "$1" == "libmpc" || "$1" == "attr" || "$1" == "acl" || "$1" == "isl" || "$1" == "cloog" || "$1" == "ppl" ]]; then
				if [[ "$_AXE_MULTILIB_SUFFIX" == "-multilib" ]]; then
					expac "%n %p" | grep "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx "$1" > "$_AXE_DIR/scratch"
					[[ -s "$_AXE_DIR/scratch" ]] && axe_info "PKGBUILD $1  HAS the axe PACKAGER variable marked as" && cat "$_AXE_DIR/scratch" && _axe_local_return_cpt=15
				else
					expac "%n %p" | grep "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx "$1" > "$_AXE_DIR/scratch"
					[[ -s "$_AXE_DIR/scratch" ]] && axe_info "PKGBUILD $1  HAS the axe PACKAGER variable marked as" && cat "$_AXE_DIR/scratch" && _axe_local_return_cpt=14
				fi
			else
				expac "%n %p" | grep "$_AXE_PACKAGER_NAME_STAGE1_BINARIES" | sed 's/ .*//' | grep -Fx "$1" > "$_AXE_DIR/scratch"
				[[ -s "$_AXE_DIR/scratch" ]] && axe_info "PKGBUILD $1  HAS the axe PACKAGER variable marked as" && cat "$_AXE_DIR/scratch" && _axe_local_return_cpt=13
				
				expac "%n %p" | grep "$_AXE_PACKAGER_NAME_STAGE2_BINARIES" | sed 's/ .*//' | grep -Fx "$1" > "$_AXE_DIR/scratch"
				[[ -s "$_AXE_DIR/scratch" ]] && axe_info "PKGBUILD $1  HAS the axe PACKAGER variable marked as" && cat "$_AXE_DIR/scratch" && _axe_local_return_cpt=12
				
				expac "%n %p" | grep "$_AXE_PACKAGER_NAME_STAGE3_BINARIES" | sed 's/ .*//' | grep -Fx "$1" > "$_AXE_DIR/scratch"
				[[ -s "$_AXE_DIR/scratch" ]] && axe_info "PKGBUILD $1  HAS the axe PACKAGER variable marked as" && cat "$_AXE_DIR/scratch" && _axe_local_return_cpt=11
				
				expac "%n %p" | grep "$_AXE_SUFFIX_REL" | sed 's/ .*//' | grep -Fx "$1" > "$_AXE_DIR/scratch"
				[[ -s "$_AXE_DIR/scratch" ]] && axe_info "PKGBUILD $1  HAS the axe PACKAGER variable marked as" && cat "$_AXE_DIR/scratch" && _axe_local_return_cpt=10
			fi	
			
		else
			if [[ "$1" == "zlib" || "$1" == "file" || "$1" == "gmp" || "$1" == "mpfr" || "$1" == "libmpc" || "$1" == "attr" || "$1" == "acl" || "$1" == "isl" || "$1" == "cloog" || "$1" == "ppl" ]]; then
				if [[ "$_AXE_MULTILIB_SUFFIX" == "-multilib" ]]; then
				
					expac "%n %p" | grep "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx "$1" > "$_AXE_DIR/scratch"
					[[ -s "$_AXE_DIR/scratch" ]] && axe_info "PKGBUILD $1  HAS the axe PACKAGER variable marked as" && cat "$_AXE_DIR/scratch" && _axe_local_return_cpt=9
				else
					expac "%n %p" | grep "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx "$1" > "$_AXE_DIR/scratch"
					[[ -s "$_AXE_DIR/scratch" ]] && axe_info "PKGBUILD $1  HAS the axe PACKAGER variable marked as" && cat "$_AXE_DIR/scratch" && _axe_local_return_cpt=8
				fi
			else
			
				if [[ $_AXE_STAGE -eq 1 ]]; then
					expac "%n %p" | grep "$_AXE_PACKAGER_NAME_STAGE1_BINARIES" | sed 's/ .*//' | grep -Fx "$1" > "$_AXE_DIR/scratch"
					[[ -s "$_AXE_DIR/scratch" ]] && axe_info "PKGBUILD $1  HAS the axe PACKAGER variable marked as" && cat "$_AXE_DIR/scratch" && _axe_local_return_cpt=7
				fi
				
				if [[ $_AXE_STAGE -eq 2 ]]; then
					expac "%n %p" | grep "$_AXE_PACKAGER_NAME_STAGE2_BINARIES" | sed 's/ .*//' | grep -Fx "$1" > "$_AXE_DIR/scratch"
					[[ -s "$_AXE_DIR/scratch" ]] && axe_info "PKGBUILD $1  HAS the axe PACKAGER variable marked as" && cat "$_AXE_DIR/scratch" && _axe_local_return_cpt=6
				fi
				
				if [[ $_AXE_STAGE -eq 3 ]]; then
					expac "%n %p" | grep "$_AXE_PACKAGER_NAME_STAGE3_BINARIES" | sed 's/ .*//' | grep -Fx "$1" > "$_AXE_DIR/scratch"
					[[ -s "$_AXE_DIR/scratch" ]] && axe_info "PKGBUILD $1  HAS the axe PACKAGER variable marked as" && cat "$_AXE_DIR/scratch" && _axe_local_return_cpt=5
				fi
				
				if [[ $_axe_local_return_cpt -lt 4 ]]; then
					expac "%n %p" | grep "$_AXE_SUFFIX_REL" | sed 's/ .*//' | grep -Fx "$1" > "$_AXE_DIR/scratch"
					[[ -s "$_AXE_DIR/scratch" ]] && axe_info "PKGBUILD $1  DOES NOT HAve the axe PACKAGER variable marked but does have the axe suffix of " && cat "$_AXE_DIR/scratch" && _axe_local_return_cpt=4
				fi
			fi
			
		fi
	fi
	

	rm -f "$_AXE_DIR/scratch"
	
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End check_pkg_tag"
	return $_axe_local_return_cpt
	
}

function stamp_pkgbuild()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of stamp_pkgbuild"
	
	
	
	
	
	#first argument is path to PKGBUILD
		#xxx/path/to/PKGBUILD
	#second argument is skip rc.conf modifications
		#--norc .. skip  rc modifications
		#--rc (or blank/not pressent) .. do  rc modifications 
		
		
	local VAR="_axe_local_return_sp"
	local VAR="_axe_version_array_abs_sp"
	local VAR="_axe_pkg_rel"
	local VAR="_axe_tag_rel"
	local VAR="_axe_pb_filename"
	_axe_pb_filename=""
	_axe_pkg_rel=""
	_axe_tag_rel=""
	_axe_local_return_sp=0
	
		#	_axe_abs_ver= ${_axe_version_array_abs[1]}
		#	_axe_abs_rel= ${_axe_version_array_abs[2]}
		#	_axe_dir_ver= "${_axe_version_array_dir[1]}"
		#	_axe_dir_rel= $_arch_rel = "${_axe_version_array_dir[3]}"
		#	_axe_dir_axe_rel= "${_axe_version_array_dir[4]}"
		#	axe native flag = "${_axe_version_array_dir[5]}"
		#	split package flag = "${_axe_version_array_dir[6]}"
		#	_axe_aur_ver  "${_axe_version_array_aur[1]}"
		#   _axe_aur_rel   "${_axe_version_array_aur[2]}"
			
			#output order of axe_get_vers 
				#$pkgname(0) 
				#$pkgver(1)  
				#$pkgrel(2) 
				#$_arch_rel(3)
				#$_axe_rel(4) / axe_native_rel (4)
				#axe native flag = "axis" / "arch" (5)
				#split package flag = "split" / "single" (6)
	
	_axe_version_array_abs_sp=($(axe_get_vers "$1"))
	
	if [[ "${_axe_version_array_abs_sp[2]}" == "null" ]]; then
		axe_info "pkgrel does not exist this could be because ther genuinly is not one or a parsing mistake, i will display $1/PKGBUILD so you can investigate" && any_key && nano "$1/PKGBUILD"
		axe_info "${_AXE_Y} if you want me to add the axe pkg rel ${_AXE_ANY_OTHER_KEY} to do it yourself"
		read -s -n1 _AXE_TMP_CHAR
		axe_info "you pressed $_AXE_TMP_CHAR"
		if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
			#entry from the PKGBUILDS
				#pkgrel="${_AXE_PREFIX_REL}.${_AXE_STAGE}.${_arch_rel}.${_axe_rel}.${_AXE_PROCESOR_REL}.${_AXE_SUFFIX_REL}"
			_axe_tag_rel='pkgrel="${_AXE_PREFIX_REL}.${_AXE_STAGE}.${_arch_rel}.${_axe_rel}.${_AXE_PROCESOR_REL}.${_AXE_SUFFIX_REL}"'
			if [[ "${_axe_version_array_abs_sp[6]}" == "split" ]]; then
				axe_info "modifying a CATAGORY --- SPLIT package"
				sed -i "/pkgbase=.*/i#--------------------" "$1/PKGBUILD"
				if [[ $? -eq 0 ]]; then
					sed -i "/pkgbase=.*/a#--------------------" "$1/PKGBUILD"
					if [[ $? -eq 0 ]]; then
						sed -i "/arch=.*/i_arch_rel=${_axe_version_array_abs_sp[2]}" "$1/PKGBUILD"
						if [[ $? -eq 0 ]]; then
							sed -i "//arch=.*/i_axe_rel=1" "$1/PKGBUILD"
							if [[ $? -eq 0 ]]; then
								sed -i "//arch=.*/a$_axe_tag_rel" "$1/PKGBUILD"
								if [[ $? -eq 0 ]]; then
									sed -i "/pkgname=.*/i#--------------------" "$1/PKGBUILD" && sed -i "/pkgver=.*/a#--------------------" "$1/PKGBUILD"
										if [[ $? -eq 0 ]]; then
										axe_info "sucsessfully added $_axe_tag_rel to $1/PKGBUILD"
									else
										axe_fuck "$1/PKGBUILD refused to accept pkgrel modification-- add spacer 3,4 view PKGBUILD" && any_key && nano "$1/PKGBUILD"
										_axe_local_return_sp=2
									fi
								else
									axe_fuck "$1/PKGBUILD refused to accept pkgrel modification-- add pkgrel, view PKGBUILD" && any_key && nano "$1/PKGBUILD"
									_axe_local_return_sp=2
								fi
							else
								axe_fuck "$1/PKGBUILD refused to accept pkgrel modification add axe rel, view PKGBUILD" && any_key && nano "$1/PKGBUILD"
								_axe_local_return_sp=2
							fi
						else
							axe_fuck "$1/PKGBUILD refused to accept pkgrel modification add archrel, view PKGBUILD" && any_key && nano "$1/PKGBUILD"
							_axe_local_return_sp=2
						fi
					else
						axe_fuck "$1/PKGBUILD refused to accept pkgrel modification add spacer 2, view PKGBUILD" && any_key && nano "$1/PKGBUILD"
						_axe_local_return_sp=2
					fi
				else
					axe_fuck "$1/PKGBUILD refused to accept pkgrel modification-- add spacer 1, view PKGBUILD" && any_key && nano "$1/PKGBUILD"
					_axe_local_return_sp=2
				fi
			else
				axe_info "modifying a CATAGORY --- SINGLE package"
				sed -i "/pkgname=.*/i#--------------------" "$1/PKGBUILD"
				if [[ $? -eq 0 ]]; then
					sed -i "/pkgname=.*/a#--------------------" "$1/PKGBUILD"
					if [[ $? -eq 0 ]]; then
						sed -i "/pkgver=.*/i_arch_rel=${_axe_version_array_abs_sp[2]}" "$1/PKGBUILD"
						if [[ $? -eq 0 ]]; then
							sed -i "/pkgver=.*/i_axe_rel=1" "$1/PKGBUILD"
							if [[ $? -eq 0 ]]; then
								sed -i "/pkgver=.*/a$_axe_tag_rel" "$1/PKGBUILD"
								if [[ $? -eq 0 ]]; then
									sed -i "/pkgver=.*/a#--------------------" "$1/PKGBUILD"
									if [[ $? -eq 0 ]]; then
										axe_info "sucsessfully added $_axe_tag_rel to $1/PKGBUILD"
									else
										axe_fuck "$1/PKGBUILD refused to accept pkgrel modification-- add spacer 3, view PKGBUILD" && any_key && nano "$1/PKGBUILD"
										_axe_local_return_sp=2
									fi
								else
									axe_fuck "$1/PKGBUILD refused to accept pkgrel modification-- add pkgrel, view PKGBUILD" && any_key && nano "$1/PKGBUILD"
									_axe_local_return_sp=2
								fi
							else
								axe_fuck "$1/PKGBUILD refused to accept pkgrel modification add axe rel, view PKGBUILD" && any_key && nano "$1/PKGBUILD"
								_axe_local_return_sp=2
							fi
						else
							axe_fuck "$1/PKGBUILD refused to accept pkgrel modification add archrel, view PKGBUILD" && any_key && nano "$1/PKGBUILD"
							_axe_local_return_sp=2
						fi
					else
						axe_fuck "$1/PKGBUILD refused to accept pkgrel modification add spacer 2, view PKGBUILD" && any_key && nano "$1/PKGBUILD"
						_axe_local_return_sp=2
					fi
				else
					axe_fuck "$1/PKGBUILD refused to accept pkgrel modification-- add spacer 1, view PKGBUILD" && any_key && nano "$1/PKGBUILD"
					_axe_local_return_sp=2
				fi
			fi
		else
			nano "$1/PKGBUILD"
		fi
	else
		#entry from the PKGBUILDS
				#pkgrel="${_AXE_PREFIX_REL}.${_AXE_STAGE}.${_arch_rel}.${_axe_rel}.${_AXE_PROCESOR_REL}.${_AXE_SUFFIX_REL}"
		_axe_tag_rel='pkgrel="${_AXE_PREFIX_REL}.${_AXE_STAGE}.${_arch_rel}.${_axe_rel}.${_AXE_PROCESOR_REL}.${_AXE_SUFFIX_REL}"'
		axe_info "original pkgrel found and is ${_axe_version_array_abs_sp[2]}"
		axe_info "adding axe pkgrel changes to $1/PKGBUILD am going write $_axe_tag_rel"
		if [[ "${_axe_version_array_abs_sp[6]}" == "split" ]]; then
			axe_info "modifying a CATAGORY --- SPLIT package"
			sed -i "/pkgbase=.*/i#--------------------" "$1/PKGBUILD"
			if [[ $? -eq 0 ]]; then
				sed -i "/pkgbase=.*/a#--------------------" "$1/PKGBUILD"
				if [[ $? -eq 0 ]]; then
					sed -i "/pkgrel=.*/i_arch_rel=${_axe_version_array_abs_sp[2]}" "$1/PKGBUILD"
					if [[ $? -eq 0 ]]; then
						sed -i "/pkgrel=.*/i_axe_rel=1" "$1/PKGBUILD"
						if [[ $? -eq 0 ]]; then
							sed -i "s/pkgrel=.*/$_axe_tag_rel/" "$1/PKGBUILD"
							if [[ $? -eq 0 ]]; then
								sed -i "/pkgname=.*/i#--------------------" "$1/PKGBUILD" && sed -i "/pkgver=.*/a#--------------------" "$1/PKGBUILD"
								if [[ $? -eq 0 ]]; then
									axe_info "sucsessfully added $_axe_tag_rel to $1/PKGBUILD"
								else
									axe_fuck "$1/PKGBUILD refused to accept pkgrel modification-- add spacer 3 and 4, view PKGBUILD" 
									any_key 
									nano "$1/PKGBUILD"
									_axe_local_return_sp=2
								fi
							else
								axe_fuck "$1/PKGBUILD refused to accept pkgrel modification-- replace pkgrel, view PKGBUILD"
								any_key 
								nano "$1/PKGBUILD"
								_axe_local_return_sp=2
							fi
						else
							axe_fuck "$1/PKGBUILD refused to accept pkgrel modification add axe rel, view PKGBUILD"
							any_key
							nano "$1/PKGBUILD"
							_axe_local_return_sp=2
						fi
					else
						axe_fuck "$1/PKGBUILD refused to accept pkgrel modification add archrel, view PKGBUILD"
						any_key 
						nano "$1/PKGBUILD"
						_axe_local_return_sp=2
					fi
				else
					axe_fuck "$1/PKGBUILD refused to accept pkgrel modification add spacer 2, view PKGBUILD" 
					any_key 
					nano "$1/PKGBUILD"
					_axe_local_return_sp=2
				fi
			else
				axe_fuck "$1/PKGBUILD refused to accept pkgrel modification-- add spacer 1, view PKGBUILD"
				any_key
				nano "$1/PKGBUILD"
				_axe_local_return_sp=2
			fi
		else
			axe_info "modifying a CATAGORY --- SINGLE package"
			sed -i "/pkgname=.*/i#--------------------" "$1/PKGBUILD"
			if [[ $? -eq 0 ]]; then
				sed -i "/pkgname=.*/a#--------------------" "$1/PKGBUILD"
				if [[ $? -eq 0 ]]; then
					sed -i "/pkgrel=.*/i_arch_rel=${_axe_version_array_abs_sp[2]}" "$1/PKGBUILD"
					if [[ $? -eq 0 ]]; then
						sed -i "/pkgrel=.*/i_axe_rel=1" "$1/PKGBUILD"
						if [[ $? -eq 0 ]]; then
							sed -i "/pkgrel=.*/i#--------------------" "$1/PKGBUILD"
							if [[ $? -eq 0 ]]; then
								sed -i "s/pkgrel=.*/$_axe_tag_rel/" "$1/PKGBUILD"
								if [[ $? -eq 0 ]]; then
									axe_info "sucsessfully added $_axe_tag_rel to $1/PKGBUILD"
								else
									axe_fuck "$1/PKGBUILD refused to accept pkgrel modification-- replace pkgrel, view PKGBUILD" 
									any_key 
									nano "$1/PKGBUILD"
									_axe_local_return_sp=2
								fi
							else
								axe_fuck "$1/PKGBUILD refused to accept pkgrel modification-- add spacer 3, view PKGBUILD" 
								any_key
								nano "$1/PKGBUILD"
								_axe_local_return_sp=2
							fi
						else
							axe_fuck "$1/PKGBUILD refused to accept pkgrel modification add axe rel, view PKGBUILD" 
							any_key 
							nano "$1/PKGBUILD"
							_axe_local_return_sp=2
						fi
					else
						axe_fuck "$1/PKGBUILD refused to accept pkgrel modification add archrel, view PKGBUILD" 
						any_key 
						nano "$1/PKGBUILD"
						_axe_local_return_sp=2
					fi
				else
					axe_fuck "$1/PKGBUILD refused to accept pkgrel modification add spacer 2, view PKGBUILD"
					any_key 
					nano "$1/PKGBUILD"
					_axe_local_return_sp=2
				fi
			else
				axe_fuck "$1/PKGBUILD refused to accept pkgrel modification-- add spacer 1, view PKGBUILD" 
				any_key 
				nano "$1/PKGBUILD"
				_axe_local_return_sp=2
			fi
		fi

	fi

	
	#insert jubei as maintainer
	if [[ ! $(grep 'Maintainer: Jubei-Mitsuyoshi' "$1/PKGBUILD") ]]; then
		axe_info "adding axe maintainer to $1/PKGBUILD"
		sed -i '2i# Maintainer: Jubei-Mitsuyoshi <jubei.house.of.five.masters@gmail.com>' "$1/PKGBUILD"
		if [[ $? -eq 0 ]]; then
			axe_info "sucsessfully added axe maintainer to $1/PKGBUILD"
		else
			axe_fuck "PKGBUILD refused to accept packeger modification, view PKGBUILD" && any_key && nano "$1/PKGBUILD"
			_axe_local_return_sp=3
		fi
	else
		axe_warn "$1/PKGBUILD already has correct maintainer"
	fi
	
	#add axe groupe
	if [[ $(cat "$1/PKGBUILD" | grep -m 1 'groups=') ]]; then
		axe_info "adding axe to $1/PKGBUILD groups"
		sed -i 's/groups=(/groups=(\"axis\" /' "$1/PKGBUILD"
		if [[ $? -eq 0 ]]; then
			axe_info "sucsessfully added axe to existing groups in $1/PKGBUILD"
		else
			axe_fuck "$1/PKGBUILD refused to accept groupes modification, view PKGBUILD" && any_key && nano "$1/PKGBUILD"
			_axe_local_return_sp=4
		fi
	else
		sed -i "/license=.*/agroups=(\"axis\")" "$1/PKGBUILD"
		if [[ $? -eq 0 ]]; then
			axe_info "sucsessfully added new axe groupe to $1/PKGBUILD"
		else
			axe_fuck "$1/PKGBUILD refused to accept groupes modification view PKGBUILD" && any_key && nano "$1/PKGBUILD"
			_axe_local_return_sp=5
		fi
	fi
	
	for _axe_pb_filename in $(ls $1);do

		[[ "$_axe_pb_filename" == "PKGBUILD" && $2 == "--norc" ]] && axe_warn "NOT checking $1/$_axe_pb_filename for rc.d changes-- checks have been turned off "
		[[ "$_axe_pb_filename" == "PKGBUILD" && ! $2 == "--norc" ]] && axe_warn "NOT checking  PKGBUILD"
		[[ ! "$_axe_pb_filename" == "PKGBUILD" && $2 == "--norc" ]] && axe_warn "NOT checking $1/$_axe_pb_filename for rc.d changes-- checks have been turned off "
		
		if [[ ! $_axe_pb_filename == "PKGBUILD" && ! $2 == "--norc" ]]; then 
			axe_info "CHECKING file  $1/$_axe_pb_filename for for rc.d changes"
			if [[ $(grep '/etc/rc.d/functions' "$1/$_axe_pb_filename") ]]; then
		
				axe_info "applying rc.d modifications to file $1/$_axe_pb_filename"
				sed -i \
					-e 's|stat_busy|msg_busy|g' \
					-e 's|stat_fail|msg_fail|g' \
					-e 's|stat_done|msg_ok|g' \
					-e 's|add_daemon|dmn_add|g' \
					-e 's|ck_daemon|dmn_running|g' \
					-e 's|have_daemon|dmn_exists|g' \
					-e 's|rm_daemon|dmn_rm|g' \
					-e 's|status|exec_cmd|g' \
					"$1/$_axe_pb_filename"
					
				if [[ ! $? -eq 0 ]]; then
					axe_fuck "$1/PKGBUILD refused to accept a modification view PKGBUILD" && any_key && nano "$1/PKGBUILD"
					_axe_local_return_sp=6
				fi
				
				echo "have applied rc.d modifications to file $1/$_axe_pb_filename" >> "$_AXE_DIR/axe_stamp_modifications.list"
				echo "#----------------axe warning------------------ $1/$_axe_pb_filename altered for rc.d changes" >> "$1/PKGBUILD"
				
				# new md5/sha sums for the modified files
	
				cd "$1"
				
				axe_info "now resetting integ checks on pkgbuild"
	
				awk -v newsums="$(makepkg --asroot -g)" '
BEGIN {
  if (!newsums) exit 1
}

/^[[:blank:]]*(md|sha)[[:digit:]]+sums=/,/\)[[:blank:]]*$/ {
  if (!i) print newsums; i++
  next
}

1
' PKGBUILD > PKGBUILD.new && mv PKGBUILD{.new,}

				cd /root/
				
				#warn of systemd refs in $1/$_axe_pb_filename
				axe_info "checking for systemd refs in $1/$_axe_pb_filename"
		
				[[ $(cat "$1/$_axe_pb_filename" | grep 'systemd') ]] && echo "#----------------axe warning------------------ syetemd detected in file $1/$_axe_pb_filename " >> "$1/PKGBUILD" && echo "syetemd detected in file $1/$_axe_pb_filename" >> "$_AXE_DIR/axe_stamp_modifications.list"
			else
				axe_info "NO rc.d refs found skipping file $1/$_axe_pb_filename"
			fi

		else
	
	
			#warn of systemd refs in $1/$_axe_pb_filename
			axe_info "checking for systemd refs in $1/$_axe_pb_filename"
	
			[[ $(cat "$1/$_axe_pb_filename" | grep 'systemd') ]] && echo "#----------------axe warning------------------ syetemd detected in file $1/$_axe_pb_filename " >> "$1/PKGBUILD" && echo "syetemd detected in file $1/$_axe_pb_filename" >> "$_AXE_DIR/axe_stamp_modifications.list"
	
		fi

    done
	
	

	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of stamp_pkgbuild"
	return $_axe_local_return_sp
}

function toolchain_tag_check()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of toolchain_tag_check"
	local VAR="_axe_local_return_ttc"
	_axe_local_return_ttc=0
	
	if [[ "$_AXE_MULTILIB_SUFFIX" == "-multilib" ]]; then


		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx "gcc-multilib" > "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx "gcc-ada-multilib" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx "gcc-fortran-multilib" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx "gcc-go-multilib" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx "gcc-obj-multilib" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx 'glibc' >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx 'libltdl' >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx "libtool-multilib" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx "gcc-libs-multilib" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx "binutils-multilib" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx 'linux-api-headers' >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx 'lib32-glibc' >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx 'lib32-libltdl' >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx 'lib32-libltdl' >> "$_AXE_DIR/scratch"
		
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx "zlib" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx "file" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx "gmp" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx "mpfr" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx "libmpc" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx 'attr' >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx 'acl' >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx "isl" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx "cloog" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB" | sed 's/ .*//' | grep -Fx "ppl" >> "$_AXE_DIR/scratch"
		
	else
		
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN" | sed 's/ .*//' | grep -Fx "gcc" > "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN" | sed 's/ .*//' | grep -Fx "gcc-ada" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN" | sed 's/ .*//' | grep -Fx "gcc-fortran" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN" | sed 's/ .*//' | grep -Fx "gcc-go" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN" | sed 's/ .*//' | grep -Fx "gcc-obj" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN" | sed 's/ .*//' | grep -Fx 'glibc' >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN" | sed 's/ .*//' | grep -Fx 'libltdl' >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN" | sed 's/ .*//' | grep -Fx "libtool" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN" | sed 's/ .*//' | grep -Fx "gcc-libs" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN" | sed 's/ .*//' | grep -Fx "binutils" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN" | sed 's/ .*//' | grep -Fx 'linux-api-headers' >> "$_AXE_DIR/scratch"
		
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN" | sed 's/ .*//' | grep -Fx "zlib" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN" | sed 's/ .*//' | grep -Fx "file" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN" | sed 's/ .*//' | grep -Fx "gmp" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN" | sed 's/ .*//' | grep -Fx "mpfr" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN" | sed 's/ .*//' | grep -Fx "libmpc" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN" | sed 's/ .*//' | grep -Fx 'attr' >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN" | sed 's/ .*//' | grep -Fx 'acl' >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN" | sed 's/ .*//' | grep -Fx "isl" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN" | sed 's/ .*//' | grep -Fx "cloog" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_TOOLCHAIN" | sed 's/ .*//' | grep -Fx "ppl" >> "$_AXE_DIR/scratch"
		
		
	fi
	


	if [[ -s "$_AXE_DIR/scratch" ]]; then
		axe_warn "ok detected that"
		cat "$_AXE_DIR/scratch"
		axe_warn "has been updated or somehow lacks the $_AXE_PACKAGER_NAME tag"
		_axe_local_return_ttc=1
	fi
	
	rm -f "$_AXE_DIR/scratch"
	
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of toolchain_tag_check"
	return $_axe_local_return_ttc
	
	#returns
	#0 has the tag---is an i7 toolchain
	#1 does NOT have the i7 tag ---is NOT an i7 toolchain
	
}

function mod_axe_repo_entries()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of mod_axe_repo_entries"
	
	
	#first argument is repo location to switch to
		#--local .. switch to entry for locally hdd repo directory
		#--remote .. switch to entry for remote github repo
		#--st2 .. switch entry to stage 2 binaries
		#--st3 .. switch entry to stage 3 binaries
		#--rem .. just delete all the entries

	#delete them all
		#delete all [axe] entries
		sed -i ":\[axe.*:d" "$_AXE_PACMAN_CONF_PATH"
		#delete remote entry
		sed -i ':https\:\/\/github.com\/Jubei-Mitsuyoshi:d' "$_AXE_PACMAN_CONF_PATH"
		#delete local entries
		sed -i ':Server = file\:\/\/:d' "$_AXE_PACMAN_CONF_PATH"
		
	axe_debug "show $_AXE_PACMAN_CONF_PATH check repo axe entries deleted" && any_key && nano "$_AXE_PACMAN_CONF_PATH"
	#write the chosen one

	case $1 in
		--remote) sed -i "/#\[testing\]/i# AXE-REMOTE-GIT axe remote git\\
[axegithub]\\
$_AXE_REMOTE_GIT_REPO_ENTRY\\
" "$_AXE_PACMAN_CONF_PATH" ;;
	--local) sed -i "/#\[testing\]/i# AXE-LOCAL axe local repo filled from usb stick\\
[axelocal]\\
Server = file://$_AXE_LOCAL_BINARY_REPO_DIR\\
" "$_AXE_PACMAN_CONF_PATH" ;;
	--st2) sed -i "/#\[testing\]/i# AXE-STAGE2-BINARIES filled as part of full rebuild\\
[axest2bin]\\
Server = file://$_AXE_STAGE2_BINARY_REPO_DIR\\
" "$_AXE_PACMAN_CONF_PATH" ;;
	--st3) sed -i "/#\[testing\]/i# AXE-STAGE3-BINARIES filled at the end of full rebuild\\
[axest3bin]\\
Server = file://$_AXE_STAGE3_BINARY_REPO_DIR\\
" "$_AXE_PACMAN_CONF_PATH" ;;
	esac
	axe_debug "show $_AXE_PACMAN_CONF_PATH check repo axe entries added" && any_key && nano "$_AXE_PACMAN_CONF_PATH"
	
[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End mod_axe_repo_entries"
}

function update_repo_database()
{

	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of update_repo_database"
	
	local VAR="_axe_local_return_urd"
	_axe_local_return_urd=0
	
#first argument is repo path
	#xxxxx /path/to/repo
#second argument is repo name
#	xxxx repo name

	if [[ -d "$1" ]]; then
		
		cd "$1"
		if [[ -s "$2" ]]; then
			axe_info "found a repo database file in $1 deleting it to write a new one"
			rm -f "$2"
			if [[ $? -eq 0 ]]; then
				axe_info "sucsessfully deleted $1/$2 to write a new one"
			else
				axe_fuck "problem with deleting $1/$2 old database" 
				_axe_local_return_urd=2
			fi
			rm -f "$2.db.tar.gz"
			if [[ ! $? -eq 0 ]]; then
				axe_info "sucsessfully deleted $1/$2.db.tar.gz to write a new one"
			else
				axe_fuck "problem with deleting $1/$2.db.tar.gz old database" 
				_axe_local_return_urd=3
			fi
		fi
		
		repo-add "$2.db.tar.gz" *.pkg.tar.xz
		if [[ $? -eq 0 ]]; then
			axe_info "sucsessfully created new $1/$2.db.tar.gz"
		else
			axe_fuck " problem with creating new $1/$2.db.tar.gz"
			_axe_local_return_urd=4
		fi
	else
		axe_fuck " repo directory does not exist"
		_axe_local_return_urd=1
	fi
	
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of of update_repo_database"
	return $_axe_local_return_urd
}

function mask_toolchain_upgrades()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of mask_toolchain_upgrades"
	local VAR="_axe_local_return_mtu"
	_axe_local_return_mtu=0
	
	if [[ "$_AXE_MULTILIB_SUFFIX" == "-multilib" ]]; then
		sed -i "/\[options\]/a# axe is controlling toolchain upgrades now these lines prevent your toolchain from being updated\\
IgnorePkg=glibc\\
IgnorePkg=lib32-glibc\\
IgnorePkg=libtool-multilib\\
IgnorePkg=libltdl\\
IgnorePkg=lib32-libltdl\\
IgnorePkg=gcc-ada-multilib\\
IgnorePkg=gcc-fortran-multilib\\
IgnorePkg=gcc-go-multilib\\
IgnorePkg=gcc-obj-multilib\\
IgnorePkg=gcc-multilib\\
IgnorePkg=gcc-libs-multilib\\
IgnorePkg=lib32-gcc-libs\\
IgnorePkg=binutils-multilib\\
IgnorePkg=linux\\
IgnorePkg=zlib\\
IgnorePkg=file\\
IgnorePkg=gmp\\
IgnorePkg=mpfr\\
IgnorePkg=libmpc\\
IgnorePkg=attr\\
IgnorePkg=acl\\
IgnorePkg=isl\\
IgnorePkg=cloog\\
IgnorePkg=ppl\\
" "$_AXE_PACMAN_CONF_PATH"
		if [[ $? -eq 0 ]]; then
			axe_info "sucsessfully written toolchain mask to $_AXE_PACMAN_CONF_PATH"
		else
			axe_fuck "problem with writing toolchain mask to $_AXE_PACMAN_CONF_PATH" && any_key && nano "$_AXE_PACMAN_CONF_PATH"
			_axe_local_return_mtu=2
		fi
	else
		sed -i "/\[options\]/a# axe is controlling toolchain upgrades now these lines prevent your toolchain from being updated\\
IgnorePkg=glibc\\
IgnorePkg=libtool\\
IgnorePkg=libltdl\\
IgnorePkg=gcc-ada\\
IgnorePkg=gcc-fortran\\
IgnorePkg=gcc-go\\
IgnorePkg=gcc-obj\\
IgnorePkg=gcc\\
IgnorePkg=gcc-libs\\
IgnorePkg=binutils\\
IgnorePkg=linux\\
IgnorePkg=zlib\\
IgnorePkg=file\\
IgnorePkg=gmp\\
IgnorePkg=mpfr\\
IgnorePkg=libmpc\\
IgnorePkg=attr\\
IgnorePkg=acl\\
IgnorePkg=isl\\
IgnorePkg=cloog\\
IgnorePkg=ppl\\
" "$_AXE_PACMAN_CONF_PATH"
		if [[ $? -eq 0 ]]; then
			axe_info "sucsessfully written toolchain mask to $_AXE_PACMAN_CONF_PATH"
		else
			axe_fuck "problem with writing toolchain mask to $_AXE_PACMAN_CONF_PATH" && any_key && nano "$_AXE_PACMAN_CONF_PATH"
			_axe_local_return_mtu=2
		fi
	fi
	
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of mask_toolchain_upgrades"
}

function export_pkgbuilds_to_usb()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of export_pkgbuilds_to_usb"
	
	local VAR="_axe_local_return_eptu"
	local VAR="_axe_progress"
	_axe_progress=0
	_axe_local_return_eptu=0
	
	#argument 1 input folder path
		# xxx /path/to/folder
	#argument 2 usb stick folder name
		# xxx folder name 
		
	if [[ ! -d "$_AXE_USB_STICK_MNT" ]]; then
		axe_info "creating usb mount dir $_AXE_USB_STICK_MNT"
		mkdir "$_AXE_USB_STICK_MNT"
		if [[ $? -eq 0 ]]; then
			_axe_progress=1
		else
			axe_fuck "could not create usb mount dir $_AXE_USB_STICK_MNT aborting"
			_axe_progress=0
		fi
	else
		_axe_progress=1
	fi
	
	if [[ $_axe_progress -eq 1 ]]; then
		axe_info "mounting $_AXE_USB_STICK_DEVICE"
		mount -t vfat "$_AXE_USB_STICK_DEVICE" "$_AXE_USB_STICK_MNT"
		if [[ $? -eq 0 ]]; then
			axe_info "$_AXE_USB_STICK_DEVICE sucsessfully mounted to $_AXE_USB_STICK_MNT"
			
			if [[ ! -d "$_AXE_USB_STICK_MNT/$2" ]]; then
				axe_info "creating usb dir $_AXE_USB_STICK_MNT/$2 to copy PKGBUILDs to"
				mkdir "$_AXE_USB_STICK_MNT/$2"
				if [[ $? -eq 0 ]]; then
					_axe_progress=1
				else
					axe_fuck "could not create usb mount dir $_AXE_USB_STICK_MNT aborting"
					_axe_progress=0
				fi
			else
				_axe_progress=1
			fi
				
			if [[ $_axe_progress -eq 1 ]]; then	
				axe_info "copying over PKGBUILDS from $1 to $_AXE_USB_STICK_MNT/$2"
				
				cp -fr $1/* "$_AXE_USB_STICK_MNT/$2"
				if [[ $? -eq 0 ]]; then
					wait
					axe_info "PKGBUILD dirs sucessfully copied"
				else
					axe_fuck " something is wrong did not copy anything check the code"
					_axe_local_return_eptu=3
				fi
		
				axe_info "UNmounting $_AXE_USB_STICK_DEVICE"
				umount  "$_AXE_USB_STICK_MNT"
				if [[ $? -eq 0 ]]; then
					axe_info "$_AXE_USB_STICK_DEVICE sucsessfully UNmounted"
				else
					axe_fuck " failed in UNmounting $_AXE_USB_STICK_DEVICE which will still be active"
					_axe_local_return_eptu=2
				fi
			fi
			
		else
			axe_fuck " failed to mount$_AXE_USB_STICK_DEVICE to $_AXE_USB_STICK_MNT"
			_axe_local_return_eptu=1
		fi
	fi

	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End export_pkgbuilds_to_usb"

	return $_axe_local_return_eptu
}

function reset_toolchain()
{
	
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of reset_toolchain"
	
	local VAR="_axe_local_return_rtt"
	_axe_local_return_rtt=0

	axe_fuck "well Huston we have a problem :) one of the toolchain components have bugged out during the build, this is a majour fuck up !!!"
	axe_fuck "this unfortunatly is not unusuall with Arch, more and more toolchain build failiures kept emerrging, hence i can only advise you to try again"
	any_key
	
	
	#reset packages
	pacman -S linux-api-headers glibc "libtool$_AXE_MULTILIB_SUFFIX" libltdl "binutils$_AXE_MULTILIB_SUFFIX" "gcc$_AXE_MULTILIB_SUFFIX" "gcc-ada$_AXE_MULTILIB_SUFFIX" "gcc-fortran$_AXE_MULTILIB_SUFFIX" "gcc-go$_AXE_MULTILIB_SUFFIX" "gcc-libs$_AXE_MULTILIB_SUFFIX" "gcc-objc$_AXE_MULTILIB_SUFFIX" zlib file gmp mpfr libmpc attr acl isl cloog ppl
	if [[ $? -eq 0 ]]; then
	
		#check reset sucsessfullzlib

		toolchain_tag_check
		if [[ $? -eq 1 ]]; then
			axe_fuck "toolchain reset procedure failed one of the toolchain components still has the tag/tags "
			_axe_local_return_rtt=1
			any_key
		fi
	else
		axe_fuck "toolchain reset procedure failed pacman bailed out"
		_axe_local_return_rtt=2
		any_key
	fi
	
	
	return $_axe_local_return_rtt
	
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of reset toolchain"
}

function unmask_toolchain_upgrades()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of unmask_toolchain_upgrades"

	if [[ "$_AXE_MULTILIB_SUFFIX" == "-multilib" ]]; then

		sed -i 's/IgnorePkg=glibc//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=lib32-glibc//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=libtool-multilib//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=libltdl//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=lib32-libltdl//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=gcc-ada-multilib//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=gcc-fortran-multilib//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=gcc-go-multilib//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=gcc-obj-multilib//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=gcc-multilib//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=gcc-libs-multilib//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=lib32-gcc-libs//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=binutils-multilib//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=linux//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=zlib//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=file//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=gmp//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=mpfr//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=libmpc//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=attr//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=acl//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=isl//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=cloog//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=ppl//' "$_AXE_PACMAN_CONF_PATH"
		
	else

		sed -i 's/IgnorePkg=glibc//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=lib32-glibc//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=libtool//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=libltdl//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=lib32-libltdl//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=gcc-ada//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=gcc-fortran//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=gcc-go//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=gcc-obj//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=gcc//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=gcc-libs//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=lib32-gcc-libs//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=binutils//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=linux//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=zlib//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=file//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=gmp//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=mpfr//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=libmpc//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=attr//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=acl//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=isl//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=cloog//' "$_AXE_PACMAN_CONF_PATH"
		sed -i 's/IgnorePkg=ppl//' "$_AXE_PACMAN_CONF_PATH"

	fi
	

	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of unmask_toolchain_upgrades"

}

# build functions **********************************************************************************************************************************************
#***************************************************************************************************************************************************************

function build_axe_pkgbuild()
{
	axe_block "Start of build_axe_pkgbuild ${bldcyn} --------  $1  --------- "
	
	
	local VAR="_axe_tmp_error_state"
	local VAR="_axe_local_return_bap"
	local VAR="_axe_continue_bap"
	local VAR="_axe_pkg_flags_bap"
	_axe_pkg_flags_bap=""
	_axe_continue_bap=1
	_axe_local_return_bap=0
	_axe_tmp_error_state=0

	#first argument is pkg name
		#xxxx ..package name
	#second argument is what kind of install
		#--install ..build package and install
		#--noinstall .. build package, export complete binary to repo, but do not install
		#--install-force .. build package and install usinf force flag ( implies --con)
	#third argument weather user intervention is needed
		#--nocon ..user needs to press buttons
		#--con ..no interventin necessary
	#fourth argument fetch location
		# xxx .. /path/to/input/dir to be used as single source
	#fith argument force -o3 build as preferance
		#--o3
		#--o2
	#sith argument passthrough for check_pkg_tag --fail
		# --nofail
		# --fail
	#seventh argument passthrough for check_pkg_tag --suc
		# --nosuc
		# --suc
	#eightth argument passthrough for check_pkg_tag --tag
		# --notag
		# --tag
	#ninth argument apply the check function ?
		# --check
		# --nocheck
			
	#tenth argument (optional) is it a toolchain component syntax ${10}
		# --toolchain is a toolchain component
		# xxx not a toolchain component
	
	#check the package packager variable , if its mine skip the build
	check_pkg_tag "$1" "$6" "$7" "$8"
	if [[ $? -gt 0 ]]; then
		_axe_local_return_bap=8
	else
		
		if [[ $5 == "--o3" ]]; then
		
			axe_info "-O3 has been chosen as default for this package"
			
			# ram with -O3*********************************************************************************************************
		
			# switch to -O3
			sed -i 's/-O2/-O3/' "$_AXE_MAKEPKG_CONF_PATH"
			
			copy_pkgbuild_single "$1" "$_AXE_RAM_BUILD_DIR" "$4"
			if [[ $? -eq 0 ]]; then
			
				cd "$_AXE_RAM_BUILD_DIR/$1"
				
				[[ $1 == "linux" && $_AXE_LINUX_MENU_YES -eq 1 ]] && sed -i 's/#make nconfig/make nconfig/' "$_AXE_RAM_BUILD_DIR/linux/PKGBUILD"
					
				
				_axe_tmp_error_state=0
				if [[ $3 == "--nocon" ]]; then
					makepkg --asroot --noconfirm "$9" -csf
					_axe_tmp_error_state=$?
				fi
				if [[ $3 == "--con" ]]; then
					makepkg --asroot "$9" -csf
					_axe_tmp_error_state=$?
				fi
					
				if [[ $_axe_tmp_error_state -eq 0 ]]; then
				_axe_pkg_flags_bap=$(sed '/^\#/d' '/etc/makepkg.conf' | grep -m 1 'CFLAGS=' | sed 's/\"//g')
				
					if [[ $2 == "--install" && $3 == "--nocon" ]]; then
						pacman -U --noconfirm *.pkg.tar.xz
						if [[ $? -eq 0 ]]; then
							cp -pf  $_AXE_RAM_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
							if [[ $? -eq 0 ]]; then
								echo -e "BUILT AND INSTALLED AND EXPORTED AT $(date) $1 FROM $_AXE_RAM_BUILD_DIR  TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" > "$_AXE_BINARY_EXPORT_DIR/$1-$(date +%Y%m%d-%H%M%S).datestamp"
								[[ ${10} == "--toolchain" ]] && echo -e "BUILT AND INSTALLED AND EXPORTED $1 AT $(date) FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" >> "$_AXE_LOGS_DIR/toolchain_build_log"
								axe_info "BUILT AND INSTALLED AND EXPORTED AT $(date) $1  FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR"
								echo "$1 " >> "$_AXE_DIR/build_sucsess.list"
								_axe_local_return_bap=0
							else
								axe_fuck "$1 FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
								_axe_local_return_bap=7
							fi
						else
							axe_fuck "$1 FAILED to install even when asked to"
							echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"				
							_axe_local_return_bap=6
						fi
					fi
					
					if [[ $2 == "--install" && $3 == "--con" ]]; then
						pacman -U *.pkg.tar.xz
						if [[ $? -eq 0 ]]; then
							cp -pf  $_AXE_RAM_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
							if [[ $? -eq 0 ]]; then
								echo -e "BUILT AND INSTALLED AND EXPORTED AT $(date) $1  FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" > "$_AXE_BINARY_EXPORT_DIR/$1-$(date +%Y%m%d-%H%M%S).datestamp"
								[[ ${10} == "--toolchain" ]] && echo -e "BUILT AND INSTALLED AND EXPORTED $1 AT $(date) FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" >> "$_AXE_LOGS_DIR/toolchain_build_log"
								axe_info "BUILT AND INSTALLED AND EXPORTED AT $(date) $1  FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR"
								echo "$1 " >> "$_AXE_DIR/build_sucsess.list"
								_axe_local_return_bap=0
							else
								axe_fuck "$1 FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
								_axe_local_return_bap=7
							fi
						
						else
							axe_fuck "$1 FAILED to install even when asked to"
							echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"			
							_axe_local_return_bap=6
						fi
					fi
					
					if [[ $2 == "--install-force" ]]; then
						pacman -Uf *.pkg.tar.xz
						if [[ $? -eq 0 ]]; then
							cp -pf  $_AXE_RAM_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
							if [[ $? -eq 0 ]]; then
								echo -e "BUILT AND INSTALLED AND EXPORTED -- WITH THE PACMAN FORCE OPTION -- AT $(date) $1  FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" > "$_AXE_BINARY_EXPORT_DIR/$1-$(date +%Y%m%d-%H%M%S).datestamp"
								[[ ${10} == "--toolchain" ]] && echo -e "BUILT AND INSTALLED AND EXPORTED -- WITH THE PACMAN FORCE OPTION -- $1 AT $(date) FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" >> "$_AXE_LOGS_DIR/toolchain_build_log"
								axe_info "BUILT AND INSTALLED AND EXPORTED -- WITH THE PACMAN FORCE OPTION -- AT $(date) $1  FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR"
								echo "$1 " >> "$_AXE_DIR/build_sucsess.list"
								_axe_local_return_bap=0
							else
								axe_fuck "$1 FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
								_axe_local_return_bap=7
							fi
						
						else
							axe_fuck "$1 FAILED to install even when asked to"
							echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"			
							_axe_local_return_bap=6
						fi
					fi
					
					if [[ $2 == "--noinstall" ]]; then
						cp -pf  $_AXE_RAM_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
						if [[ $? -eq 0 ]]; then
							echo -e "BUILT AND EXPORTED ONLY $(date) $1  $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR FROM \n $_axe_pkg_flags_bap" > "$_AXE_BINARY_EXPORT_DIR/$1-$(date +%Y%m%d-%H%M%S).datestamp"
							[[ ${10} == "--toolchain" ]] && echo -e "BUILT AND EXPORTED ONLY $1 AT $(date) FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" >> "$_AXE_LOGS_DIR/toolchain_build_log"
							axe_info "BUILT AND EXPORTED ONLY $(date) $1  FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR"
							echo "$1 " >> "$_AXE_DIR/build_sucsess.list"
							_axe_local_return_bap=0
						else
							axe_fuck "$1 FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
							_axe_local_return_bap=7
						fi
					fi
					
				else
					axe_fuck "$1 FAILED to build with -O3 from $_AXE_RAM_BUILD_DIR $(date)"
					_axe_local_return_bap=5
				fi
				
				cd /root/
				rm -fr "$_AXE_RAM_BUILD_DIR/$1"
				
			else
				_axe_local_return_bap=9
			fi
			
			
			# hdd with -O3********************************************************************************************************
			
			if [[ $_axe_local_return_bap -eq 5 ]]; then
				copy_pkgbuild_single "$1" "$_AXE_HDD_BUILD_DIR" "$4"
				if [[ $? -eq 0 ]]; then
				
					cd "$_AXE_HDD_BUILD_DIR/$1"
					
					_axe_tmp_error_state=0
					if [[ $3 == "--nocon" ]]; then
						makepkg --asroot --noconfirm "$9" -csf
						_axe_tmp_error_state=$?
					fi
					if [[ $3 == "--con" ]]; then
						makepkg --asroot "$9" -csf
						_axe_tmp_error_state=$?
					fi
						
					if [[ $_axe_tmp_error_state -eq 0 ]]; then
					
						if [[ $2 == "--install" && $3 == "--nocon" ]]; then
							pacman -U --noconfirm *.pkg.tar.xz
							if [[ $? -eq 0 ]]; then
								cp -pf  $_AXE_HDD_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
								if [[ $? -eq 0 ]]; then
									echo -e "BUILT AND INSTALLED AND EXPORTED AT $(date) $1 FROM $_AXE_HDD_BUILD_DIR  TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" > "$_AXE_BINARY_EXPORT_DIR/$1-$(date +%Y%m%d-%H%M%S).datestamp"
									[[ ${10} == "--toolchain" ]] && echo -e "BUILT AND INSTALLED AND EXPORTED $1 AT $(date) FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" >> "$_AXE_LOGS_DIR/toolchain_build_log"
									axe_info "BUILT AND INSTALLED AND EXPORTED AT $(date) $1  FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR"
									echo "$1 " >> "$_AXE_DIR/build_sucsess.list"
									_axe_local_return_bap=1
								else
									axe_fuck "$1 FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
									_axe_local_return_bap=7
								fi
							else
								axe_fuck "$1 FAILED to install even when asked to"
								echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"				
								_axe_local_return_bap=6
							fi
						fi
						
						if [[ $2 == "--install" && $3 == "--con" ]]; then
							pacman -U *.pkg.tar.xz
							if [[ $? -eq 0 ]]; then
								cp -pf  $_AXE_HDD_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
								if [[ $? -eq 0 ]]; then
									echo -e "BUILT AND INSTALLED AND EXPORTED AT $(date) $1  FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" > "$_AXE_BINARY_EXPORT_DIR/$1-$(date +%Y%m%d-%H%M%S).datestamp"
									[[ ${10} == "--toolchain" ]] && echo -e "BUILT AND INSTALLED AND EXPORTED $1 AT $(date) FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" >> "$_AXE_LOGS_DIR/toolchain_build_log"
									axe_info "BUILT AND INSTALLED AND EXPORTED AT $(date) $1  FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR"
									echo "$1 " >> "$_AXE_DIR/build_sucsess.list"
									_axe_local_return_bap=1
								else
									axe_fuck "$1 FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
									_axe_local_return_bap=7
								fi
							
							else
								axe_fuck "$1 FAILED to install even when asked to"
								echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"			
								_axe_local_return_bap=6
							fi
						fi
						
						if [[ $2 == "--install-force" ]]; then
							pacman -Uf *.pkg.tar.xz
							if [[ $? -eq 0 ]]; then
								cp -pf  $_AXE_HDD_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
								if [[ $? -eq 0 ]]; then
									echo -e "BUILT AND INSTALLED AND EXPORTED -- WITH THE PACMAN FORCE OPTION -- AT $(date) $1  FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" > "$_AXE_BINARY_EXPORT_DIR/$1-$(date +%Y%m%d-%H%M%S).datestamp"
									[[ ${10} == "--toolchain" ]] && echo -e "BUILT AND INSTALLED AND EXPORTED -- WITH THE PACMAN FORCE OPTION -- $1 AT $(date) FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" >> "$_AXE_LOGS_DIR/toolchain_build_log"
									axe_info "BUILT AND INSTALLED AND EXPORTED -- WITH THE PACMAN FORCE OPTION -- AT $(date) $1  FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR"
									echo "$1 " >> "$_AXE_DIR/build_sucsess.list"
									_axe_local_return_bap=1
								else
									axe_fuck "$1 FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
									_axe_local_return_bap=7
								fi
							
							else
								axe_fuck "$1 FAILED to install even when asked to"
								echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"			
								_axe_local_return_bap=6
							fi
						fi
						
						if [[ $2 == "--noinstall" ]]; then
							cp -pf  $_AXE_HDD_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
							if [[ $? -eq 0 ]]; then
								echo -e "BUILT AND EXPORTED ONLY $(date) $1  $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR FROM \n $_axe_pkg_flags_bap" > "$_AXE_BINARY_EXPORT_DIR/$1-$(date +%Y%m%d-%H%M%S).datestamp"
								[[ ${10} == "--toolchain" ]] && echo -e "BUILT AND EXPORTED ONLY $1 AT $(date) FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" >> "$_AXE_LOGS_DIR/toolchain_build_log"
								axe_info "BUILT AND EXPORTED ONLY $(date) $1  FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR"
								echo "$1 " >> "$_AXE_DIR/build_sucsess.list"
								_axe_local_return_bap=1
							else
								axe_fuck "$1 FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
								_axe_local_return_bap=7
							fi
						fi
						
					else
						axe_fuck "$1 FAILED to build with -O3 from $_AXE_HDD_BUILD_DIR $(date)"
						_axe_local_return_bap=5
					fi
					
					cd /root/
					rm -fr "$_AXE_HDD_BUILD_DIR/$1"
					
				else
					_axe_local_return_bap=9
				fi
			fi
		else
		
			# switch to -O2
			sed -i 's/-O3/-O2/' "$_AXE_MAKEPKG_CONF_PATH"
			[[ $5 == "--o2" ]] && axe_info "-O2 has been chosen as default for this package" && _axe_local_return_bap=5 && _axe_pkg_flags_bap=$(sed '/^\#/d' '/etc/makepkg.conf' | grep -m 1 'CFLAGS=' | sed 's/\"//g')
			
			
			# ram with -O2*********************************************************************************************************
			
			if [[ $_axe_local_return_bap -eq 5 ]]; then
			
			
				# switch to -O2
				sed -i 's/-O3/-O2/' "$_AXE_MAKEPKG_CONF_PATH"
				
				copy_pkgbuild_single "$1" "$_AXE_RAM_BUILD_DIR" "$4"
				if [[ $? -eq 0 ]]; then
				
					cd "$_AXE_RAM_BUILD_DIR/$1"
					
					if [[ $1 == "linux" && $_AXE_LINUX_MENU_YES -eq 1 ]]; then
						#alter linux PKGINFO
						sed -i 's/#make nconfig/make nconfig/' "$_AXE_RAM_BUILD_DIR/linux/PKGBUILD"	
					fi
					
					_axe_tmp_error_state=0
					if [[ $3 == "--nocon" ]]; then
						makepkg --asroot --noconfirm "$9" -csf
						_axe_tmp_error_state=$?
					fi
					if [[ $3 == "--con" ]]; then
						makepkg --asroot "$9" -csf
						_axe_tmp_error_state=$?
					fi
						
					if [[ $_axe_tmp_error_state -eq 0 ]]; then
					
						if [[ $2 == "--install" && $3 == "--nocon" ]]; then
							pacman -U --noconfirm *.pkg.tar.xz
							if [[ $? -eq 0 ]]; then
								cp -pf  $_AXE_RAM_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
								if [[ $? -eq 0 ]]; then
									echo -e "BUILT AND INSTALLED AND EXPORTED AT $(date) $1 FROM $_AXE_RAM_BUILD_DIR  TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" > "$_AXE_BINARY_EXPORT_DIR/$1-$(date +%Y%m%d-%H%M%S).datestamp"
									[[ ${10} == "--toolchain" ]] && echo -e "BUILT AND INSTALLED AND EXPORTED $1 AT $(date) FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" >> "$_AXE_LOGS_DIR/toolchain_build_log"
									axe_info "BUILT AND INSTALLED AND EXPORTED AT $(date) $1  FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR"
									echo "$1 " >> "$_AXE_DIR/build_sucsess.list"
									_axe_local_return_bap=2
								else
									axe_fuck "$1 FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
									_axe_local_return_bap=7
								fi
							else
								axe_fuck "$1 FAILED to install even when asked to"
								echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"				
								_axe_local_return_bap=6
							fi
						fi
						
						if [[ $2 == "--install" && $3 == "--con" ]]; then
							pacman -U *.pkg.tar.xz
							if [[ $? -eq 0 ]]; then
								cp -pf  $_AXE_RAM_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
								if [[ $? -eq 0 ]]; then
									echo -e "BUILT AND INSTALLED AND EXPORTED AT $(date) $1  FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" > "$_AXE_BINARY_EXPORT_DIR/$1-$(date +%Y%m%d-%H%M%S).datestamp"
									[[ ${10} == "--toolchain" ]] && echo -e "BUILT AND INSTALLED AND EXPORTED $1 AT $(date) FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" >> "$_AXE_LOGS_DIR/toolchain_build_log"
									axe_info "BUILT AND INSTALLED AND EXPORTED AT $(date) $1  FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR"
									echo "$1 " >> "$_AXE_DIR/build_sucsess.list"
									_axe_local_return_bap=2
								else
									axe_fuck "$1 FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
									_axe_local_return_bap=7
								fi
							
							else
								axe_fuck "$1 FAILED to install even when asked to"
								echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"			
								_axe_local_return_bap=6
							fi
						fi
						
						if [[ $2 == "--install-force" ]]; then
							pacman -Uf *.pkg.tar.xz
							if [[ $? -eq 0 ]]; then
								cp -pf  $_AXE_RAM_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
								if [[ $? -eq 0 ]]; then
									echo -e "BUILT AND INSTALLED AND EXPORTED -- WITH THE PACMAN FORCE OPTION -- AT $(date) $1  FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" > "$_AXE_BINARY_EXPORT_DIR/$1-$(date +%Y%m%d-%H%M%S).datestamp"
									[[ ${10} == "--toolchain" ]] && echo -e "BUILT AND INSTALLED AND EXPORTED -- WITH THE PACMAN FORCE OPTION -- $1 AT $(date) FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" >> "$_AXE_LOGS_DIR/toolchain_build_log"
									axe_info "BUILT AND INSTALLED AND EXPORTED -- WITH THE PACMAN FORCE OPTION -- AT $(date) $1  FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR"
									echo "$1 " >> "$_AXE_DIR/build_sucsess.list"
									_axe_local_return_bap=2
								else
									axe_fuck "$1 FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
									_axe_local_return_bap=7
								fi
							
							else
								axe_fuck "$1 FAILED to install even when asked to"
								echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"			
								_axe_local_return_bap=6
							fi
						fi
						
						if [[ $2 == "--noinstall" ]]; then
							cp -pf  $_AXE_RAM_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
							if [[ $? -eq 0 ]]; then
								echo -e "BUILT AND EXPORTED ONLY $(date) $1  $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR FROM \n $_axe_pkg_flags_bap" > "$_AXE_BINARY_EXPORT_DIR/$1-$(date +%Y%m%d-%H%M%S).datestamp"
								[[ ${10} == "--toolchain" ]] && echo -e "BUILT AND EXPORTED ONLY $1 AT $(date) FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" >> "$_AXE_LOGS_DIR/toolchain_build_log"
								axe_info "BUILT AND EXPORTED ONLY $(date) $1  FROM $_AXE_RAM_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR"
								echo "$1 " >> "$_AXE_DIR/build_sucsess.list"
								_axe_local_return_bap=2
							else
								axe_fuck "$1 FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
								_axe_local_return_bap=7
							fi
						fi
						
					else
						axe_fuck "$1 FAILED to build with -O3 from $_AXE_RAM_BUILD_DIR $(date)"
						_axe_local_return_bap=5
					fi
					
					cd /root/
					rm -fr "$_AXE_RAM_BUILD_DIR/$1"
				fi
				
			else
				_axe_local_return_bap=9
			fi
			
			# hdd with -O2********************************************************************************************************
			
			if [[ $_axe_local_return_bap -eq 5 ]]; then
				copy_pkgbuild_single "$1" "$_AXE_HDD_BUILD_DIR" "$4"
				if [[ $? -eq 0 ]]; then
					
					cd "$_AXE_HDD_BUILD_DIR/$1"
				
					_axe_tmp_error_state=0
					if [[ $3 == "--nocon" ]]; then
						makepkg --asroot --noconfirm "$9" -csf
						_axe_tmp_error_state=$?
					fi
					if [[ $3 == "--con" ]]; then
						makepkg --asroot "$9" -csf
						_axe_tmp_error_state=$?
					fi
						
					if [[ $_axe_tmp_error_state -eq 0 ]]; then
					
						if [[ $2 == "--install" && $3 == "--nocon" ]]; then
							pacman -U --noconfirm *.pkg.tar.xz
							if [[ $? -eq 0 ]]; then
								cp -pf  $_AXE_HDD_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
								if [[ $? -eq 0 ]]; then
									echo -e "BUILT AND INSTALLED AND EXPORTED AT $(date) $1 FROM $_AXE_HDD_BUILD_DIR  TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" > "$_AXE_BINARY_EXPORT_DIR/$1-$(date +%Y%m%d-%H%M%S).datestamp"
									[[ ${10} == "--toolchain" ]] && echo -e "BUILT AND INSTALLED AND EXPORTED $1 AT $(date) FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" >> "$_AXE_LOGS_DIR/toolchain_build_log"
									axe_info "BUILT AND INSTALLED AND EXPORTED AT $(date) $1  FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR"
									echo "$1 " >> "$_AXE_DIR/build_sucsess.list"
									_axe_local_return_bap=3
								else
									axe_fuck "$1 FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
									_axe_local_return_bap=7
								fi
							else
								axe_fuck "$1 FAILED to install even when asked to"
								echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"				
								_axe_local_return_bap=6
							fi
						fi
						
						if [[ $2 == "--install" && $3 == "--con" ]]; then
							pacman -U *.pkg.tar.xz
							if [[ $? -eq 0 ]]; then
								cp -pf  $_AXE_HDD_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
								if [[ $? -eq 0 ]]; then
									echo -e "BUILT AND INSTALLED AND EXPORTED AT $(date) $1  FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" > "$_AXE_BINARY_EXPORT_DIR/$1-$(date +%Y%m%d-%H%M%S).datestamp"
									[[ ${10} == "--toolchain" ]] && echo -e "BUILT AND INSTALLED AND EXPORTED $1 AT $(date) FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" >> "$_AXE_LOGS_DIR/toolchain_build_log"
									axe_info "BUILT AND INSTALLED AND EXPORTED AT $(date) $1  FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR"
									echo "$1 " >> "$_AXE_DIR/build_sucsess.list"
									_axe_local_return_bap=3
								else
									axe_fuck "$1 FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
									_axe_local_return_bap=7
								fi
							
							else
								axe_fuck "$1 FAILED to install even when asked to"
								echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"			
								_axe_local_return_bap=6
							fi
						fi
						
						if [[ $2 == "--install-force" ]]; then
							pacman -Uf *.pkg.tar.xz
							if [[ $? -eq 0 ]]; then
								cp -pf  $_AXE_HDD_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
								if [[ $? -eq 0 ]]; then
									echo -e "BUILT AND INSTALLED AND EXPORTED -- WITH THE PACMAN FORCE OPTION -- AT $(date) $1  FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" > "$_AXE_BINARY_EXPORT_DIR/$1-$(date +%Y%m%d-%H%M%S).datestamp"
									[[ ${10} == "--toolchain" ]] && echo -e "BUILT AND INSTALLED AND EXPORTED -- WITH THE PACMAN FORCE OPTION -- $1 AT $(date) FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" >> "$_AXE_LOGS_DIR/toolchain_build_log"
									axe_info "BUILT AND INSTALLED AND EXPORTED -- WITH THE PACMAN FORCE OPTION -- AT $(date) $1  FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR"
									echo "$1 " >> "$_AXE_DIR/build_sucsess.list"
									_axe_local_return_bap=3
								else
									axe_fuck "$1 FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
									_axe_local_return_bap=7
								fi
							
							else
								axe_fuck "$1 FAILED to install even when asked to"
								echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"			
								_axe_local_return_bap=6
							fi
						fi
						
						if [[ $2 == "--noinstall" ]]; then
							cp -pf  $_AXE_HDD_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
							if [[ $? -eq 0 ]]; then
								echo -e "BUILT AND EXPORTED ONLY $(date) $1  $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR FROM \n $_axe_pkg_flags_bap" > "$_AXE_BINARY_EXPORT_DIR/$1-$(date +%Y%m%d-%H%M%S).datestamp"
								[[ ${10} == "--toolchain" ]] && echo -e "BUILT AND EXPORTED ONLY $1 AT $(date) FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" >> "$_AXE_LOGS_DIR/toolchain_build_log"
								axe_info "BUILT AND EXPORTED ONLY $(date) $1  FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR"
								echo "$1 " >> "$_AXE_DIR/build_sucsess.list"
								_axe_local_return_bap=3
							else
								axe_fuck "$1 FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
								_axe_local_return_bap=7
							fi
						fi
						
					else
						axe_fuck "$1 FAILED to build with -O2 from $_AXE_HDD_BUILD_DIR $(date)"
						_axe_local_return_bap=5
					fi
					
					cd /root/
					rm -fr "$_AXE_HDD_BUILD_DIR/$1"
					
				else
					_axe_local_return_bap=9
				fi
			fi
			
			# hdd -02 with jopts off ***********************************************************************************************
			
			if [[ $_axe_local_return_bap -eq 5 ]]; then
				copy_pkgbuild_single "$1" "$_AXE_HDD_BUILD_DIR" "$4"
				if [[ $? -eq 0 ]]; then
					#comment out makeopts
					sed -i 's/MAKEFLAGS/#MAKEFLAGS/' "$_AXE_MAKEPKG_CONF_PATH"
					
					cd "$_AXE_HDD_BUILD_DIR/$1"
				
					_axe_tmp_error_state=0
					if [[ $3 == "--nocon" ]]; then
						makepkg --asroot "$9" --log --noconfirm -csf
						_axe_tmp_error_state=$?
					fi
					if [[ $3 == "--con" ]]; then
						makepkg --asroot "$9" --log -csf
						_axe_tmp_error_state=$?
					fi
						
					if [[ $_axe_tmp_error_state -eq 0 ]]; then
					
						if [[ $2 == "--install" && $3 == "--nocon" ]]; then
							pacman -U --noconfirm *.pkg.tar.xz
							if [[ $? -eq 0 ]]; then
								cp -pf  $_AXE_HDD_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
								if [[ $? -eq 0 ]]; then
									echo -e "BUILT AND INSTALLED AND EXPORTED --MAKEOPTS COMMENTED OUT-- AT $(date) $1 FROM $_AXE_HDD_BUILD_DIR  TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" > "$_AXE_BINARY_EXPORT_DIR/$1-$(date +%Y%m%d-%H%M%S).datestamp"
									[[ ${10} == "--toolchain" ]] && echo -e "BUILT AND INSTALLED AND EXPORTED  --MAKEOPTS COMMENTED OUT-- $1 AT $(date) FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" >> "$_AXE_LOGS_DIR/toolchain_build_log"
									axe_info "BUILT AND INSTALLED AND EXPORTED  --MAKEOPTS COMMENTED OUT-- AT $(date) $1  FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR"
									echo "$1 " >> "$_AXE_DIR/build_sucsess.list"
									_axe_local_return_bap=4
								else
									axe_fuck "$1 FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
									_axe_local_return_bap=7
								fi
							else
								axe_fuck "$1 FAILED to install even when asked to"
								echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"				
								_axe_local_return_bap=6
							fi
						fi
						
						if [[ $2 == "--install" && $3 == "--con" ]]; then
							pacman -U *.pkg.tar.xz
							if [[ $? -eq 0 ]]; then
								cp -pf  $_AXE_HDD_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
								if [[ $? -eq 0 ]]; then
									echo -e "BUILT AND INSTALLED AND EXPORTED  --MAKEOPTS COMMENTED OUT-- AT $(date) $1  FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" > "$_AXE_BINARY_EXPORT_DIR/$1-$(date +%Y%m%d-%H%M%S).datestamp"
									[[ ${10} == "--toolchain" ]] && echo -e "BUILT AND INSTALLED AND EXPORTED  --MAKEOPTS COMMENTED OUT-- $1 AT $(date) FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" >> "$_AXE_LOGS_DIR/toolchain_build_log"
									axe_info "BUILT AND INSTALLED AND EXPORTED  --MAKEOPTS COMMENTED OUT-- AT $(date) $1  FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR"
									echo "$1 " >> "$_AXE_DIR/build_sucsess.list"
									_axe_local_return_bap=4
								else
									axe_fuck "$1 FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
									_axe_local_return_bap=7
								fi
							
							else
								axe_fuck "$1 FAILED to install even when asked to"
								echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"			
								_axe_local_return_bap=6
							fi
						fi
						
						if [[ $2 == "--install-force" ]]; then
							pacman -Uf *.pkg.tar.xz
							if [[ $? -eq 0 ]]; then
								cp -pf  $_AXE_HDD_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
								if [[ $? -eq 0 ]]; then
									echo -e "BUILT AND INSTALLED AND EXPORTED --MAKEOPTS COMMENTED OUT--  -- WITH THE PACMAN FORCE OPTION -- AT $(date) $1  FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" > "$_AXE_BINARY_EXPORT_DIR/$1-$(date +%Y%m%d-%H%M%S).datestamp"
									[[ ${10} == "--toolchain" ]] && echo -e "BUILT AND INSTALLED AND EXPORTED --MAKEOPTS COMMENTED OUT--  -- WITH THE PACMAN FORCE OPTION -- $1 AT $(date) FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" >> "$_AXE_LOGS_DIR/toolchain_build_log"
									axe_info "BUILT AND INSTALLED AND EXPORTED -- WITH THE PACMAN FORCE OPTION -- AT $(date) $1  FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR"
									echo "$1 " >> "$_AXE_DIR/build_sucsess.list"
									_axe_local_return_bap=4
								else
									axe_fuck "$1 FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
									_axe_local_return_bap=7
								fi
							
							else
								axe_fuck "$1 FAILED to install even when asked to"
								echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"			
								_axe_local_return_bap=6
							fi
						fi
						
						if [[ $2 == "--noinstall" ]]; then
							cp -pf  $_AXE_HDD_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
							if [[ $? -eq 0 ]]; then
								echo -e "BUILT AND EXPORTED ONLY --MAKEOPTS COMMENTED OUT--  $(date) $1  $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR FROM \n $_axe_pkg_flags_bap" > "$_AXE_BINARY_EXPORT_DIR/$1-$(date +%Y%m%d-%H%M%S).datestamp"
								[[ ${10} == "--toolchain" ]] && echo -e "BUILT AND EXPORTED ONLY --MAKEOPTS COMMENTED OUT--  $1 AT $(date) FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR \n $_axe_pkg_flags_bap" >> "$_AXE_LOGS_DIR/toolchain_build_log"
								axe_info "BUILT AND EXPORTED ONLY  --MAKEOPTS COMMENTED OUT-- $(date) $1  FROM $_AXE_HDD_BUILD_DIR TO $_AXE_BINARY_EXPORT_DIR"
								echo "$1 " >> "$_AXE_DIR/build_sucsess.list"
								_axe_local_return_bap=4
							else
								axe_fuck "$1 FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
								_axe_local_return_bap=7
							fi
						fi
							
					else
						axe_fuck "$1 failed to build with -O2 -O3 from both ram and $_AXE_HDD_BUILD_DIR AND even failed the last build , hdd -O2,no MAKEFLAGS$(date)"
						_axe_local_return_bap=5
						#lets log this build fail
						mkdir -pv "$_AXE_FAIL_BUILD_LOGS_DIR/$1/"
						cp -p $_AXE_HDD_BUILD_DIR/$1/*.log "$_AXE_FAIL_BUILD_LOGS_DIR/$1/"
						echo "$1" >> "$_AXE_DIR/build_fail.list"
					fi
					#uncomment MAKEFLAGS
					sed -i 's/#MAKEFLAGS/MAKEFLAGS/' "$_AXE_MAKEPKG_CONF_PATH"
					cd /root/
					rm -fr "$_AXE_HDD_BUILD_DIR/$1"
					
				else
					_axe_local_return_bap=9
				fi
			fi
		fi
	fi
	
		#Returns
			#0-4 good builds
			#0 o3 ram
			#1 o3hd
			#2 o2ram
			#3 o2hdd
			#4 o2jopts-off
			#5 failed to build
			#6 failed to install
			#7 failed to export
			#8 package was excluded because of check_pkg_tag check
			#8 failed to fetch
			
			
	
	axe_block "End of build_axe_pkgbuild ${txtblu} --------  $1  --------- "
	return $_axe_local_return_bap
	
}

# toolchain build functions ***********************************************************************************************************************************
#***************************************************************************************************************************************************************

function build_gcc()
{
	axe_block "Start of build gcc$_AXE_MULTILIB_SUFFIX pass $_AXE_GCC_REP"
	
	local VAR="_axe_local_return_gcc"
	local VAR="_axe_error_return_gcc"
	local VAR="_axe_pkg_flags_gcc"
	_axe_local_return_gcc=0
	_axe_pkg_flags_gcc=""
	_axe_error_return_gcc=0
	
	#build gcc,  will try it from the hdd only since it never builds from ram
	
	#first input argument type of install action
		#export ... do not install packages, copy them to local repo and export entire pkgbuild dir
		#install ... do not export packages just install them
		#install-export ..... both export the packages and install them	

	#second input argument weather to run checks
		#--check ... apply checks
		#--nocheck ...or blank... ... do not apply checks

		
		
	copy_pkgbuild_single "gcc$_AXE_MULTILIB_SUFFIX" "$_AXE_HDD_BUILD_DIR"
	if [[ $? -eq 0 ]]; then
	
		cd "$_AXE_HDD_BUILD_DIR/gcc$_AXE_MULTILIB_SUFFIX"
		_axe_pkg_flags_gcc=$(sed '/^\#/d' '/etc/makepkg.conf' | grep -m 1 'CFLAGS=' | sed 's/\"//g')
		
		if [[ $2 == "--check" ]]; then
			makepkg --asroot --noconfirm --check -csf
			_axe_error_return_gcc=$?
		else
			makepkg --asroot --noconfirm -csf
			_axe_error_return_gcc=$?
		fi
			
		if [[ $_axe_error_return_gcc -eq 0 ]]; then
			case $1 in
				"install") pacman -U --noconfirm *.pkg.tar.xz 
							if [[ $? -eq 0 ]]; then
								echo -e "BUILT AND INSTALLED gcc$_AXE_MULTILIB_SUFFIX pass $_AXE_GCC_REP $(date) from $_AXE_HDD_BUILD_DIR \n $_axe_pkg_flags_gcc" >> "$_AXE_LOGS_DIR/toolchain_build_log"
								cd /root/
								axe_block "End of build gcc$ pass $_AXE_GCC_REP"
								let _AXE_GCC_REP=$_AXE_GCC_REP+1
								_axe_local_return_gcc=3
							else
								axe_fuck "gcc$_AXE_MULTILIB_SUFFIX FAILED to install even when asked to"
								echo -e "gcc$_AXE_MULTILIB_SUFFIX or one of the split packages failed to install" >> "$_AXE_DIR/build_fail_to_install.list"					
								_axe_local_return_gcc=6
							fi ;;
				"export") cp -pf  $_AXE_HDD_BUILD_DIR/gcc$_AXE_MULTILIB_SUFFIX/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
							if [[ $? -eq 0 ]]; then 	
								echo -e "BUILT AND EXPORTED ONLY gcc$_AXE_MULTILIB_SUFFIX pass $_AXE_GCC_REP $(date) from $_AXE_HDD_BUILD_DIR \n $_axe_pkg_flags_gcc" > "$_AXE_BINARY_EXPORT_DIR/gcc$_AXE_MULTILIB_SUFFIX-$(date +%Y%m%d-%H%M%S).datestamp"
								echo -e "BUILT AND EXPORTED ONLY gcc$_AXE_MULTILIB_SUFFIX pass $_AXE_GCC_REP $(date) from $_AXE_HDD_BUILD_DIR \n $_axe_pkg_flags_gcc" >> "$_AXE_LOGS_DIR/toolchain_build_log"
								cd /root/
								axe_block "End of build gcc$_AXE_MULTILIB_SUFFIX pass $_AXE_GCC_REP"
								let _AXE_GCC_REP=$_AXE_GCC_REP+1
								_axe_local_return_gcc=3
							else
								axe_fuck "gcc$_AXE_MULTILIB_SUFFIX FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
								_axe_local_return_gcc=7
							fi ;;
				"install-export") pacman -U --noconfirm *.pkg.tar.xz
							if [[ $? -eq 0 ]]; then 
								cp -pf  $_AXE_HDD_BUILD_DIR/gcc$_AXE_MULTILIB_SUFFIX/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
								if [[ $? -eq 0 ]]; then 	
									echo -e "BUILT AND INSTALLED AND EXPORTED gcc$_AXE_MULTILIB_SUFFIX pass $_AXE_GCC_REP $(date) from $_AXE_HDD_BUILD_DIR \n $_axe_pkg_flags_gcc" > "$_AXE_BINARY_EXPORT_DIR/gcc$_AXE_MULTILIB_SUFFIX-$(date +%Y%m%d-%H%M%S).datestamp"
									echo -e "BUILT AND INSTALLED AND EXPORTED gcc$_AXE_MULTILIB_SUFFIX pass $_AXE_GCC_REP $(date) from $_AXE_HDD_BUILD_DIR \n $_axe_pkg_flags_gcc" >> "$_AXE_LOGS_DIR/toolchain_build_log"
									cd /root/
									axe_block "End of build gcc$_AXE_MULTILIB_SUFFIX pass $_AXE_GCC_REP"
									let _AXE_GCC_REP=$_AXE_GCC_REP+1
									_axe_local_return_gcc=3
								else
									axe_fuck "gcc$_AXE_MULTILIB_SUFFIX FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
									_axe_local_return_gcc=7
								fi 
							else
								axe_fuck "gcc$_AXE_MULTILIB_SUFFIX FAILED to install even when asked to"
								echo "gcc$_AXE_MULTILIB_SUFFIX or one of the split packages failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
								_axe_local_return_gcc=6
							fi ;;
			esac
				
		else
			echo "!!!!!!!!!!!build fails gcc$_AXE_MULTILIB_SUFFIX pass $_AXE_GCC_REP $(date) am trying it with makeopts commented out " >> "$_AXE_LOGS_DIR/toolchain_build_log"
			_axe_local_return_gcc=5
		fi
		cd /root/
		rm -rf "$_AXE_HDD_BUILD_DIR/gcc$_AXE_MULTILIB_SUFFIX"	
	else
		_axe_local_return_gcc=9
	fi
	
	

	if [[ $_axe_local_return_gcc -eq 5 ]]; then
		axe_info "ahhh shit there is a build problem gcc, going to try a non-paralell build"
	
		#lets try that again with etc/makepkg.conf
		#comment out MAKEFLAGS
		sed -i 's/MAKEFLAGS/#MAKEFLAGS/' "$_AXE_MAKEPKG_CONF_PATH"
	
		copy_pkgbuild_single "gcc$_AXE_MULTILIB_SUFFIX" "$_AXE_HDD_BUILD_DIR"
		if [[ $? -eq 0 ]]; then
		
			if [[ $2 == "--check" ]]; then
				makepkg --asroot --noconfirm --check -csf
				_axe_error_return_gcc=$?
			else
				makepkg --asroot --noconfirm -csf
				_axe_error_return_gcc=$?
			fi
				
			if [[ $_axe_error_return_gcc -eq 0 ]]; then
				case $1 in
					"install") pacman -U --noconfirm *.pkg.tar.xz 
								if [[ $? -eq 0 ]]; then
									echo -e "BUILT AND INSTALLED-----FAILED BUILD WITH MAKEOPTS gcc$_AXE_MULTILIB_SUFFIX pass $_AXE_GCC_REP $(date) from $_AXE_HDD_BUILD_DIR \n $_axe_pkg_flags_gcc" >> "$_AXE_LOGS_DIR/toolchain_build_log"
									#uncomment MAKEFLAGS
									sed -i 's/#MAKEFLAGS/MAKEFLAGS/' "$_AXE_MAKEPKG_CONF_PATH"
									axe_block "End of build gcc$_AXE_MULTILIB_SUFFIX pass $_AXE_GCC_REP"
									let _AXE_GCC_REP=$_AXE_GCC_REP+1
									_axe_local_return_gcc=4
								else
									axe_fuck "gcc$_AXE_MULTILIB_SUFFIX FAILED to install even when asked to"
									echo -e "gcc$_AXE_MULTILIB_SUFFIX or one of the split packages failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
									_axe_local_return_gcc=6
								fi ;;
					"export") cp -pf  $_AXE_HDD_BUILD_DIR/gcc$_AXE_MULTILIB_SUFFIX/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
								if [[ $? -eq 0 ]]; then 	
									echo -e "BUILT AND EXPORTED ONLY-----FAILED BUILD WITH MAKEOPTS gcc$_AXE_MULTILIB_SUFFIX pass $_AXE_GCC_REP $(date) from $_AXE_HDD_BUILD_DIR \n $_axe_pkg_flags_gcc" > "$_AXE_BINARY_EXPORT_DIR/gcc$_AXE_MULTILIB_SUFFIX-$(date +%Y%m%d-%H%M%S).datestamp"
									echo -e "BUILT AND EXPORTED ONLY-----FAILED BUILD WITH MAKEOPTS gcc$_AXE_MULTILIB_SUFFIX pass $_AXE_GCC_REP $(date) from $_AXE_HDD_BUILD_DIR \n $_axe_pkg_flags_gcc" >> "$_AXE_LOGS_DIR/toolchain_build_log"
									#uncomment MAKEFLAGS
									sed -i 's/#MAKEFLAGS/MAKEFLAGS/' "$_AXE_MAKEPKG_CONF_PATH"
									axe_block "End of build gcc$_AXE_MULTILIB_SUFFIX pass $_AXE_GCC_REP"
									let _AXE_GCC_REP=$_AXE_GCC_REP+1
									_axe_local_return_gcc=4
								else
									axe_fuck "gcc$_AXE_MULTILIB_SUFFIX FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
									_axe_local_return_gcc=7
								fi ;;
					"install-export") pacman -U --noconfirm *.pkg.tar.xz
								if [[ $? -eq 0 ]]; then 
									cp -pf  $_AXE_HDD_BUILD_DIR/gcc$_AXE_MULTILIB_SUFFIX/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
									if [[ $? -eq 0 ]]; then 	
										echo -e "BUILT AND INSTALLED AND EXPORTED-----FAILED BUILD WITH MAKEOPTS gcc$_AXE_MULTILIB_SUFFIX pass $_AXE_GCC_REP $(date) from $_AXE_HDD_BUILD_DIR \n $_axe_pkg_flags_gcc" > "$_AXE_BINARY_EXPORT_DIR/gcc$_AXE_MULTILIB_SUFFIX-$(date +%Y%m%d-%H%M%S).datestamp"
										echo -e "BUILT AND INSTALLED AND EXPORTED-----FAILED BUILD WITH MAKEOPTS gcc$_AXE_MULTILIB_SUFFIX pass $_AXE_GCC_REP $(date) from $_AXE_HDD_BUILD_DIR \n $_axe_pkg_flags_gcc" >> "$_AXE_LOGS_DIR/toolchain_build_log"
										#uncomment MAKEFLAGS
										sed -i 's/#MAKEFLAGS/MAKEFLAGS/' "$_AXE_MAKEPKG_CONF_PATH"
										axe_block "End of build gcc$_AXE_MULTILIB_SUFFIX pass $_AXE_GCC_REP"
										let _AXE_GCC_REP=$_AXE_GCC_REP+1
										_axe_local_return_gcc=4
									else
										axe_fuck "gcc$_AXE_MULTILIB_SUFFIX FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
										_axe_local_return_gcc=7
									fi
								else
									axe_fuck "gcc$_AXE_MULTILIB_SUFFIX FAILED to install even when asked to"
									echo "gcc$_AXE_MULTILIB_SUFFIX or one of the split packages failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
									_axe_local_return_gcc=6
								fi ;;
				esac
	
			else
				mkdir -pv "$_AXE_FAIL_BUILD_LOGS_DIR/gcc$_AXE_MULTILIB_SUFFIX$_AXE_GCC_REP"
				cp -p $_AXE_HDD_BUILD_DIR/gcc$_AXE_MULTILIB_SUFFIX/*.log "$_AXE_FAIL_BUILD_LOGS_DIR/gcc$_AXE_MULTILIB_SUFFIX"
				echo "!!!!!!!!!!!build fails gcc$_AXE_MULTILIB_SUFFIX pass $_AXE_GCC_REP also failed same build with MAKEFLAGS commented out $(date)" >> "$_AXE_LOGS_DIR/toolchain_build_log"
				#uncomment MAKEFLAGS
				sed -i 's/#MAKEFLAGS/MAKEFLAGS/' "$_AXE_MAKEPKG_CONF_PATH"
				axe_block "End of build gcc$_AXE_MULTILIB_SUFFIX pass $_AXE_GCC_REP"
				_axe_local_return_gcc=5
			fi
			cd /root/
			rm -rf "$_AXE_HDD_BUILD_DIR/gcc$_AXE_MULTILIB_SUFFIX"
		else
		_axe_local_return_gcc=9
		fi
	fi
	
	
	
			#Returns
			#0-4 good builds
			#0 o3 ram#######not used
			#1 o3hd#######not used
			#2 o2ram#######not used
			#3 o2hdd
			#4 o2jopts-off
			#5 failed to build
			#6 failed to install
			#7 failed to export
			#8 package was excluded because of check_pkg_tag check#######not used
			#9 failed to fetch
	
	return $_axe_local_return_gcc
	
}

function build_libtool()
{
	axe_block "Start of build libtool$_AXE_MULTILIB_SUFFIX pass $_AXE_LIBTOOL_REP "

	local VAR="_axe_local_return_libtool"
	local VAR="_axe_pkg_flags_lbtl"
	local VAR="_axe_error_return_libtool"
	_axe_error_return_libtool=0
	_axe_pkg_flags_lbtl=""
	_axe_local_return_libtool=0
	
	
	#first input argument
		#export ... do not install packages, copy them to local repo and export entire pkgbuild dir
		#install ... do not export packages just install them
		#install-export ..... both export the packages and install them
		
	#second input argument weather to run checks
		#--check ... apply checks
		#--no-check ...or blank... ... do not apply checks
		
	#build libtool, from tmp dir never had any problem building  from ram
	
	
	
	copy_pkgbuild_single "libtool$_AXE_MULTILIB_SUFFIX" "$_AXE_RAM_BUILD_DIR"
	if [[ $? -eq 0 ]]; then 
	
		cd "$_AXE_RAM_BUILD_DIR/libtool$_AXE_MULTILIB_SUFFIX"
		_axe_pkg_flags_lbtl=$(sed '/^\#/d' '/etc/makepkg.conf' | grep -m 1 'CFLAGS=' | sed 's/\"//g')
		
		if [[ $2 == "--check" ]]; then
			makepkg --asroot --noconfirm --check -csf
			_axe_error_return_libtool=$?
		else
			makepkg --asroot --noconfirm -csf
			_axe_error_return_libtool=$?
		fi
			
		if [[ $_axe_error_return_libtool -eq 0 ]]; then
			case $1 in
				"install") pacman -U --noconfirm *.pkg.tar.xz 
							if [[ $? -eq 0 ]]; then
								echo -e "BUILT AND INSTALLED libtool$_AXE_MULTILIB_SUFFIX pass $_AXE_LIBTOOL_REP $(date) from $_AXE_RAM_BUILD_DIR \n $_axe_pkg_flags_lbtl" >> "$_AXE_LOGS_DIR/toolchain_build_log"
								axe_block "End of build libtool$_AXE_MULTILIB_SUFFIX pass $_AXE_LIBTOOL_REP"
								let _AXE_LIBTOOL_REP=$_AXE_LIBTOOL_REP+1
								_axe_local_return_libtool=2
							else
								axe_fuck "libtool$_AXE_MULTILIB_SUFFIX FAILED to install even when asked to"
								echo -e "libtool$_AXE_MULTILIB_SUFFIX or one of the split packages failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
								_axe_local_return_libtool=6
							fi ;;
				"export") cp -pf  $_AXE_RAM_BUILD_DIR/libtool$_AXE_MULTILIB_SUFFIX/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
							if [[ $? -eq 0 ]]; then
								echo -e "BUILT AND EXPORTED ONLY libtool$_AXE_MULTILIB_SUFFIX pass $_AXE_LIBTOOL_REP $(date) from $_AXE_RAM_BUILD_DIR \n $_axe_pkg_flags_lbtl" >> "$_AXE_LOGS_DIR/toolchain_build_log"
								echo -e "BUILT AND EXPORTED ONLY libtool$_AXE_MULTILIB_SUFFIX pass $_AXE_LIBTOOL_REP $(date) from $_AXE_RAM_BUILD_DIR \n $_axe_pkg_flags_lbtl" > "$_AXE_BINARY_EXPORT_DIR/libtool$_AXE_MULTILIB_SUFFIX-$(date +%Y%m%d-%H%M%S).datestamp"
								axe_block "End of build libtool$_AXE_MULTILIB_SUFFIX pass $_AXE_LIBTOOL_REP"
								let _AXE_LIBTOOL_REP=$_AXE_LIBTOOL_REP+1
								_axe_local_return_libtool=2
							else
								axe_fuck "libtool$_AXE_MULTILIB_SUFFIX FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
								_axe_local_return_libtool=7
							fi ;;
				"install-export") pacman -U --noconfirm *.pkg.tar.xz
							if [[ $? -eq 0 ]]; then 
								cp -pf  $_AXE_RAM_BUILD_DIR/libtool$_AXE_MULTILIB_SUFFIX/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
								if [[ $? -eq 0 ]]; then
									echo -e "BUILT AND INSTALLED AND EXPORTED libtool$_AXE_MULTILIB_SUFFIX pass $_AXE_LIBTOOL_REP $(date) from $_AXE_RAM_BUILD_DIR \n $_axe_pkg_flags_lbtl" >> "$_AXE_LOGS_DIR/toolchain_build_log"
									echo -e "BUILT AND INSTALLED AND EXPORTED libtool$_AXE_MULTILIB_SUFFIX pass $_AXE_LIBTOOL_REP $(date) from $_AXE_RAM_BUILD_DIR \n $_axe_pkg_flags_lbtl" > "$_AXE_BINARY_EXPORT_DIR/libtool$_AXE_MULTILIB_SUFFIX-$(date +%Y%m%d-%H%M%S).datestamp"
									axe_block "End of build libtool$_AXE_MULTILIB_SUFFIX pass $_AXE_LIBTOOL_REP"
									let _AXE_LIBTOOL_REP=$_AXE_LIBTOOL_REP+1
									_axe_local_return_libtool=2
								else
									axe_fuck "libtool$_AXE_MULTILIB_SUFFIX FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
									_axe_local_return_libtool=7
								fi
							else
								axe_fuck "libtool$_AXE_MULTILIB_SUFFIX FAILED to install even when asked to"
								echo "libtool$_AXE_MULTILIB_SUFFIX or one of the split packages failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
								_axe_local_return_libtool=6
							fi ;;
			esac
			
		else
			echo "!!!!!!!!!!!build fails libtool$_AXE_MULTILIB_SUFFIX pass $_AXE_LIBTOOL_REP $(date)" >> "$_AXE_LOGS_DIR/toolchain_build_log"
			mkdir -pv "$_AXE_FAIL_BUILD_LOGS_DIR/libtool$_AXE_MULTILIB_SUFFIX$_AXE_LIBTOOL_REP"
			cp -p $_AXE_RAM_BUILD_DIR/libtool$_AXE_MULTILIB_SUFFIX/*.log "$_AXE_FAIL_BUILD_LOGS_DIR/libtool$_AXE_MULTILIB_SUFFIX"
			axe_block "END of build libtool$_AXE_MULTILIB_SUFFIX"
			_axe_local_return_libtool=5
		fi
		cd /root/
		rm -rf "$_AXE_RAM_BUILD_DIR/libtool$_AXE_MULTILIB_SUFFIX"
	else
		_axe_local_return_libtool=9
	fi
	
						#Returns
			#0-4 good builds
			#0 o3 ram#######not used
			#1 o3hd#######not used
			#2 o2ram
			#3 o2hdd#######not used
			#4 o2jopts-off#######not used
			#5 failed to build
			#6 failed to install
			#7 failed to export
			#8 package was excluded because of check_pkg_tag check#######not used
			#9 failed to fetch

	return $_axe_local_return_libtool
	
}

function build_libltdl()
{
	axe_block "Start of build_libltdl pass $_AXE_LIBLTDL_REP"
	
	local VAR="_axe_local_return_libltdl"
	local VAR="_axe_pkg_flags_libltdl"
	local VAR="_axe_error_return_libltdl"
	_axe_error_return_libltdl=0
	_axe_pkg_flags_libltdl=""
	_axe_local_return_libltdl=0
	
		#first argument weather to run checks
		#--check ... apply checks
		#--no-check ...or blank... ... do not apply checks
	
	
	copy_pkgbuild_single "libtool" "$_AXE_RAM_BUILD_DIR"
	if [[ $? -eq 0 ]]; then
		cd "$_AXE_RAM_BUILD_DIR/libtool"
		_axe_pkg_flags_libltdl=$(sed '/^\#/d' '/etc/makepkg.conf' | grep -m 1 'CFLAGS=' | sed 's/\"//g')
		
		if [[ $1 == "--check" ]]; then
			makepkg --asroot --noconfirm --check -csf
			_axe_error_return_libltdl=$?
		else
			makepkg --asroot --noconfirm -csf
			_axe_error_return_libltdl=$?
		fi
			
		if [[ $_axe_error_return_libltdl -eq 0 ]]; then
			pacman -U --noconfirm libltdl*.pkg.tar.xz
			if [[ $? -eq 0 ]]; then
				cp -fp  libltdl*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
				if [[ $? -eq 0 ]]; then
					echo -e "BUILT AND INSTALLED AND EXPORTED libltdl pass $_AXE_LIBLTDL_REP $(date) from $_AXE_HDD_BUILD_DIR installed seperate from libtool for the libtool-multilib toolchain \n $_axe_pkg_flags_libltdl" > "$_AXE_BINARY_EXPORT_DIR/libltdl$_AXE_MULTILIB_SUFFIX-$(date +%Y%m%d-%H%M%S).datestamp"
					echo -e "BUILT AND INSTALLED AND EXPORTED libltdl pass $_AXE_LIBLTDL_REP $(date) from $_AXE_HDD_BUILD_DIR installed seperate from libtool for the libtool-multilib toolchain \n $_axe_pkg_flags_libltdl" >> "$_AXE_LOGS_DIR/toolchain_build_log"
					axe_block "END of build_libltdl pass $_AXE_LIBLTDL_REP"
					let _AXE_LIBLTDL_REP=$_AXE_LIBLTDL_REP+1
					_axe_local_return_libltdl=2
				else
					axe_fuck "libltdl FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
					_axe_local_return_libltdl=7
				fi
			else
				axe_fuck "libltdl FAILED to install even when asked to"
				echo "libltdl failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
				_axe_local_return_libltdl=6
			fi	
			
		else
			echo "!!!!!!!!!!!build fails libltdl pass $_AXE_LIBLTDL_REP $(date)" >> "$_AXE_LOGS_DIR/toolchain_build_log"
			mkdir -pv "$_AXE_FAIL_BUILD_LOGS_DIR/libltdl$_AXE_LIBLTDL_REP"
			cp -p $_AXE_RAM_BUILD_DIR/libtool/*.log "$_AXE_FAIL_BUILD_LOGS_DIR/libltdl"
			_axe_local_return_libltdl=5
			axe_block "END of build_libltdl pass $_AXE_LIBLTDL_REP"
		fi
		cd /root/
		rm -rf "$_AXE_RAM_BUILD_DIR/libtool"
	else
		_axe_local_return_libltdl=9
		axe_block "END of build_libltdl pass $_AXE_LIBLTDL_REP"
	fi

	
	return $_axe_local_return_libltdl
	
								#Returns
			#0-4 good builds
			#0 o3 ram#######not used
			#1 o3hd#######not used
			#2 o2ram
			#3 o2hdd#######not used
			#4 o2jopts-off#######not used
			#5 failed to build
			#6 failed to install
			#7 failed to export
			#8 package was excluded because of check_pkg_tag check#######not used
			#9 failed to fetch
	
}

function build_binutils()
{
	axe_block "Start of build_binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP"
	
	local VAR="_axe_local_return_binutils"
	local VAR="_axe_pkg_flags_binutls"
	local VAR="_axe_error_return_binutils"
	_axe_error_return_binutils=0
	_axe_pkg_flags_binutls=0
	_axe_local_return_binutils=0
	
	#first input argument
		#export ... do not install packages, copy them to local repo and export entire pkgbuild dir
		#install ... do not export packages just install them
		#install-export ..... both export the packages and install them
		
		#second input argument weather to run checks
		#--check ... apply checks
		#--no-check ...or blank... ... do not apply checks
		
	#build binutils$_AXE_MULTILIB_SUFFIX, from tmp dir if fails will try this one from hdd to since i have had issues with it in ram
	
	copy_pkgbuild_single "binutils$_AXE_MULTILIB_SUFFIX" "$_AXE_RAM_BUILD_DIR"
	if [[ $? -eq 0 ]]; then
		cd "$_AXE_RAM_BUILD_DIR/binutils$_AXE_MULTILIB_SUFFIX"
		_axe_pkg_flags_binutls=$(sed '/^\#/d' '/etc/makepkg.conf' | grep -m 1 'CFLAGS=' | sed 's/\"//g')
		
		if [[ $2 == "--check" ]]; then
			makepkg --asroot --noconfirm --check -csf
			_axe_error_return_binutils=$?
		else
			makepkg --asroot --noconfirm -csf
			_axe_error_return_binutils=$?
		fi
			
		if [[ $_axe_error_return_binutils -eq 0 ]]; then
			case $1 in
				"install") pacman -U --noconfirm *.pkg.tar.xz 
							if [[ $? -eq 0 ]]; then
								echo -e "BUILT AND INSTALLED binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP $(date) from $_AXE_RAM_BUILD_DIR \n $_axe_pkg_flags_binutls" >> "$_AXE_LOGS_DIR/toolchain_build_log"
								axe_block "End of build binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP"
								let _AXE_BINUTILS_REP=$_AXE_BINUTILS_REP+1
								_axe_local_return_binutils=2
							else
								axe_fuck "binutils$_AXE_MULTILIB_SUFFIX FAILED to install even when asked to"
								echo -e "binutils$_AXE_MULTILIB_SUFFIX or one of the split packages failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
								_axe_local_return_binutils=6
							fi ;;
				"export") cp -pf $_AXE_RAM_BUILD_DIR/binutils$_AXE_MULTILIB_SUFFIX/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
							if [[ $? -eq 0 ]]; then
								echo -e "BUILT AND  EXPORTED ONLY binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP $(date) from $_AXE_RAM_BUILD_DIR \n $_axe_pkg_flags_binutls" >> "$_AXE_LOGS_DIR/toolchain_build_log"
								echo -e "BUILT AND  EXPORTED ONLY binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP $(date) from $_AXE_RAM_BUILD_DIR \n $_axe_pkg_flags_binutls" > "$_AXE_BINARY_EXPORT_DIR/binutils$_AXE_MULTILIB_SUFFIX-$(date +%Y%m%d-%H%M%S).datestamp"
								axe_block "End of build binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP"
								let _AXE_BINUTILS_REP=$_AXE_BINUTILS_REP+1
								_axe_local_return_binutils=2
							else
								axe_fuck "binutils$_AXE_MULTILIB_SUFFIX FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
								_axe_local_return_binutils=7
							fi ;;
				"install-export") pacman -U --noconfirm *.pkg.tar.xz
							if [[ $? -eq 0 ]]; then 
								cp -pf  $_AXE_RAM_BUILD_DIR/binutils$_AXE_MULTILIB_SUFFIX/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
								if [[ $? -eq 0 ]]; then
									echo -e -e "BUILT AND INSTALLED AND EXPORTED binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP $(date) from $_AXE_RAM_BUILD_DIR \n $_axe_pkg_flags_binutls" >> "$_AXE_LOGS_DIR/toolchain_build_log"
									echo -e -e "BUILT AND INSTALLED AND EXPORTED binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP $(date) from $_AXE_RAM_BUILD_DIR \n $_axe_pkg_flags_binutls" > "$_AXE_BINARY_EXPORT_DIR/binutils$_AXE_MULTILIB_SUFFIX-$(date +%Y%m%d-%H%M%S).datestamp"
									axe_block "End of build binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP"
									let _AXE_BINUTILS_REP=$_AXE_BINUTILS_REP+1
									_axe_local_return_binutils=2
								else
									axe_fuck "binutils$_AXE_MULTILIB_SUFFIX FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
									_axe_local_return_binutils=7
								fi
							else
								axe_fuck "binutils$_AXE_MULTILIB_SUFFIX FAILED to install even when asked to"
								echo "binutils$_AXE_MULTILIB_SUFFIX or one of the split packages failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
								_axe_local_return_binutils=6
							fi ;;
			esac
			
		else
			echo "!!!!!!!!!!!build fails binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP $(date) failed from both ram and hdd" >> "$_AXE_LOGS_DIR/toolchain_build_log"
			_axe_local_return_binutils=5
		fi
		cd /root/
		rm -rf "$_AXE_RAM_BUILD_DIR/binutils$_AXE_MULTILIB_SUFFIX"
	else
		_axe_local_return_binutils=9
	fi


	if [[ _axe_local_return_binutils -eq 5 ]]; then
	
	#ok build failed in ram lets try it on hdd
	axe_info "ahhh shit binutils$_AXE_MULTILIB_SUFFIX failed in ram, not necessarily disasterous could be your swap, going to build it on the HDD to make sure"
	
		copy_pkgbuild_single "binutils$_AXE_MULTILIB_SUFFIX" "$_AXE_HDD_BUILD_DIR"
		if [[ $? -eq 0 ]]; then
			cd "$_AXE_HDD_BUILD_DIR/binutils$_AXE_MULTILIB_SUFFIX"
			if [[ $2 == "--check" ]]; then
				makepkg --asroot --noconfirm --check -csf
				_axe_error_return_binutils=$?
			else
				makepkg --asroot --noconfirm -csf
				_axe_error_return_binutils=$?
			fi
				
			if [[ $_axe_error_return_binutils -eq 0 ]]; then
				case $1 in
					"install") pacman -U --noconfirm *.pkg.tar.xz 
								if [[ $? -eq 0 ]]; then
									echo -e "BUILT AND INSTALLED binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP $(date) from $_AXE_HDD_BUILD_DIR \n $_axe_pkg_flags_binutls" >> "$_AXE_LOGS_DIR/toolchain_build_log"
									axe_block "End of build binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP"
									let _AXE_BINUTILS_REP=$_AXE_BINUTILS_REP+1
									_axe_local_return_binutils=3
								else
									axe_fuck "binutils$_AXE_MULTILIB_SUFFIX FAILED to install even when asked to"
									echo "binutils$_AXE_MULTILIB_SUFFIX or one of the split packages failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
									_axe_local_return_binutils=6
								fi ;;
					"export") cp -pf  $_AXE_HDD_BUILD_DIR/binutils$_AXE_MULTILIB_SUFFIX/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
								if [[ $? -eq 0 ]]; then
									echo -e "BUILT AND EXPORTED ONLY binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP $(date) from $_AXE_HDD_BUILD_DIR \n $_axe_pkg_flags_binutls" >> "$_AXE_LOGS_DIR/toolchain_build_log"
									echo -e "BUILT AND EXPORTED ONLY binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP $(date) from $_AXE_HDD_BUILD_DIR \n $_axe_pkg_flags_binutls" > "$_AXE_BINARY_EXPORT_DIR/binutils$_AXE_MULTILIB_SUFFIX-$(date +%Y%m%d-%H%M%S).datestamp"
									axe_block "End of build binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP"
									let _AXE_BINUTILS_REP=$_AXE_BINUTILS_REP+1
									_axe_local_return_binutils=3
								else
									axe_fuck "binutils$_AXE_MULTILIB_SUFFIX FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
									_axe_local_return_binutils=7
								fi ;;
					"install-export") pacman -U --noconfirm *.pkg.tar.xz
								if [[ $? -eq 0 ]]; then 
									cp -pf  $_AXE_HDD_BUILD_DIR/binutils$_AXE_MULTILIB_SUFFIX*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
									if [[ $? -eq 0 ]]; then
										echo -e "BUILT AND INSTALLED AND EXPORTED binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP $(date) from $_AXE_HDD_BUILD_DIR \n $_axe_pkg_flags_binutls" >> "$_AXE_LOGS_DIR/toolchain_build_log"
										echo -e "BUILT AND INSTALLED AND EXPORTED binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP $(date) from $_AXE_HDD_BUILD_DIR \n $_axe_pkg_flags_binutls" > "$_AXE_BINARY_EXPORT_DIR/binutils$_AXE_MULTILIB_SUFFIX-$(date +%Y%m%d-%H%M%S).datestamp"
										axe_block "End of build binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP"
										let _AXE_BINUTILS_REP=$_AXE_BINUTILS_REP+1
										_axe_local_return_binutils=3
									else
										axe_fuck "binutils$_AXE_MULTILIB_SUFFIX FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
										_axe_local_return_binutils=7
									fi
								else
									axe_fuck "binutils$_AXE_MULTILIB_SUFFIX FAILED to install even when asked to"
									echo "binutils$_AXE_MULTILIB_SUFFIX or one of the split packages failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
									_axe_local_return_binutils=6
								fi ;;
				esac
				
			else
				echo "!!!!!!!!!!!build fails binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP $(date) failed from both ram and hdd" >> "$_AXE_LOGS_DIR/toolchain_build_log"
				_axe_local_return_binutils=5
			fi
			cd /root/
			rm -rf "$_AXE_HDD_BUILD_DIR/binutils$_AXE_MULTILIB_SUFFIX/"
		else
			_axe_local_return_binutils=9
		fi
	fi
	
	
	if [[ _axe_local_return_binutils -eq 5 ]]; then
	
		#lets try that again with MAKEFLAGS commented out
		#comment out MAKEFLAGS
		sed -i 's/MAKEFLAGS/#MAKEFLAGS/' "$_AXE_MAKEPKG_CONF_PATH"
	
		copy_pkgbuild_single "binutils$_AXE_MULTILIB_SUFFIX" "$_AXE_HDD_BUILD_DIR"
		if [[ $? -eq 0 ]]; then
		
			cd "$_AXE_HDD_BUILD_DIR/binutils$_AXE_MULTILIB_SUFFIX"
			if [[ $2 == "--check" ]]; then
				makepkg --asroot --noconfirm --check -csf
				_axe_error_return_binutils=$?
			else
				makepkg --asroot --noconfirm -csf
				_axe_error_return_binutils=$?
			fi
				
			if [[ $_axe_error_return_binutils -eq 0 ]]; then
				case $1 in
					"install") pacman -U --noconfirm *.pkg.tar.xz 
								if [[ $? -eq 0 ]]; then
									echo -e "BUILT AND INSTALLED binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP $(date) from $_AXE_HDD_BUILD_DIR ---- WITH MAKEOPTS COMMENTED OUT \n $_axe_pkg_flags_binutls" >> "$_AXE_LOGS_DIR/toolchain_build_log"
									axe_block "End of build binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP"
									let _AXE_BINUTILS_REP=$_AXE_BINUTILS_REP+1
									_axe_local_return_binutils=4
								else
									axe_fuck "binutils$_AXE_MULTILIB_SUFFIX FAILED to install even when asked to"
									echo "binutils$_AXE_MULTILIB_SUFFIX or one of the split packages failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
									_axe_local_return_binutils=6
								fi ;;
					"export") cp -pf  $_AXE_HDD_BUILD_DIR/binutils$_AXE_MULTILIB_SUFFIX/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
								if [[ $? -eq 0 ]]; then
									echo -e "BUILT AND EXPORTED ONLY binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP $(date) from $_AXE_HDD_BUILD_DIR ---- WITH MAKEOPTS COMMENTED OUT \n $_axe_pkg_flags_binutls" >> "$_AXE_LOGS_DIR/toolchain_build_log"
									echo -e "BUILT AND EXPORTED ONLY binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP $(date) from $_AXE_HDD_BUILD_DIR ---- WITH MAKEOPTS COMMENTED OUT \n $_axe_pkg_flags_binutls" > "$_AXE_BINARY_EXPORT_DIR/binutils$_AXE_MULTILIB_SUFFIX-$(date +%Y%m%d-%H%M%S).datestamp"
									axe_block "End of build binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP"
									let _AXE_BINUTILS_REP=$_AXE_BINUTILS_REP+1
									_axe_local_return_binutils=4
								else
									axe_fuck "binutils$_AXE_MULTILIB_SUFFIX FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
									_axe_local_return_binutils=7
								fi ;;
					"install-export") pacman -U --noconfirm *.pkg.tar.xz
								if [[ $? -eq 0 ]]; then 
									cp -pf  $_AXE_HDD_BUILD_DIR/binutils$_AXE_MULTILIB_SUFFIX*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
									if [[ $? -eq 0 ]]; then
										echo -e "BUILT AND INSTALLED AND EXPORTED binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP $(date) from $_AXE_HDD_BUILD_DIR ---- WITH MAKEOPTS COMMENTED OUT \n $_axe_pkg_flags_binutls" >> "$_AXE_LOGS_DIR/toolchain_build_log"
										echo -e "BUILT AND INSTALLED AND EXPORTED binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP $(date) from $_AXE_HDD_BUILD_DIR ---- WITH MAKEOPTS COMMENTED OUT \n $_axe_pkg_flags_binutls" > "$_AXE_BINARY_EXPORT_DIR/binutils$_AXE_MULTILIB_SUFFIX-$(date +%Y%m%d-%H%M%S).datestamp"
										axe_block "End of build binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP"
										let _AXE_BINUTILS_REP=$_AXE_BINUTILS_REP+1
										_axe_local_return_binutils=4
									else
										axe_fuck "binutils$_AXE_MULTILIB_SUFFIX FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
										_axe_local_return_binutils=7
									fi
								else
									axe_fuck "binutils$_AXE_MULTILIB_SUFFIX FAILED to install even when asked to"
									echo "binutils$_AXE_MULTILIB_SUFFIX or one of the split packages failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
									_axe_local_return_binutils=6
								fi ;;
				esac
				
			else
				echo "!!!!!!!!!!!build fails binutils$_AXE_MULTILIB_SUFFIX pass $_AXE_BINUTILS_REP $(date) failed from both ram and hdd and with MAKEOPTS commented out" >> "$_AXE_LOGS_DIR/toolchain_build_log"
				mkdir -pv "$_AXE_FAIL_BUILD_LOGS_DIR/binutils$_AXE_MULTILIB_SUFFIX$_AXE_BINUTILS_REP"
				cp -p $_AXE_HDD_BUILD_DIR/binutils$_AXE_MULTILIB_SUFFIX/*.log "$_AXE_FAIL_BUILD_LOGS_DIR/binutils$_AXE_MULTILIB_SUFFIX"
				_axe_local_return_binutils=5
			fi
			#uncomment MAKEFLAGS
			sed -i 's/#MAKEFLAGS/MAKEFLAGS/' "$_AXE_MAKEPKG_CONF_PATH"
			cd /root/
			rm -rf "$_AXE_HDD_BUILD_DIR/binutils$_AXE_MULTILIB_SUFFIX/"
		else
			_axe_local_return_binutils=9
		fi
	fi
	
	
	
			#Returns
			#0-4 good builds
			#0 o3 ram#######not used
			#1 o3hd#######not used
			#2 o2ram
			#3 o2hdd
			#4 o2jopts-off
			#5 failed to build
			#6 failed to install
			#7 failed to export
			#8 package was excluded because of check_pkg_tag check#######not used
			#9 failed to fetch
			
	return $_axe_local_return_binutils
}

function build_glibc()
{
	axe_block "Start of glibc pass $_AXE_GLIBC_REP"
	
	local VAR="_axe_local_return_glibc"
	local VAR="_axe_pkg_flags_glibc"
	local VAR="_axe_error_return_glibc"
	_axe_error_return_glibc=0
	_axe_pkg_flags_glibc=""
	_axe_local_return_glibc=0

	#first input argument
		#export ... do not install packages, copy them to local repo and export entire pkgbuild dir
		#install ... do not export packages just install them
		#install-export ..... both export the packages and install them
		
	#second input argument weather to run checks
		#--check ... apply checks
		#--no-check ...or blank... ... do not apply checks
		
		
	#build glibc, from tmp dir if fails will try this one from hdd to since i have had issues with it in ram
	
	copy_pkgbuild_single "glibc" "$_AXE_RAM_BUILD_DIR"
	if [[ $? -eq 0 ]]; then
		cd "$_AXE_RAM_BUILD_DIR/glibc"
		_axe_pkg_flags_glibc=$(sed '/^\#/d' '/etc/makepkg.conf' | grep -m 1 'CFLAGS=' | sed 's/\"//g')
		
		if [[ $2 == "--check" ]]; then
			makepkg --asroot --noconfirm --check -csf
			_axe_error_return_glibc=$?
		else
			makepkg --asroot --noconfirm -csf
			_axe_error_return_glibc=$?
		fi
			
		if [[ $_axe_error_return_glibc -eq 0 ]]; then
			case $1 in
				"install") pacman -U --noconfirm *.pkg.tar.xz 
							if [[ $? -eq 0 ]]; then
								echo -e "BUILT AND INSTALLED glibc pass $_AXE_GLIBC_REP $(date) from $_AXE_RAM_BUILD_DIR \n $_axe_pkg_flags_glibc" >> "$_AXE_LOGS_DIR/toolchain_build_log"
								axe_block "End of build glibc pass $_AXE_GLIBC_REP"
								let _AXE_GLIBC_REP=$_AXE_GLIBC_REP+1
								_axe_local_return_glibc=2
							else
								axe_fuck "glibc pass $_AXE_GLIBC_REP FAILED to install even when asked to"
								echo "glibc failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
								_axe_local_return_glibc=6
							fi ;;
				"export") cp -pf  $_AXE_RAM_BUILD_DIR/glibc/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
							if [[ $? -eq 0 ]]; then
								echo -e "BUILT AND EXPORTED ONLY glibc pass $_AXE_GLIBC_REP $(date) from $_AXE_RAM_BUILD_DIR \n $_axe_pkg_flags_glibc" >> "$_AXE_LOGS_DIR/toolchain_build_log"
								echo -e "BUILT AND EXPORTED ONLY glibc pass $_AXE_GLIBC_REP $(date) from $_AXE_RAM_BUILD_DIR \n $_axe_pkg_flags_glibc" > "$_AXE_BINARY_EXPORT_DIR/glibc$_AXE_MULTILIB_SUFFIX-$(date +%Y%m%d-%H%M%S).datestamp"
								axe_block "End of build glibc pass $_AXE_GLIBC_REP"
								let _AXE_GLIBC_REP=$_AXE_GLIBC_REP+1
								_axe_local_return_glibc=2
							else
								axe_fuck "glibc pass $_AXE_GLIBC_REP FAILED FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
								_axe_local_return_glibc=7
							fi ;;
				"install-export") pacman -U --noconfirm *.pkg.tar.xz
							if [[ $? -eq 0 ]]; then 
								cp -pf  $_AXE_RAM_BUILD_DIR/glibc/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
								if [[ $? -eq 0 ]]; then
									echo -e "BUILT AND INSTALLED AND EXPORTED glibc pass $_AXE_GLIBC_REP $(date) from $_AXE_RAM_BUILD_DIR \n $_axe_pkg_flags_glibc" >> "$_AXE_LOGS_DIR/toolchain_build_log"
									echo -e "BUILT AND INSTALLED AND EXPORTED glibc pass $_AXE_GLIBC_REP $(date) from $_AXE_RAM_BUILD_DIR \n $_axe_pkg_flags_glibc" > "$_AXE_BINARY_EXPORT_DIR/glibc$_AXE_MULTILIB_SUFFIX-$(date +%Y%m%d-%H%M%S).datestamp"
									axe_block "End of build glibc pass $_AXE_GLIBC_REP"
									let _AXE_GLIBC_REP=$_AXE_GLIBC_REP+1
									_axe_local_return_glibc=2
								else
									axe_fuck "glibc pass $_AXE_GLIBC_REP FAILED FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
									_axe_local_return_glibc=7
								fi
							else
								axe_fuck "glibc pass $_AXE_GLIBC_REP FAILED FAILED to install even when asked to"
								echo "glibc failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
								_axe_local_return_glibc=6
							fi ;;
			esac
			
			
		else
			echo "!!!!!!!!!!!build fails glibc pass $_AXE_GLIBC_REP $(date) failed from ram " >> "$_AXE_LOGS_DIR/toolchain_build_log"
			_axe_local_return_glibc=5
		fi
		cd /root/
		rm -rf "$_AXE_RAM_BUILD_DIR/glibc"
	else
		_axe_local_return_glibc=9
	fi
	
	
	
	
	if [[ $_axe_local_return_glibc -eq 5 ]]; then 
	
	#ok build failed in ram lets try it on hdd
	axe_warn "ahhh shit glibc failed in ram, not necessarily disasterous could be your swap, going to build it on the HDD to make sure"
	
		copy_pkgbuild_single "glibc" "$_AXE_HDD_BUILD_DIR"
		if [[ $? -eq 0 ]]; then
	
		cd "$_AXE_HDD_BUILD_DIR/glibc"
		if [[ $2 == "--check" ]]; then
			makepkg --asroot --noconfirm --check -csf
			_axe_error_return_glibc=$?
		else
			makepkg --asroot --noconfirm -csf
			_axe_error_return_glibc=$?
		fi
			
		if [[ $_axe_error_return_glibc -eq 0 ]]; then
				case $1 in
				"install") pacman -U --noconfirm *.pkg.tar.xz 
							if [[ $? -eq 0 ]]; then
								echo -e "BUILT AND INSTALLED glibc pass $_AXE_GLIBC_REP $(date) from $_AXE_HDD_BUILD_DIR \n $_axe_pkg_flags_glibc" >> "$_AXE_LOGS_DIR/toolchain_build_log"
								axe_block "End of build glibc pass $_AXE_GLIBC_REP"
								let _AXE_GLIBC_REP=$_AXE_GLIBC_REP+1
								_axe_local_return_glibc=3
							else
								axe_fuck "glibc pass $_AXE_GLIBC_REP FAILED to install even when asked to"
								echo "glibc failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
								_axe_local_return_glibc=6
							fi ;;
				"export") cp -pf  $_AXE_HDD_BUILD_DIR/glibc/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
							if [[ $? -eq 0 ]]; then
								echo -e "BUILT AND EXPORTED ONLY glibc pass $_AXE_GLIBC_REP $(date) from $_AXE_HDD_BUILD_DIR \n $_axe_pkg_flags_glibc" >> "$_AXE_LOGS_DIR/toolchain_build_log"
								echo -e "BUILT AND EXPORTED ONLY glibc pass $_AXE_GLIBC_REP $(date) from $_AXE_HDD_BUILD_DIR \n $_axe_pkg_flags_glibc" > "$_AXE_BINARY_EXPORT_DIR/glibc$_AXE_MULTILIB_SUFFIX-$(date +%Y%m%d-%H%M%S).datestamp"
								axe_block "End of build glibc pass $_AXE_GLIBC_REP"
								let _AXE_GLIBC_REP=$_AXE_GLIBC_REP+1
								_axe_local_return_glibc=3
							else
								axe_fuck "glibc pass $_AXE_GLIBC_REP FAILED FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
								_axe_local_return_glibc=7
							fi ;;
				"install-export") pacman -U --noconfirm *.pkg.tar.xz
							if [[ $? -eq 0 ]]; then 
								cp -pf  $_AXE_HDD_BUILD_DIR/glibc/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
								if [[ $? -eq 0 ]]; then
									echo -e "BUILT AND INSTALLED AND EXPORTED glibc pass $_AXE_GLIBC_REP $(date) from $_AXE_HDD_BUILD_DIR \n $_axe_pkg_flags_glibc" >> "$_AXE_LOGS_DIR/toolchain_build_log"
									echo -e "BUILT AND INSTALLED AND EXPORTED glibc pass $_AXE_GLIBC_REP $(date) from $_AXE_HDD_BUILD_DIR \n $_axe_pkg_flags_glibc" > "$_AXE_BINARY_EXPORT_DIR/glibc$_AXE_MULTILIB_SUFFIX-$(date +%Y%m%d-%H%M%S).datestamp"
									axe_block "End of build glibc pass $_AXE_GLIBC_REP"
									let _AXE_GLIBC_REP=$_AXE_GLIBC_REP+1
									_axe_local_return_glibc=3
								else
									axe_fuck "glibc pass $_AXE_GLIBC_REP FAILED FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
									_axe_local_return_glibc=7
								fi
							else
								axe_fuck "glibc pass $_AXE_GLIBC_REP FAILED FAILED to install even when asked to"
								echo "glibc failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
								_axe_local_return_glibc=6
							fi ;;
				esac
	
			else
				echo "!!!!!!!!!!!build fails glibc pass $_AXE_GLIBC_REP $(date) failed from both ram and hdd" >> "$_AXE_LOGS_DIR/toolchain_build_log"
				_axe_local_return_glibc=5
			fi
			rm -rf "$_AXE_HDD_BUILD_DIR/glibc/"
		else
			_axe_local_return_glibc=9
		fi
	fi

	if [[ $_axe_local_return_glibc -eq 5 ]]; then 
		#ok lets try that again with MAKEOPTS  commented out
		#comment out MAKEFLAGS
		sed -i 's/MAKEFLAGS/#MAKEFLAGS/' "$_AXE_MAKEPKG_CONF_PATH"
		
		copy_pkgbuild_single "glibc" "$_AXE_HDD_BUILD_DIR"
		if [[ $? -eq 0 ]]; then
			cd "$_AXE_HDD_BUILD_DIR/glibc"
			if [[ $2 == "--check" ]]; then
				makepkg --asroot --noconfirm --check -csf
				_axe_error_return_glibc=$?
			else
				makepkg --asroot --noconfirm -csf
				_axe_error_return_glibc=$?
			fi
				
			if [[ $_axe_error_return_glibc -eq 0 ]]; then
				case $1 in
				"install") pacman -U --noconfirm *.pkg.tar.xz 
							if [[ $? -eq 0 ]]; then
								echo -e "BUILT AND INSTALLED glibc pass $_AXE_GLIBC_REP $(date) from $_AXE_HDD_BUILD_DIR--------- WITH MAKEOPTS COMMENTED OUT  \n $_axe_pkg_flags_glibc" >> "$_AXE_LOGS_DIR/toolchain_build_log"
								axe_block "End of build glibc pass $_AXE_GLIBC_REP"
								let _AXE_GLIBC_REP=$_AXE_GLIBC_REP+1
								_axe_local_return_glibc=4
							else
								axe_fuck "glibc pass $_AXE_GLIBC_REP FAILED to install even when asked to"
								echo "glibc failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
								_axe_local_return_glibc=6
							fi ;;
				"export") cp -pf  $_AXE_HDD_BUILD_DIR/glibc/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
							if [[ $? -eq 0 ]]; then
								echo -e "BUILT AND EXPORTED ONLY glibc pass $_AXE_GLIBC_REP $(date) from $_AXE_HDD_BUILD_DIR--------- WITH MAKEOPTS COMMENTED OUT  \n $_axe_pkg_flags_glibc" >> "$_AXE_LOGS_DIR/toolchain_build_log"
								echo -e "BUILT AND EXPORTED ONLY glibc pass $_AXE_GLIBC_REP $(date) from $_AXE_HDD_BUILD_DIR--------- WITH MAKEOPTS COMMENTED OUT \n $_axe_pkg_flags_glibc" > "$_AXE_BINARY_EXPORT_DIR/glibc$_AXE_MULTILIB_SUFFIX-$(date +%Y%m%d-%H%M%S).datestamp"
								axe_block "End of build glibc pass $_AXE_GLIBC_REP"
								let _AXE_GLIBC_REP=$_AXE_GLIBC_REP+1
								_axe_local_return_glibc=4
							else
								axe_fuck "glibc pass $_AXE_GLIBC_REP FAILED FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
								_axe_local_return_glibc=7
							fi ;;
				"install-export") pacman -U --noconfirm *.pkg.tar.xz
							if [[ $? -eq 0 ]]; then 
								cp -pf  $_AXE_HDD_BUILD_DIR/glibc/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
								if [[ $? -eq 0 ]]; then
									echo -e "BUILT AND INSTALLED AND EXPORTED glibc pass $_AXE_GLIBC_REP $(date) from $_AXE_HDD_BUILD_DIR--------- WITH MAKEOPTS COMMENTED OUT  \n $_axe_pkg_flags_glibc" >> "$_AXE_LOGS_DIR/toolchain_build_log"
									echo -e "BUILT AND INSTALLED AND EXPORTED glibc pass $_AXE_GLIBC_REP $(date) from $_AXE_HDD_BUILD_DIR--------- WITH MAKEOPTS COMMENTED OUT \n $_axe_pkg_flags_glibc" > "$_AXE_BINARY_EXPORT_DIR/glibc$_AXE_MULTILIB_SUFFIX-$(date +%Y%m%d-%H%M%S).datestamp"
									axe_block "End of build glibc pass $_AXE_GLIBC_REP"
									let _AXE_GLIBC_REP=$_AXE_GLIBC_REP+1
									_axe_local_return_glibc=4
								else
									axe_fuck "glibc pass $_AXE_GLIBC_REP FAILED FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
									_axe_local_return_glibc=7
								fi
							else
								axe_fuck "glibc pass $_AXE_GLIBC_REP FAILED FAILED to install even when asked to"
								echo "glibc failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
								_axe_local_return_glibc=6
							fi ;;
				esac
			else
				echo "!!!!!!!!!!!build fails glibc pass $_AXE_GLIBC_REP $(date) failed from both ram and hdd and with MAKEFLAGS commented out" >> "$_AXE_LOGS_DIR/toolchain_build_log"
				mkdir -pv "$_AXE_FAIL_BUILD_LOGS_DIR/glibc/"
				cp -p $_AXE_HDD_BUILD_DIR/glibc/*.log "$_AXE_FAIL_BUILD_LOGS_DIR/glibc/"
			fi
			cd /root/
			rm -rf "$_AXE_HDD_BUILD_DIR/glibc/"
			#uncomment MAKEFLAGS
			sed -i 's/#MAKEFLAGS/MAKEFLAGS/' "$_AXE_MAKEPKG_CONF_PATH"
		else
			_axe_local_return_glibc=9
		fi
	fi

			#Returns
			#0-4 good builds
			#0 o3 ram#######not used
			#1 o3hd#######not used
			#2 o2ram
			#3 o2hdd
			#4 o2jopts-off
			#5 failed to build
			#6 failed to install
			#7 failed to export
			#8 package was excluded because of check_pkg_tag check#######not used
			#9 failed to fetch

	return $_axe_local_return_glibc
}

function build_linux_api_headers()
{
	axe_block "Start of build_linux_api_headers"
	
		
	#first input argument
		#export ... do not install packages, copy them to local repo and export entire pkgbuild dir
		#install ... do not export packages just install them
		#install-export ..... both export the packages and install them
		
	#second input argument weather to run checks
		#--check ... apply checks
		#--no-check ...or blank... ... do not apply checks
		
	local VAR="_axe_local_return_lah"
	local VAR="_axe_pkg_flags_lah"
	local VAR="_axe_error_return_lah"
	_axe_error_return_lah=0
	_axe_pkg_flags_lah=""
	_axe_local_return_lah=0
		

		
	#build 	linux-api-headers, from tmp dir
	
	copy_pkgbuild_single "linux-api-headers" "$_AXE_RAM_BUILD_DIR"
	if [[ $? -eq 0 ]]; then
		cd "$_AXE_RAM_BUILD_DIR/linux-api-headers"
		_axe_pkg_flags_lah=$(sed '/^\#/d' '/etc/makepkg.conf' | grep -m 1 'CFLAGS=' | sed 's/\"//g')
		
		if [[ $2 == "--check" ]]; then
			makepkg --asroot --noconfirm --check -csf
			_axe_error_return_lah=$?
		else
			makepkg --asroot --noconfirm -csf
			_axe_error_return_lah=$?
		fi
			
		if [[ $_axe_error_return_lah -eq 0 ]]; then
			case $1 in
				"install") pacman -U --noconfirm *.pkg.tar.xz 
							if [[ $? -eq 0 ]]; then
								echo -e "BUILT AND EXPORTED ONLY linux-api-headers $(date) from $_AXE_RAM_BUILD_DIR \n $_axe_pkg_flags_lah" >> "$_AXE_LOGS_DIR/toolchain_build_log"
								_axe_local_return_lah=2
							else
								axe_fuck "linux-api-headers FAILED to install even when asked to"
								echo "linux-api-headers failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
								_axe_local_return_lah=6
							fi ;;
				"export") cp -pf  $_AXE_RAM_BUILD_DIR/linux-api-headers/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
							if [[ $? -eq 0 ]]; then
								echo -e "BUILT AND EXPORTED ONLY linux-api-headers $(date) from $_AXE_RAM_BUILD_DIR \n $_axe_pkg_flags_lah" >> "$_AXE_LOGS_DIR/toolchain_build_log"
								echo -e "BUILT AND EXPORTED ONLY linux-api-headers $(date) from $_AXE_RAM_BUILD_DIR \n $_axe_pkg_flags_lah" > "$_AXE_BINARY_EXPORT_DIR/linux-api-headers$_AXE_MULTILIB_SUFFIX-$(date +%Y%m%d-%H%M%S).datestamp"
								_axe_local_return_lah=2
							else
								axe_fuck "linux-api-headers FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
								_axe_local_return_lah=7
							fi ;;
				"install-export") pacman -U --noconfirm *.pkg.tar.xz
							if [[ $? -eq 0 ]]; then 
								cp -pf  $_AXE_RAM_BUILD_DIR/linux-api-headers/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
								if [[ $? -eq 0 ]]; then
									echo -e "BUILT AND INSTALLED AND EXPORTED linux-api-headers $(date) from $_AXE_RAM_BUILD_DIR \n $_axe_pkg_flags_lah" >> "$_AXE_LOGS_DIR/toolchain_build_log"
									echo -e "BUILT AND INSTALLED AND EXPORTED linux-api-headers $(date) from $_AXE_RAM_BUILD_DIR \n $_axe_pkg_flags_lah" > "$_AXE_BINARY_EXPORT_DIR/linux-api-headers$_AXE_MULTILIB_SUFFIX-$(date +%Y%m%d-%H%M%S).datestamp"
									_axe_local_return_lah=2
								else
									axe_fuck "linux-api-headers FAILED to copy to $_AXE_BINARY_EXPORT_DIR"
									_axe_local_return_lah=7
								fi
							else
								axe_fuck "linux-api-headers FAILED to install even when asked to"
								echo "linux-api-headers" >> "$_AXE_DIR/build_fail_to_install.list"
								_axe_local_return_lah=6
							fi ;;
			esac

		else
			echo "!!!!!!!!!!!build fails linux-api-headers pass1 $(date)" >> "$_AXE_LOGS_DIR/toolchain_build_log"
			mkdir -pv "$_AXE_FAIL_BUILD_LOGS_DIR/linux-api-headers/"
			cp -p $_AXE_RAM_BUILD_DIR/linux-api-headers/*.log "$_AXE_FAIL_BUILD_LOGS_DIR/linux-api-headers/"
			_axe_local_return_lah=5		
		fi
		cd /root/
		rm -fr "$_AXE_RAM_BUILD_DIR/linux-api-headers"
	else
		_axe_local_return_lah=9
	fi

			#Returns
			#0-4 good builds
			#0 o3 ram#######not used
			#1 o3hd#######not used
			#2 o2ram
			#3 o2hdd#######not used
			#4 o2jopts-off#######not used
			#5 failed to build
			#6 failed to install
			#7 failed to export
			#8 package was excluded because of check_pkg_tag check#######not used
			#9 failed to fetch
			
	axe_block "end of build_linux_api_headers"
	return $_axe_local_return_lah
}

# higher build functions ****(**********************************************************************************************************************************
#***************************************************************************************************************************************************************

function build_toolchain()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of build_toolchain"
	
	local VAR="_axe_toolchain_not_ok"
	local VAR="_axe_stage_tmp"
	local VAR="_axe_toolchain_test"
	_axe_toolchain_test="--nocheck"
	_axe_stage_tmp=0
	_axe_toolchain_not_ok=0
	
	toolchain_tag_check > /dev/null
	if [[ $? -eq 1 ]]; then
		axe_info "ok about to build the toolchain"
		axe_info "but first please decide on the testing i should do, please note full tests are totally optional, i offer the choice for the paranoid amongst you"
		axe_info "press${_AXE_Y} to apply full tests to the toolchain ${_AXE_ANY_OTHER_KEY} to apply minimal tests to the toolchain"
		read -s -n1 _AXE_TMP_CHAR
		axe_info "you pressed $_AXE_TMP_CHAR"
		if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
			_axe_toolchain_test="--check"
		fi
		
	
		axe_info "linux-api-headers -> glibc -> binutils$_AXE_MULTILIB_SUFFIX -> gcc$_AXE_MULTILIB_SUFFIX ->libtool$_AXE_MULTILIB_SUFFIX -> binutils$_AXE_MULTILIB_SUFFIX -> glibc -> gcc$_AXE_MULTILIB_SUFFIX -> libtool$_AXE_MULTILIB_SUFFIX"
		axe_info "this is a fucking long build so piss off, get a coffe, roll a spliff and check on me in a couple of hours"
		
		echo "starting toolchain build $(date)" >> "$_AXE_LOGS_DIR/toolchain_build_log"
		
		#toolchain is stage 3 by default
		_axe_stage_tmp=$_AXE_STAGE
		export _AXE_STAGE=3
		#toolchain has own packager
		
		if [[ "$_AXE_MULTILIB_SUFFIX" == "-multilib" ]]; then
			sed -i "s/PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB\"/" "$_AXE_MAKEPKG_CONF_PATH"
			if [[ $? -eq 0 ]]; then
				sed -i "s/PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB\"/" "$_AXE_DIR/makepkg.conf.axemodified"
				if [[ ! $? -eq 0 ]]; then
					axe_fuck "toolchain packager tag--- $_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB in $_AXE_DIR/makepkg.conf.axemodified ----failed application "
					_axe_toolchain_not_ok=5
					any_key
				fi
			else
				axe_fuck "toolchain packager tag--- $_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB in $_AXE_MAKEPKG_CONF_PATH ----failed application "
				_axe_toolchain_not_ok=4
				any_key
			fi
		else
			sed -i "s/PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_TOOLCHAIN\"/" "$_AXE_MAKEPKG_CONF_PATH"
			if [[ $? -eq 0 ]]; then
				sed -i "s/PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_TOOLCHAIN\"/" "$_AXE_DIR/makepkg.conf.axemodified"
				if [[ ! $? -eq 0 ]]; then
					axe_fuck "toolchain packager tag--- $_AXE_PACKAGER_NAME_TOOLCHAIN in $_AXE_DIR/makepkg.conf.axemodified ----failed application "
					_axe_toolchain_not_ok=5
					any_key
				fi
			else
				axe_fuck "toolchain packager tag--- $_AXE_PACKAGER_NAME_TOOLCHAIN in $_AXE_MAKEPKG_CONF_PATH ----failed application "
				_axe_toolchain_not_ok=4
				any_key
			fi
		fi
		
		if [[ $_axe_toolchain_not_ok -eq 0 ]]; then
			build_linux_api_headers "install-export"
			if [[ $? -gt 5 ]]; then
				reset_toolchain 
				if [[ $? -eq 0 ]]; then
					_axe_toolchain_not_ok=1
				else
					_axe_toolchain_not_ok=2
				fi
			fi
		fi
		
		if [[ $_axe_toolchain_not_ok -eq 0 ]]; then
			build_glibc "install"
			if [[ $? -gt 5 ]]; then
				reset_toolchain
				if [[ $? -eq 0 ]]; then
					_axe_toolchain_not_ok=1
				else
					_axe_toolchain_not_ok=2
				fi
			fi
		fi
		
		if [[ $_axe_toolchain_not_ok -eq 0 ]]; then
			build_binutils "install"
			if [[ $? -gt 5 ]]; then
				reset_toolchain
				if [[ $? -eq 0 ]]; then
					_axe_toolchain_not_ok=1
				else
					_axe_toolchain_not_ok=2
				fi
			fi
		fi
		
		if [[ $_axe_toolchain_not_ok -eq 0 ]]; then
			build_gcc "install"
			if [[ $? -gt 5 ]]; then
				reset_toolchain
				if [[ $? -eq 0 ]]; then
					_axe_toolchain_not_ok=1
				else
					_axe_toolchain_not_ok=2
				fi
			fi
		fi
		
		if [[ $_axe_toolchain_not_ok -eq 0 ]]; then
			build_libtool "install"
			if [[ $? -gt 5 ]]; then
				reset_toolchain
				if [[ $? -eq 0 ]]; then
					_axe_toolchain_not_ok=1
				else
					_axe_toolchain_not_ok=2
				fi
			fi
		fi
		
		if [[ $_axe_toolchain_not_ok -eq 0 && "$_AXE_MULTILIB_SUFFIX" ]]; then
			build_libltdl
			if [[ $? -gt 5 ]]; then
				reset_toolchain
				if [[ $? -eq 0 ]]; then
					_axe_toolchain_not_ok=1
				else
					_axe_toolchain_not_ok=2
				fi
			fi
		fi
	
		if [[ $_axe_toolchain_not_ok -eq 0 ]]; then
			build_binutils "install-export" $_axe_toolchain_test
			if [[ $? -gt 5 ]]; then
				reset_toolchain
				if [[ $? -eq 0 ]]; then
					_axe_toolchain_not_ok=1
				else
					_axe_toolchain_not_ok=2
				fi
			fi
		fi
	
		if [[ $_axe_toolchain_not_ok -eq 0 ]]; then
			build_glibc "install-export" $_axe_toolchain_test
			if [[ $? -gt 5 ]]; then
				reset_toolchain
				if [[ $? -eq 0 ]]; then
					_axe_toolchain_not_ok=1
				else
					_axe_toolchain_not_ok=2
				fi
			fi
		fi
		

		if [[ $_axe_toolchain_not_ok -eq 0 ]]; then
			build_axe_pkgbuild "zlib" --install --nocon "$_AXE_PKGBUILD_DIR" "$_AXE_OPT_TYPE" --nofail --nosuc --notag --nocheck --toolchain
			if [[ $? -eq 5 || $? -eq 6 || $? -eq 7 || $? -eq 9 ]]; then
				reset_toolchain
				if [[ $? -eq 0 ]]; then
					_axe_toolchain_not_ok=1
				else
					_axe_toolchain_not_ok=2
				fi
			fi
		fi
		
		if [[ $_axe_toolchain_not_ok -eq 0 ]]; then
			build_axe_pkgbuild "file" --install --nocon "$_AXE_PKGBUILD_DIR" "$_AXE_OPT_TYPE" --nofail --nosuc --notag --nocheck --toolchain
			if [[ $? -eq 5 || $? -eq 6 || $? -eq 7 || $? -eq 9 ]]; then
				reset_toolchain
				if [[ $? -eq 0 ]]; then
					_axe_toolchain_not_ok=1
				else
					_axe_toolchain_not_ok=2
				fi
			fi
		fi
		
		if [[ $_axe_toolchain_not_ok -eq 0 ]]; then
			build_axe_pkgbuild "gmp" --install --nocon "$_AXE_PKGBUILD_DIR" "$_AXE_OPT_TYPE" --nofail --nosuc --notag $_axe_toolchain_test --toolchain
			if [[ $? -eq 5 || $? -eq 6 || $? -eq 7 || $? -eq 9 ]]; then
				reset_toolchain
				if [[ $? -eq 0 ]]; then
					_axe_toolchain_not_ok=1
				else
					_axe_toolchain_not_ok=2
				fi
			fi
		fi
		
		if [[ $_axe_toolchain_not_ok -eq 0 ]]; then
			build_axe_pkgbuild "mpfr" --install --nocon "$_AXE_PKGBUILD_DIR" "$_AXE_OPT_TYPE" --nofail --nosuc --notag $_axe_toolchain_test --toolchain
			if [[ $? -eq 5 || $? -eq 6 || $? -eq 7 || $? -eq 9 ]]; then
				reset_toolchain
				if [[ $? -eq 0 ]]; then
					_axe_toolchain_not_ok=1
				else
					_axe_toolchain_not_ok=2
				fi
			fi
		fi
		
		if [[ $_axe_toolchain_not_ok -eq 0 ]]; then
			build_axe_pkgbuild "libmpc" --install --nocon "$_AXE_PKGBUILD_DIR" "$_AXE_OPT_TYPE" --nofail --nosuc --notag $_axe_toolchain_test --toolchain
			if [[ $? -eq 5 || $? -eq 6 || $? -eq 7 || $? -eq 9 ]]; then
				reset_toolchain
				if [[ $? -eq 0 ]]; then
					_axe_toolchain_not_ok=1
				else
					_axe_toolchain_not_ok=2
				fi
			fi
		fi
		
		if [[ $_axe_toolchain_not_ok -eq 0 ]]; then
			build_axe_pkgbuild "attr" --install --nocon "$_AXE_PKGBUILD_DIR" "$_AXE_OPT_TYPE" --nofail --nosuc --notag $_axe_toolchain_test --toolchain
			if [[ $? -eq 5 || $? -eq 6 || $? -eq 7 || $? -eq 9 ]]; then
				reset_toolchain
				if [[ $? -eq 0 ]]; then
					_axe_toolchain_not_ok=1
				else
					_axe_toolchain_not_ok=2
				fi
			fi
		fi
		
		if [[ $_axe_toolchain_not_ok -eq 0 ]]; then
			build_axe_pkgbuild "acl" --install --nocon "$_AXE_PKGBUILD_DIR" "$_AXE_OPT_TYPE" --nofail --nosuc --notag $_axe_toolchain_test --toolchain
			if [[ $? -eq 5 || $? -eq 6 || $? -eq 7 || $? -eq 9 ]]; then
				reset_toolchain
				if [[ $? -eq 0 ]]; then
					_axe_toolchain_not_ok=1
				else
					_axe_toolchain_not_ok=2
				fi
			fi
		fi
		
		if [[ $_axe_toolchain_not_ok -eq 0 ]]; then
			build_axe_pkgbuild "isl" --install --nocon "$_AXE_PKGBUILD_DIR" "$_AXE_OPT_TYPE" --nofail --nosuc --notag $_axe_toolchain_test --toolchain
			if [[ $? -eq 5 || $? -eq 6 || $? -eq 7 || $? -eq 9 ]]; then
				reset_toolchain
				if [[ $? -eq 0 ]]; then
					_axe_toolchain_not_ok=1
				else
					_axe_toolchain_not_ok=2
				fi
			fi
		fi
		
		if [[ $_axe_toolchain_not_ok -eq 0 ]]; then
			build_axe_pkgbuild "cloog" --install --nocon "$_AXE_PKGBUILD_DIR" "$_AXE_OPT_TYPE" --nofail --nosuc --notag --nocheck --toolchain
			if [[ $? -eq 5 || $? -eq 6 || $? -eq 7 || $? -eq 9 ]]; then
				reset_toolchain
				if [[ $? -eq 0 ]]; then
					_axe_toolchain_not_ok=1
				else
					_axe_toolchain_not_ok=2
				fi
			fi
		fi
		
		if [[ $_axe_toolchain_not_ok -eq 0 ]]; then
			build_axe_pkgbuild "ppl" --install --nocon "$_AXE_PKGBUILD_DIR" "$_AXE_OPT_TYPE" --nofail --nosuc --notag --nocheck --toolchain
			if [[ $? -eq 5 || $? -eq 6 || $? -eq 7 || $? -eq 9 ]]; then
				reset_toolchain
				if [[ $? -eq 0 ]]; then
					_axe_toolchain_not_ok=1
				else
					_axe_toolchain_not_ok=2
				fi
			fi
		fi
		
		if [[ $_axe_toolchain_not_ok -eq 0 ]]; then
			build_gcc "install-export" $_axe_toolchain_test
			if [[ $? -gt 5 ]]; then
				reset_toolchain
				if [[ $? -eq 0 ]]; then
					_axe_toolchain_not_ok=1
				else
					_axe_toolchain_not_ok=2
				fi
			fi
		fi
		
		if [[ $_axe_toolchain_not_ok -eq 0 ]]; then
			build_libtool "install-export" $_axe_toolchain_test
			if [[ $? -gt 5 ]]; then
				reset_toolchain
				if [[ $? -eq 0 ]]; then
					_axe_toolchain_not_ok=1
				else
					_axe_toolchain_not_ok=2
				fi
			fi
		fi

		
		if [[ $_axe_toolchain_not_ok -eq 0 && "$_AXE_MULTILIB_SUFFIX" ]]; then
			build_libltdl
			if [[ $? -gt 5 ]]; then
				reset_toolchain
				if [[ $? -eq 0 ]]; then
					_axe_toolchain_not_ok=1
				else
					_axe_toolchain_not_ok=2
				fi
			fi
		fi
		
		#reset axe stage for next builds
		_AXE_STAGE=$_axe_stage_tmp
		export _AXE_STAGE
		# back to stage n packager
		if [[ $_AXE_STAGE -eq 1 ]]; then
			sed -i "s/PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_STAGE1_BINARIES\"/" "$_AXE_MAKEPKG_CONF_PATH"
			if [[ $? -eq 0 ]]; then
				sed -i "s/PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_STAGE1_BINARIES\"/" "$_AXE_DIR/makepkg.conf.axemodified"
				if [[ ! $? -eq 0 ]]; then
					axe_fuck "packager tag--- refused to reset to $_AXE_PACKAGER_NAME_STAGE1_BINARIES in $_AXE_DIR/makepkg.conf.axemodified"
					_axe_toolchain_not_ok=7
					any_key
				fi
			else
				axe_fuck "packager tag--- refused to reset to $_AXE_PACKAGER_NAME_STAGE1_BINARIES in $_AXE_MAKEPKG_CONF_PATH"
				_axe_toolchain_not_ok=6
				any_key
			fi
		fi
		
		if [[ $_AXE_STAGE -eq 2 ]]; then
			sed -i "s/PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_STAGE2_BINARIES\"/" "$_AXE_MAKEPKG_CONF_PATH"
			if [[ $? -eq 0 ]]; then
				sed -i "s/PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_STAGE2_BINARIES\"/" "$_AXE_DIR/makepkg.conf.axemodified"
				if [[ ! $? -eq 0 ]]; then
					axe_fuck "packager tag--- refused to reset to $_AXE_PACKAGER_NAME_STAGE2_BINARIES in $_AXE_DIR/makepkg.conf.axemodified"
					_axe_toolchain_not_ok=9
					any_key
				fi
			else
				axe_fuck "packager tag--- refused to reset to $_AXE_PACKAGER_NAME_STAGE2_BINARIES in $_AXE_MAKEPKG_CONF_PATH"
				_axe_toolchain_not_ok=8
				any_key
			fi
		fi
		
		if [[ $_AXE_STAGE -eq 3 ]]; then
			sed -i "s/PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_STAGE3_BINARIES\"/" "$_AXE_MAKEPKG_CONF_PATH"
			if [[ $? -eq 0 ]]; then
				sed -i "s/PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_STAGE3_BINARIES\"/" "$_AXE_DIR/makepkg.conf.axemodified"
				if [[ ! $? -eq 0 ]]; then
					axe_fuck "packager tag--- refused to reset to $_AXE_PACKAGER_NAME_STAGE3_BINARIES in $_AXE_DIR/makepkg.conf.axemodified"
					_axe_toolchain_not_ok=11
					any_key
				fi
			else
				axe_fuck "packager tag--- refused to reset to $_AXE_PACKAGER_NAME_STAGE3_BINARIES in $_AXE_MAKEPKG_CONF_PATH"
				_axe_toolchain_not_ok=10
				any_key
			fi
		fi
		
	
		if [[ $_axe_toolchain_not_ok -eq 0 ]]; then
			mask_toolchain_upgrades
		fi


	else
	
		axe_info "toolchain already built skipping"
		_axe_toolchain_not_ok=3
	fi
	
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of build_toolchain"
	return $_axe_toolchain_not_ok
}

function build_list()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of  build_list"
	
# first argument
	#list to work on
	#xxxx   /path/to/xxx.list

	
	local VAR="_axe_build_overide"
	local VAR="_axe_build_problem"
	local VAR="_axe_pkgname_bl"
	local VAR="_axe_line_number"
	
	_axe_line_number=1
	_axe_pkgname_bl=""
	_axe_build_problem=0

	axe_info "ok about to build list $1"


	echo "" "$_AXE_DIR/fails_display.list"
	
	#clean list
	# delete comments | delete emty lines | delete everything after first space > to file
	sed '/^\#/d' "$1" | grep -v "^$" | sed 's/ .*//' > "$_AXE_DIR/working_on.list"
	
	sed '/^\#/d' "$1" | grep -v "^$" > "$_AXE_DIR/working_on_overide.list"
	
	
	for _axe_pkgname_bl in $(cat "$_AXE_DIR/working_on.list"); do

		_axe_build_overide=($(sed $_axe_line_number'q;d' "$_AXE_DIR/working_on_overide.list" | sed "s/$_axe_pkgname_bl //"))
		
		let _axe_line_number=$_axe_line_number+1

		if [[ $_axe_build_overide ]]; then
			axe_info "building $_axe_pkgname_bl in overide mode with the following flag array ${_axe_build_overide[0]} ${_axe_build_overide[1]} ${_axe_build_overide[2]} ${_axe_build_overide[3]} ${_axe_build_overide[4]} ${_axe_build_overide[5]} ${_axe_build_overide[6]} ${_axe_build_overide[7]} ${_axe_build_overide[8]}"
			build_axe_pkgbuild "$_axe_pkgname_bl" "${_axe_build_overide[0]}" "${_axe_build_overide[1]}" "${_axe_build_overide[2]}" "${_axe_build_overide[3]}" "${_axe_build_overide[4]}" "${_axe_build_overide[5]}" "${_axe_build_overide[6]}" "${_axe_build_overide[7]}" "${_axe_build_overide[8]}"
			case $? in				
				5) echo "BUILD FAIL ----------------- $_axe_pkgname_bl" >> "$_AXE_DIR/fails_display.list" && _axe_build_problem=1 ;;
				6) echo "INSTALL FAIL ----------------- $_axe_pkgname_bl" >> "$_AXE_DIR/fails_display.list" && _axe_build_problem=1  ;;
				7) echo "EXPORT FAIL ----------------- $_axe_pkgname_bl" >> "$_AXE_DIR/fails_display.list" && _axe_build_problem=1  ;;
				9) echo "FIND FAIL ----------------- $_axe_pkgname_bl" >> "$_AXE_DIR/fails_display.list" && _axe_build_problem=1  ;;
			esac
	
		else
			axe_info "building $_axe_pkgname_bl in standard mode with the following flag array --noinstall --nocon $_AXE_PKGBUILD_DIR $_AXE_OPT_TYPE  --fail --suc --notag"
			build_axe_pkgbuild "$_axe_pkgname_bl" --noinstall --nocon "$_AXE_PKGBUILD_DIR" "$_AXE_OPT_TYPE"  --fail --suc --notag --nocheck
			case $? in				
				5) echo "BUILD FAIL ----------------- $_axe_pkgname_bl" >> "$_AXE_DIR/fails_display.list" && _axe_build_problem=1 ;;
				6) echo "INSTALL FAIL ----------------- $_axe_pkgname_bl" >> "$_AXE_DIR/fails_display.list" && _axe_build_problem=1  ;;
				7) echo "EXPORT FAIL ----------------- $_axe_pkgname_bl" >> "$_AXE_DIR/fails_display.list" && _axe_build_problem=1  ;;
				9) echo "FIND FAIL ----------------- $_axe_pkgname_bl" >> "$_AXE_DIR/fails_display.list" && _axe_build_problem=1  ;;
			esac
		fi
		
		
	done
	
	rm -f "$_AXE_DIR/working_on.list"
	rm -f "$_AXE_DIR/working_on_overide.list"
	
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of of build_list"
	return $_axe_build_problem

}

function stage3_setup()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of stage3_setup"
	
	local VAR="_axe_return_s3s"
	_axe_return_s3s=0
	
	#copy what are now stage 2 binaries to their repo folder
	
	cp -pf $_AXE_BINARY_EXPORT_DIR/* "$_AXE_STAGE2_BINARY_REPO_DIR"
	if [[ $? -eq 0 ]]; then
		dir "$_AXE_STAGE2_BINARY_REPO_DIR" && axe_warn "please check your packages have been copied" && any_key
		pacman -Rs --noconfirm $(comm -23 <(pacman -Qeq|sort) <((for i in $(pacman -Qqg base); do pactree -ul $i; done)|sort -u|cut -d ' ' -f 1))
		if [[ $? -eq 0 ]]; then
			rm -f /var/cache/pacman/pkg/*
			rm -f $_AXE_PACMAN_CACHE_DIR/*
			
			update_repo_database "$_AXE_STAGE2_BINARY_REPO_DIR" "axest2bin"
			if [[ $? -eq 0 ]]; then
				mod_axe_repo_entries --st2
				if [[ $? -eq 0 ]]; then
					pacman -Su --needed --noconfirm
					if [[ $? -eq 0 ]]; then
						#switch over the packager name
						sed -i "s/PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_STAGE3_BINARIES\"/" "$_AXE_MAKEPKG_CONF_PATH"
						sed -i "s/PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_STAGE3_BINARIES\"/" "$_AXE_DIR/makepkg.conf.axemodified"
						axe_info "All stage 3 setup functions completed sucessfully"
					else
						axe_fuck "pacman failed upgrade check the output above" && _axe_return_s3s=1 && any_key
					fi
				else
					axe_fuck "mod_axe_repo_entries failed check the output above" && _axe_return_s3s=2 && any_key
				fi
			else
				axe_fuck "update_repo_database failed check the output above" && _axe_return_s3s=3 && any_key
			fi
		else
			axe_fuck "pacman opperation failed check the output above" && _axe_return_s3s=3 && any_key
		fi
	else
		axe_fuck "failed to copy stage 2 binaries to $_AXE_STAGE2_BINARY_REPO_DIR" && _axe_return_s3s=4 && any_key
	fi
			


	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of stage3_setup"
	return $_axe_return_s3s

}

function stage2_finalise()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of stage2_finalise"
	
	local VAR="_axe_return_s2f"
	
	_axe_return_s2f=0
	
		
	#copy what are now stage 2 binaries to their repo folder
	
	cp -pf $_AXE_BINARY_EXPORT_DIR/* "$_AXE_STAGE2_BINARY_REPO_DIR"
	if [[ $? -eq 0 ]]; then
		dir "$_AXE_STAGE2_BINARY_REPO_DIR" && axe_debug "please check your packages have been copied" && any_key
		pacman -Rs $(comm -23 <(pacman -Qeq|sort) <((for i in $(pacman -Qqg base); do pactree -ul $i; done)|sort -u|cut -d ' ' -f 1))
		if [[ $? -eq 0 ]]; then
			rm -f /var/cache/pacman/pkg/*
			rm -f $_AXE_PACMAN_CACHE_DIR/*
			update_repo_database "$_AXE_STAGE2_BINARY_REPO_DIR" "axest2bin"
			if [[ $? -eq 0 ]]; then
				mod_axe_repo_entries --st2
				if [[ $? -eq 0 ]]; then
					pacman -Su --needed --noconfirm
					if [[ $? -eq 0 ]]; then
						axe_info "All stage 2 finalise functions completed sucessfully"
					else
						axe_fuck "pacman system update failed check the output above" && _axe_return_s2f=1 && any_key
					fi
				else
					axe_fuck "mod_axe_repo_entries failed check the output above" && _axe_return_s2f=2 && any_key
				fi	
			else
				axe_fuck "update_repo_database failed check the output above" && _axe_return_s2f=3 && any_key
			fi		
		else
			axe_fuck "pacman opperation failed check the output above" && _axe_return_s2f=4 && any_key
		fi			
	else
		axe_fuck "failed to copy stage 2 binaries to $_AXE_STAGE2_BINARY_REPO_DIR" && _axe_return_s2f=5 && any_key
	fi


	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of stage2_finalise"
	return $_axe_return_s2f

}

function stage3_finalise()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of stage3_finalise"

	local VAR="_axe_return_s3f"
	_axe_return_s3f=0
		
	#copy what are now stage 3 binaries to their repo folder
	
	cd "$_AXE_BINARY_EXPORT_DIR"
	
	cp -pf $_AXE_BINARY_EXPORT_DIR/* "$_AXE_STAGE3_BINARY_REPO_DIR"
	if [[ $? -eq 0 ]]; then
		pacman -Rs $(comm -23 <(pacman -Qeq|sort) <((for i in $(pacman -Qqg base); do pactree -ul $i; done)|sort -u|cut -d ' ' -f 1))
		if [[ $? -eq 0 ]]; then
			rm -f /var/cache/pacman/pkg/*
			rm -f $_AXE_PACMAN_CACHE_DIR/*
			update_repo_database "$_AXE_STAGE3_BINARY_REPO_DIR" "axest3bin"
			if [[ $? -eq 0 ]]; then
				mod_axe_repo_entries --st3
				if [[ $? -eq 0 ]]; then
					pacman -Su --needed --noconfirm
					if [[ $? -eq 0 ]]; then
						axe_info "All stage 2 finalise functions completed sucessfully"
					else
						axe_fuck "pacman system update failed check the output above" && _axe_return_s3f=1 && any_key
					fi
				else
					axe_fuck "mod_axe_repo_entries failed check the output above" && _axe_return_s3f=2 && any_key
				fi	
			else
				axe_fuck "update_repo_database failed check the output above" && _axe_return_s3f=3 && any_key
			fi		
		else
			axe_fuck "pacman opperation failed check the output above" && _axe_return_s3f=4 && any_key
		fi			
	else
		axe_fuck "failed to copy stage 2 binaries to $_AXE_STAGE2_BINARY_REPO_DIR" && _axe_return_s3f=5 && any_key
	fi
			

	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of stage3_finalise"
	
	return $_axe_return_s3f

}

# main menu functions *******************************************************************************************************************************************
#***************************************************************************************************************************************************************

function get_git()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of get_git"
	
	local VAR="_axe_local_return_gg"
	_axe_local_return_gg=0
	
	#argument 1 git url
		# xxx git : giturl
	#argument 2 path to git directory
		# xxx /path/to/git
	

	
	if [[ ! -d $1 ]]; then
		
		axe_info "fetching git please wait this is a long download"
		git clone "$1" "$2"
		if [[ $? -eq 0 ]]; then
			axe_info "Git sucessfully downloaded"
			_axe_local_return_gg=0
		else
			axe_fuck "git has failed to download please check the code,your internet connection, or try again"
			_axe_local_return_gg=2
		fi

	
	else
		axe_info "git already downloaded you need to refresh instead"
		_axe_local_return_gg=1
	fi
	
	return $_axe_local_return_gg
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of get_git"
}

function refresh_git()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of refresh_git"
	
	local VAR="_axe_local_return_rg"
	_axe_local_return_rg=0

	#argument 1 path to git
		# xxx /path/to/copy/from
	
	if [[ -d $1 ]]; then
		cd "$1"
		axe_info "updating git please wait"
		git pull origin
		if [[ $? -eq 0 ]]; then
			axe_info "git sucessfully updated"
		else
			axe_fuck " git has failed to update please check the code, your internet connection or try again"
			_axe_local_return_rg=1
		fi

	else
		axe_info "git has not yet been downloaded please download before updating"
		_axe_local_return_rg=2
	fi
	
 	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of refresh_git"
	
	return $_axe_local_return_rg
	
}

function fill_pkgbuild_dir_from_usb()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of fill_pkgbuild_dir_from_usb"
	
	#argument 1 path to copy pkgbuilds to
		# xxx /path/to/copy/to
		
		
	local VAR="_axe_local_return_fpdfu"
	_axe_local_return_fpdfu=0
	
	axe_info "about to copy files from your usb stick, i expect to find the files in"
	axe_info "$_AXE_USB_STICK_MNT/pkgbuilds/<pkgbuild directories> for pkgbuild files and"
	axe_info "if the paths are different on your machine you need to ${_AXE_CTRLC} and either modify your machine or just modify my code"
	axe_info "my path is in the variables right at the top of my code listing , you cant miss it!"
	any_key
	
	
	if [[ ! -d "$_AXE_USB_STICK_MNT" ]]; then
		axe_info "creating usb mount dir $_AXE_USB_STICK_MNT"
		mkdir "$_AXE_USB_STICK_MNT"
	fi
	
	axe_info "mounting $_AXE_USB_STICK_DEVICE"
	mount -t vfat "$_AXE_USB_STICK_DEVICE" "$_AXE_USB_STICK_MNT"
	if [[ $? -eq 0 ]]; then
		axe_info "$_AXE_USB_STICK_DEVICE sucsessfully mounted to $_AXE_USB_STICK_MNT"
		
		if [[ -d "$_AXE_USB_STICK_MNT/$_AXE_USB_MAINTAINED_PKGBUILD_DIR" ]]; then
			axe_info "copying over input PKGBUILDS from $_AXE_USB_STICK_MNT/$_AXE_USB_MAINTAINED_PKGBUILD_DIR to $1"
			rm -fr $1/*
			cp -pfr $_AXE_USB_STICK_MNT/$_AXE_USB_MAINTAINED_PKGBUILD_DIR/* "$1"
			if [[ $? -eq 0 ]]; then
				wait
				axe_info "PKGBUILD dirs sucessfully copied"
				_axe_local_return_fpdfu=0
			else
				axe_fuck " something is wrong did not copy anything check sources in $_AXE_USB_STICK_MNT/$_AXE_USB_MAINTAINED_PKGBUILD_DIR"
				_axe_local_return_fpdfu=1
			fi
		else
			axe_fuck " $_AXE_USB_STICK_MNT/$_AXE_USB_MAINTAINED_PKGBUILD_DIR does not exist aborting"
			_axe_local_return_fpdfu=2
		fi
		axe_info "UNmounting $_AXE_USB_STICK_DEVICE"
		umount  "$_AXE_USB_STICK_MNT"
		if [[ $? -eq 0 ]]; then
			axe_info "$_AXE_USB_STICK_DEVICE sucsessfully UNmounted"
		else
			axe_fuck " failed in UNmounting $_AXE_USB_STICK_DEVICE which will still be active"
			_axe_local_return_fpdfu=3
		fi
		
	else
		axe_fuck " failed to mount$_AXE_USB_STICK_DEVICE to $_AXE_USB_STICK_MNT"
		_axe_local_return_fpdfu=4
	fi

	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of fill_pkgbuild_dir_from_usb"
	
	return $_axe_local_return_fpdfu
}

function version_check_pkgbuild_dir()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of version_check_pkgbuild_dir"

	#first argument is path to folder to check
		#xxx /path/to/folder
	#argument 2 integrity check overide
		# --noint ... no integ check
		# --int ... do integ check
	
	#reset list so we dont get confused over runs
	echo "" > "$_AXE_DIR/version_problems.list"
	#remove updatables from last run
	rm -fr $_AXE_DEV_UPDATE_EXPORT_DIR/*

	local VAR="_axe_process_problem"
	local VAR="_axe_version_problem"
	local VAR="_axe_older"
	local VAR="_axe_abs_location"
	local VAR="_axe_vercmp_return"
	local VAR="_axe_tag_rel"
	local VAR="_axe_pkgname_vc"
	local VAR="_axe_return_fs"
	local VAR="_axe_version_array_dir"
	local VAR="_axe_version_array_abs"
	local VAR="_axe_version_array_aur"
	local VAR="_axe_native_package"
	
	_axe_pkgname_vc=0
	_axe_version_problem=0
	_axe_process_problem=0
	_axe_older=0
	_axe_abs_location=""
	_axe_vercmp_return=0
	_axe_tag_rel=""
	_axe_return_fs=0
	
	abs
	
		#	_axe_abs_ver= ${_axe_version_array_abs[1]}
		#	_axe_abs_rel= ${_axe_version_array_abs[2]}
		#	_axe_dir_ver= "${_axe_version_array_dir[1]}"
		#	_axe_dir_rel= $_arch_rel = "${_axe_version_array_dir[3]}"
		#	_axe_dir_axe_rel= "${_axe_version_array_dir[4]}"
		#	axe native flag = "${_axe_version_array_dir[5]}"
		#	split package flag = "${_axe_version_array_dir[5]}"
		#	_axe_aur_ver  "${_axe_version_array_aur[1]}"
		#   _axe_aur_rel   "${_axe_version_array_aur[2]}"
			
			#output order of axe_get_vers 
				#$pkgname(0) 
				#$pkgver(1)  
				#$pkgrel(2) 
				#$_arch_rel(3)
				#$_axe_rel(4) / axe_native_rel (4)
				#axe native flag = "axis" / "arch" (5)
				#split package flag = "split" / "single" (6)
	
	cd $1
	
	find * -prune -type d > "$_AXE_DIR/version_check_pkgbuild_dir_working.list"
	
	cd /root/
	
	for _axe_pkgname_vc in $(cat "$_AXE_DIR/version_check_pkgbuild_dir_working.list"); do
	
		_axe_abs_location=""
		_axe_abs_location=$(find "/var/abs" -type d -name "$_axe_pkgname_vc")
	
		_axe_version_array_dir=($(axe_get_vers "$1/$_axe_pkgname_vc"))
	
		if [[ $_axe_abs_location ]]; then
		
			axe_info "$_axe_pkgname_vc found in ABS"
			axe_info "abs location for  $_axe_pkgname_vc is $_axe_abs_location"
		
			_axe_version_array_abs=($(axe_get_vers "$_axe_abs_location"))
			if [[ "${_axe_version_array_dir[0]}" == "$_axe_pkgname_vc" && "${_axe_version_array_abs[0]}" == "$_axe_pkgname_vc" ]]; then
			
		
				#						abs ver										abs rel                                       dir ver										dir rel
				if [[ ! "${_axe_version_array_abs[1]}" == "null"  &&  ! "${_axe_version_array_abs[2]}" == "null"  && ! "${_axe_version_array_dir[1]}" == "null" && ! "${_axe_version_array_dir[3]}" == "null" ]]; then
				
					axe_info "$_axe_pkgname_vc version from ABS is ${bldcyn} ${_axe_version_array_abs[1]}-${_axe_version_array_abs[2]}" 
					axe_info "$_axe_pkgname_vc version from $1 is ${bldcyn} ${_axe_version_array_dir[1]}-${_axe_version_array_dir[3]}" 
					axe_info "$_axe_pkgname_vc axe pkgrel from $1 is ${bldcyn} ${_axe_version_array_dir[4]}"
					
					_axe_vercmp_return=$(vercmp "${_axe_version_array_abs[1]}-${_axe_version_array_abs[2]}" "${_axe_version_array_dir[1]}-${_axe_version_array_dir[3]}")
					
					[[ $_axe_vercmp_return -eq 0 ]] && axe_info "versions are the same ${bldcyn} no action taken" 
					[[ $_axe_vercmp_return -lt 0 ]] && axe_info "$1 version is greater than ABS version ${bldcyn} no action taken" 
					if [[ $_axe_vercmp_return -gt 0 ]]; then
						_axe_version_problem=1
						axe_fuck "$_axe_pkgname_vc is out of date" 
						echo "+++++++++++++++++++++++++++++OLDER++++++++++++++++++++++++++++ $_axe_pkgname_vc from $1  is older than the ABS ABS VER=${_axe_version_array_abs[1]}-${_axe_version_array_abs[2]} DEV VER=${_axe_version_array_dir[1]}-${_axe_version_array_dir[3]}" >> "$_AXE_DIR/version_problems.list"
						find /var/abs -type d -name "$_axe_pkgname_vc" -exec cp -rpf {} "$_AXE_DEV_UPDATE_EXPORT_DIR" \; 2> /dev/null
						if [[ -d "$_AXE_DEV_UPDATE_EXPORT_DIR/$_axe_pkgname_vc" ]]; then 
							stamp_pkgbuild "$_AXE_DEV_UPDATE_EXPORT_DIR/$_axe_pkgname_vc"
							if [[ ! $? -eq 0 ]]; then 
								echo "+++++++++++++++++++++++++++++TAG++++++++++++++++++++++++++++ $_axe_pkgname_vc from $1  failed to accept axe pkgrel tag" >> "$_AXE_DIR/version_problems.list"
								axe_fuck " refused to accept axe pkgrel tag please check why " && any_key
								_axe_process_problem=1
							fi
						else
							axe_fuck "failed to find and copy  $_axe_pkgname_vc from the ABS ( which by the way is impossible )"
							_axe_process_problem=1
							any_key
						fi
					fi	
					
					if [[ $2 == "--int" ]]; then 
						cd "$1/$_axe_pkgname_vc"
						axe_info "applying integrity checks"
						makepkg --asroot --nobuild --noconfirm --clean --force --nodeps
						if [[ ! $? -eq 0 ]]; then 
							echo "+++++++++++++++++++++++++++++INTEGRITY CHECKS++++++++++++++++++++++++++++ $_axe_pkgname_vc from $1  failed integrity checks" >> "$_AXE_DIR/version_problems.list"
							axe_fuck "$_axe_pkgname_vc from $1  failed integrity checks, normally not serious but can be please check the output above" && any_key
							_axe_version_problem=1
							cd /root/
						else
							cd /root/
						fi
					fi
					
					#clean up
					rm -fr "$_AXE_DEV_UPDATE_EXPORT_DIR/$_axe_pkgname_vc/src"
					rm -fr "$_AXE_DEV_UPDATE_EXPORT_DIR/$_axe_pkgname_vc/pkg"
		
				else
					[[ "${_axe_version_array_abs[1]}" == "null" ]] && axe_fuck "canot obtain a version for $_axe_pkgname_vc from $_axe_abs_location/PKGBUILD"  && echo "+++++++++++++++++++++++++++++NO VERSION++++++++++++++++++++++++++++ $_axe_pkgname_vc did not provide a version from ABS " >> "$_AXE_DIR/version_problems.list"
					[[ "${_axe_version_array_dir[1]}" == "null" ]] && axe_fuck "canot obtain a version for $_axe_pkgname_vc from $1/$_axe_pkgname_vc/PKGBUILD" && echo "+++++++++++++++++++++++++++++NO VERSION++++++++++++++++++++++++++++ $_axe_pkgname_vc did not provide a version from $1 " >> "$_AXE_DIR/version_problems.list"
					[[ "${_axe_version_array_abs[2]}" == "null" ]] && axe_fuck "canot obtain a rel for $_axe_pkgname_vc from $_axe_abs_location/PKGBUILD"  && echo "+++++++++++++++++++++++++++++NO REL++++++++++++++++++++++++++++ $_axe_pkgname_vc did not provide a rel from ABS " >> "$_AXE_DIR/version_problems.list"
					[[ "${_axe_version_array_dir[3]}" == "null" ]] && axe_fuck "canot obtain a rel for $_axe_pkgname_vc from $1/$_axe_pkgname_vc/PKGBUILD" && echo "+++++++++++++++++++++++++++++NO REL++++++++++++++++++++++++++++ $_axe_pkgname_vc did not provide a rel from $1 " >> "$_AXE_DIR/version_problems.list"
					any_key
					_axe_process_problem=1
				fi
				
			else
				axe_fuck "returned value of axe_get_vers is incorrect it should be $_axe_pkgname_vc but returned ${_axe_version_array_dir[0]} or ${_axe_version_array_abs[0]}" && any_key
			fi
				
				
			
		else
			axe_info "$_axe_pkgname_vc not found in the ABS looking for it from AUR" 
			cd "$_AXE_RAM_BUILD_DIR"
			yaourt -G --noconfirm "$_axe_pkgname_vc"
			cd /root/
			if [[ -d "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_vc" ]]; then
				
				axe_info "$_axe_pkgname_vc found in AUR" 
				_axe_version_array_aur=($(axe_get_vers "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_vc"))
				
				#						aur ver										aur rel                                       dir ver										dir rel
				if [[ ! "${_axe_version_array_aur[1]}" == "null"  && ! "${_axe_version_array_aur[2]}" == "null"  && ! "${_axe_version_array_dir[1]}" == "null" && ! "${_axe_version_array_dir[3]}" == "null" ]]; then
				
					axe_info "$_axe_pkgname_vc version from $1 is ${bldcyn} ${_axe_version_array_dir[1]}-${_axe_version_array_dir[3]}" 
					axe_info "$_axe_pkgname_vc version from AUR is ${bldcyn} ${_axe_version_array_aur[1]}-${_axe_version_array_aur[2]}" 
					axe_info "$_axe_pkgname_vc native axe pkgrel from $1 is ${bldcyn} ${_axe_version_array_dir[4]}"
					axe_info "$_axe_pkgname_vc axe pkgrel from $1 is ${bldcyn} ${_axe_version_array_dir[4]}"
					
					_axe_vercmp_return=$(vercmp "${_axe_version_array_aur[1]}-${_axe_version_array_aur[2]}" "${_axe_version_array_dir[1]}-${_axe_version_array_dir[3]}")
					
					[[ $_axe_vercmp_return -eq 0 ]] && axe_info "versions are the same ${bldcyn} no action taken" 
					[[ $_axe_vercmp_return -lt 0 ]] && axe_info "$1 version is greater than AUR version ${bldcyn} no action taken" 
					if [[ $_axe_vercmp_return -gt 0 ]]; then
						axe_fuck "$_axe_pkgname_vc is out of date"
						_axe_version_problem=1
						echo "+++++++++++++++++++++++++++++OLDER++++++++++++++++++++++++++++ $_axe_pkgname_vc from $1  is older than the AUR AUR VER=${_axe_version_array_aur[1]}-${_axe_version_array_aur[2]} DEV VER=${_axe_version_array_dir[1]}-${_axe_version_array_dir[3]}" >> "$_AXE_DIR/version_problems.list"
						#apply axe tag 
						stamp_pkgbuild "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_vc"
						if [[ $? -eq 0 ]]; then 
							cp -fpr "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_vc" "$_AXE_DEV_UPDATE_EXPORT_DIR"
							if [[ $? -eq 0 ]]; then 
								axe_info "$_axe_pkgname_vc tagged and exported to $_AXE_DEV_UPDATE_EXPORT_DIR"
								rm -fr "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_vc"
							else
								axe_fuck "$_axe_pkgname_vc failed to move to $_AXE_DEV_UPDATE_EXPORT_DIR please check why !" && any_key
								rm -f "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_vc"
								_axe_process_problem=1
							fi
						else
							echo "+++++++++++++++++++++++++++++TAG++++++++++++++++++++++++++++ $_axe_pkgname_vc from $_AXE_RAM_BUILD_DIR/$_axe_pkgname_vc failed to accept axe pkgrel tag" >> "$_AXE_DIR/version_problems.list"
							axe_fuck "$_axe_pkgname_vc from $_AXE_RAM_BUILD_DIR/$_axe_pkgname_vc failed to accept axe pkgrel tag please check why !" && any_key
							_axe_process_problem=1
						fi
					fi
					
					if [[ $2 == "--int" ]]; then 
						cd "$1/$_axe_pkgname_vc"
						axe_info "applying integrity checks"
						makepkg --asroot --nobuild --noconfirm --clean --nodeps --force
						if [[ ! $? -eq 0 ]]; then 
							echo "+++++++++++++++++++++++++++++INTEGRITY CHECKS++++++++++++++++++++++++++++ $_axe_pkgname_vc from $1  failed integrity checks" >> "$_AXE_DIR/version_problems.list"
							axe_fuck " failed integrity checks normally my creators fuckup in git plese correct youself or have patience and try again" && any_key
							_axe_version_problem=1
							cd /root/
						else
							cd /root/
						fi
					fi
					
					
					#clean up
					rm -fr "$_AXE_DEV_UPDATE_EXPORT_DIR/$_axe_pkgname_vc/src"
					rm -fr "$_AXE_DEV_UPDATE_EXPORT_DIR/$_axe_pkgname_vc/pkg"
					
				else
					[[ "${_axe_version_array_aur[1]}" == "null" ]] && axe_fuck "canot obtain a version for $_axe_pkgname_vc from AUR"  && echo "+++++++++++++++++++++++++++++NO VERSION++++++++++++++++++++++++++++ $_axe_pkgname_vc did not provide a version from AUR" >> "$_AXE_DIR/version_problems.list"
					[[ "${_axe_version_array_dir[1]}" == "null" ]] && axe_fuck "canot obtain a version for $_axe_pkgname_vc from $1/$_axe_pkgname_vc/PKGBUILD" && echo "+++++++++++++++++++++++++++++NO VERSION++++++++++++++++++++++++++++ $_axe_pkgname_vc did not provide a version from $1 " >> "$_AXE_DIR/version_problems.list"
					[[ "${_axe_version_array_aur[2]}" == "null" ]] && axe_fuck "canot obtain a rel for $_axe_pkgname_vc from AUR"  && echo "+++++++++++++++++++++++++++++NO REL++++++++++++++++++++++++++++ $_axe_pkgname_vc did not provide a rel from AUR " >> "$_AXE_DIR/version_problems.list"
					[[ "${_axe_version_array_dir[3]}" == "null" ]] && axe_fuck "canot obtain a rel for $_axe_pkgname_vc from $1/$_axe_pkgname_vc/PKGBUILD" && echo "+++++++++++++++++++++++++++++NO REL++++++++++++++++++++++++++++ $_axe_pkgname_vc did not provide a rel from $1 " >> "$_AXE_DIR/version_problems.list"
					any_key
					_axe_process_problem=1
				fi
				
			else
				#check if pck is on axe native list
				if [[ "${_axe_version_array_dir[5]}" == 'axis' ]]; then
					axe_warn "$_axe_pkgname_vc not found but its an AXE native package hence keeping up to date is on you"
				else
					axe_fuck "$_axe_pkgname_vc does not exist in AUR in ABS and is not a axe native package !!!!!!!!!!!!"
					axe_fuck "native tag returns as ${_axe_version_array_dir[5]}" 
					echo "$_axe_pkgname_vc was not found in the ABS or AUR to make a version check, ignore this if  axe native package" >> "$_AXE_DIR/version_problems.list"
					any_key
					_axe_process_problem=1
				fi
			fi
			
		
		
		
		fi
	done
	
	#clean up
	rm -f "$_AXE_DIR/version_check_pkgbuild_dir_working.list"
	rm -f "$_AXE_DIR/maintained_pkgbuilds.list"
	
	
	[[ $_axe_process_problem -eq 0 && $_axe_version_problem -eq 0 ]] && _axe_return_fs=0
	[[ $_axe_process_problem -eq 0 && $_axe_version_problem -eq 1 ]] && _axe_return_fs=1
	[[ $_axe_process_problem -eq 1 && $_axe_version_problem -eq 0 ]] && _axe_return_fs=2
	[[ $_axe_process_problem -eq 1 && $_axe_version_problem -eq 1 ]] && _axe_return_fs=3
	
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of version_check_pkgbuild_dir"
	return $_axe_return_fs
}

function fetch_sources()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of fetch_sources"
	
	#argument 1 path to destination dir
		# xxx /path/to/destination/dir
	#argument 2 path to list to use including listname
		# xxx /path/to/list.list
	#argument 3 do not sync deps (optional )
		# --nosync  .. no deps sync
		# xxx or blank  .. sync deps

	
	local VAR="_axe_nmcap_outout"
	local VAR="_axe_fetch_problem"
	local VAR="_axe_tag_problem"
	local VAR="_axe_makepkg_problem"
	local VAR="_axe_extract_problem"
	local VAR="_axe_copy_problem"
	local VAR="_axe_pkgbuild_aur"
	local VAR="_axe_pkgbuild_abs"
	local VAR="_axe_pkgbuild_dir"
	local VAR="_axe_makepkg_return"
	local VAR="_axe_deps_to_sync"
	local VAR="_axe_pkgname_fs"
	local VAR="_axe_filename_fs"
	local VAR="_axe_return_fs"
	
	_axe_pkgname_fs=""
	_axe_filename_fs=""
	_axe_deps_to_sync=""
	_axe_makepkg_return=0
	_axe_tag_problem=0
	_axe_copy_problem=0
	_axe_fetch_problem=0
	_axe_extract_problem=0
	_axe_makepkg_problem=0
	_axe_nmcap_outout=""
	_axe_pkgbuild_abs=0
	_axe_pkgbuild_aur=0
	_axe_pkgbuild_dir=0
	_axe_return_fs=0
	
	
	#reset list so we dont get confused over runs
	echo "" > "$_AXE_DIR/src_fetch_errors.list"
	
	#clean list
	# delete comments | delete emty lines | delete everything after first space > to file
	sed '/^\#/d' "$2" | grep -v "^$" | sed 's/ .*//' > "$_AXE_DIR/fetch_sources_working_on.list"
	

	for _axe_pkgname_fs in $(cat "$_AXE_DIR/fetch_sources_working_on.list"); do
		#checkif package already feched and decompressed 
		_axe_pkgbuild_aur=0
		_axe_pkgbuild_abs=0
		_axe_pkgbuild_dir=0
		
		if [[ ! -d "$1"/"$_axe_pkgname_fs" ]]; then
		
			find "$_AXE_INPUT_PKGBUILD_DIR" -type d -name "$_axe_pkgname_fs" -exec cp -rp {} "$_AXE_RAM_BUILD_DIR" \; 2> /dev/null
			if [[ ! -d "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_fs" ]]; then
		
				find /var/abs -type d -name "$_axe_pkgname_fs" -exec cp -rp {} "$_AXE_RAM_BUILD_DIR" \; 2> /dev/null
				if [[ ! -d "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_fs" ]]; then
				
					cd "$_AXE_RAM_BUILD_DIR"
					yaourt -G --noconfirm "$_axe_pkgname_fs"
					cd /root/
					if [[ ! -d "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_fs" ]]; then
						axe_fuck "ok something is seariously wrong cannot locate $_axe_pkgname_fs pkg build directory in my lookup locations check the code!!!"
						echo "$_axe_pkgname_fs name does not exist in $_AXE_INPUT_PKGBUILD_DIR AUR or ABS" >> "$_AXE_DIR/src_fetch_errors.list"
						_axe_fetch_problem=1 && any_key
					else
						axe_info "found $_axe_pkgname_fs PKGBUILD in AUR fetching and using it as source PKGBUILD"
						_axe_pkgbuild_aur=1
					fi
									
				else
					axe_info "found $_axe_pkgname_fs PKGBUILD in /var/abs fetching and using it as source PKGBUILD"
					_axe_pkgbuild_abs=1
				fi	
		
			else
				axe_info "found $_axe_pkgname_fs PKGBUILD in $_AXE_INPUT_PKGBUILD_DIR fetching and using it as source PKGBUILD"
				_axe_pkgbuild_dir=1
			fi
		
		
			if [[ $axe_fetch_problem -eq 0 ]]; then
			
				#apply the axe rel only to non maintained packages
				if [[ $_axe_pkgbuild_aur -eq 1 || $_axe_pkgbuild_abs -eq 1 ]]; then
					stamp_pkgbuild "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_fs" --norc
					if [[ $? -eq 0 ]]; then
						axe_info "running nmcap on  $_AXE_RAM_BUILD_DIR/$_axe_pkgname_fs/PKGBUILD"
						cd "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_fs"
						_axe_nmcap_outout=$(namcap PKGBUILD)
						if [[ "$_axe_nmcap_outout" ]]; then
							axe_warn "nmcap is saying something about $_axe_pkgname_fs please check the output"
							axe_warn "$_axe_nmcap_outout"
							echo "$_axe_pkgname_fs generated the following warning \n $_axe_nmcap_outout \n" >> "$_AXE_DIR/src_fetch_errors.list"
						fi
					else	
						axe_fuck "tag application problem !!!!!!! am logging it !!"
						echo "$_axe_pkgname_fs did not accept the axe modifications" >> "$_AXE_DIR/src_fetch_errors.list"
						any_key
						_axe_tag_problem=1
					fi
				else

					cd "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_fs"
					_axe_nmcap_outout=$(namcap PKGBUILD)
					if [[ "$_axe_nmcap_outout" ]]; then
						axe_info "$_axe_nmcap_outout"
						axe_warn "nmcap is saying something about $_axe_pkgname_fs please check the output"
						echo "$_axe_pkgname_fs generated the following warning $_axe_nmcap_outout" >> "$_AXE_DIR/src_fetch_errors.list"
					fi
				fi
	
				cd "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_fs"
				
				if [[ $3 == "--nosync" ]]; then
					axe_warn "skipping.... sync of package $_axe_pkgname_fs dsabled"
				else
					axe_info "sync package $_axe_pkgname_fs deps using makpkg method"
					makepkg --asroot --nobuild --syncdeps --noconfirm
					if [[ ! $? -eq 0 ]]; then
						axe_info "sync package $_axe_pkgname_fs deps using axe native method method"
						_axe_deps_to_sync=$(axe_get_deps "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_fs")
						if [[ $_axe_deps_to_sync ]]; then
							pacman -S --needed --noconfirm $(axe_get_deps "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_fs")
							if [[ ! $? -eq 0 ]]; then
								axe_warn "failed to sync deps you need to check your internet connection or we are talking a pakage name as a dep that does not exist, sometiomes happens dude !"
								echo "$_axe_pkgname_fs failed to sync dependencies" >> "$_AXE_DIR/src_fetch_errors.list"
							fi
						else
							axe_warn "no deps detected (which is strange) not attempting to sync"
						fi
					fi
				fi
					
				makepkg --asroot --allsource --noconfirm --force
				if [[ $? -eq 0 ]]; then
					if [[ "$_axe_pkgname_fs" == "attr" || "$_axe_pkgname_fs" == "acl" ]]; then
						cp -pf  $_AXE_RAM_BUILD_DIR/$_axe_pkgname_fs/*$_AXE_SUFFIX_REL.src.tar.gz "$1"
						if [[ ! $? -eq 0 ]]; then
							_axe_copy_problem=1
							echo "$_axe_pkgname_fs did not copy to $1 " >> "$_AXE_DIR/src_fetch_errors.list"
						fi
						cp -pf  $_AXE_RAM_BUILD_DIR/$_axe_pkgname_fs/*$_AXE_SUFFIX_REL.src.tar.gz "$_AXE_SRC_EXPORT_DIR"
						if [[ ! $? -eq 0 ]]; then 
							_axe_copy_problem=1 
							echo "$_axe_pkgname_fs did not copy to $_AXE_SRC_EXPORT_DIR " >> "$_AXE_DIR/src_fetch_errors.list"
						fi
					else
						cp -pf  $_AXE_RAM_BUILD_DIR/$_axe_pkgname_fs/*.src.tar.gz "$1"
						if [[ ! $? -eq 0 ]]; then
							_axe_copy_problem=1
							echo "$_axe_pkgname_fs did not copy to $1 " >> "$_AXE_DIR/src_fetch_errors.list"
						fi
						cp -pf  $_AXE_RAM_BUILD_DIR/$_axe_pkgname_fs/*.src.tar.gz "$_AXE_SRC_EXPORT_DIR"
						if [[ ! $? -eq 0 ]]; then 
							_axe_copy_problem=1 
							echo "$_axe_pkgname_fs did not copy to $_AXE_SRC_EXPORT_DIR " >> "$_AXE_DIR/src_fetch_errors.list"
						fi
					fi

					cd "$1"
					for _axe_filename_fs in *.src.tar.gz 
						do
							tar -xzf "$_axe_filename_fs"
							if [[ ! $? -eq 0 ]]; then
								axe_fuck "failed to extract $_axe_filename_fs in $1 "
								echo "$_axe_filename_fs did not extract propperly" >> "$_AXE_DIR/src_fetch_errors.list"		
								_axe_extract_problem=1
							fi
						done
					rm -f *.src.tar.gz
					cd /root/
					rm -fr "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_fs"
				else
					cd /root/
					rm -fr "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_fs"
					axe_fuck "$_axe_pkgname_fs failed to make a --allsource archive, normally a validity or download problem"
					echo "$_axe_pkgname_fs validity or download problem" >> "$_AXE_DIR/src_fetch_errors.list"
					_axe_makepkg_problem=1
				fi
				
			fi			
			
		else
			axe_info "package already collected skipping"
		fi

		
	done
	
	rm -f "$_AXE_DIR/fetch_sources_working_on.list"
		
	
	
	[[  $_axe_fetch_problem -eq 0 ]] && [[  $_axe_tag_problem -eq 0 ]] && [[  $_axe_makepkg_problem -eq 0 ]] && [[  $_axe_extract_problem -eq 0 ]] && _axe_return_fs=0
	[[  $_axe_fetch_problem -eq 0 ]] && [[  $_axe_tag_problem -eq 0 ]] && [[  $_axe_makepkg_problem -eq 0 ]] && [[  $_axe_extract_problem -eq 1 ]] && _axe_return_fs=1
	[[  $_axe_fetch_problem -eq 0 ]] && [[  $_axe_tag_problem -eq 0 ]] && [[  $_axe_makepkg_problem -eq 1 ]] && [[  $_axe_extract_problem -eq 0 ]] && _axe_return_fs=2
	[[  $_axe_fetch_problem -eq 0 ]] && [[  $_axe_tag_problem -eq 0 ]] && [[  $_axe_makepkg_problem -eq 1 ]] && [[  $_axe_extract_problem -eq 1 ]] && _axe_return_fs=3
	[[  $_axe_fetch_problem -eq 0 ]] && [[  $_axe_tag_problem -eq 1 ]] && [[  $_axe_makepkg_problem -eq 0 ]] && [[  $_axe_extract_problem -eq 0 ]] && _axe_return_fs=4
	[[  $_axe_fetch_problem -eq 0 ]] && [[  $_axe_tag_problem -eq 1 ]] && [[  $_axe_makepkg_problem -eq 0 ]] && [[  $_axe_extract_problem -eq 1 ]] && _axe_return_fs=5
	[[  $_axe_fetch_problem -eq 0 ]] && [[  $_axe_tag_problem -eq 1 ]] && [[  $_axe_makepkg_problem -eq 1 ]] && [[  $_axe_extract_problem -eq 0 ]] && _axe_return_fs=6
	[[  $_axe_fetch_problem -eq 0 ]] && [[  $_axe_tag_problem -eq 1 ]] && [[  $_axe_makepkg_problem -eq 1 ]] && [[  $_axe_extract_problem -eq 1 ]] && _axe_return_fs=7
	[[  $_axe_fetch_problem -eq 1 ]] && [[  $_axe_tag_problem -eq 0 ]] && [[  $_axe_makepkg_problem -eq 0 ]] && [[  $_axe_extract_problem -eq 0 ]] && _axe_return_fs=8
	[[  $_axe_fetch_problem -eq 1 ]] && [[  $_axe_tag_problem -eq 0 ]] && [[  $_axe_makepkg_problem -eq 0 ]] && [[  $_axe_extract_problem -eq 1 ]] && _axe_return_fs=9
	[[  $_axe_fetch_problem -eq 1 ]] && [[  $_axe_tag_problem -eq 0 ]] && [[  $_axe_makepkg_problem -eq 1 ]] && [[  $_axe_extract_problem -eq 0 ]] && _axe_return_fs=10
	[[  $_axe_fetch_problem -eq 1 ]] && [[  $_axe_tag_problem -eq 0 ]] && [[  $_axe_makepkg_problem -eq 1 ]] && [[  $_axe_extract_problem -eq 1 ]] && _axe_return_fs=11
	[[  $_axe_fetch_problem -eq 1 ]] && [[  $_axe_tag_problem -eq 1 ]] && [[  $_axe_makepkg_problem -eq 0 ]] && [[  $_axe_extract_problem -eq 0 ]] && _axe_return_fs=12
	[[  $_axe_fetch_problem -eq 1 ]] && [[  $_axe_tag_problem -eq 1 ]] && [[  $_axe_makepkg_problem -eq 0 ]] && [[  $_axe_extract_problem -eq 1 ]] && _axe_return_fs=13
	[[  $_axe_fetch_problem -eq 1 ]] && [[  $_axe_tag_problem -eq 1 ]] && [[  $_axe_makepkg_problem -eq 1 ]] && [[  $_axe_extract_problem -eq 0 ]] && _axe_return_fs=14
	[[  $_axe_fetch_problem -eq 1 ]] && [[  $_axe_tag_problem -eq 1 ]] && [[  $_axe_makepkg_problem -eq 1 ]] && [[  $_axe_extract_problem -eq 1 ]] && _axe_return_fs=15
	
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of fetch_sources"
	return $_axe_return_fs
	
}

function update_pkgbuild_dir()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of update_pkgbuild_dir"


	#first argument is path to folder to check
		#xxx /path/to/folder

	
	#reset list so we dont get confused over runs
	echo "" > "$_AXE_DIR/update_pkgbuild_dir_problems.list"

	local VAR="_axe_find_problem"
	local VAR="_axe_version_problem"
	local VAR="_axe_rebuild_problem"
	local VAR="_axe_abs_ver"
	local VAR="_axe_abs_rel"
	local VAR="_axe_aur_ver"
	local VAR="_axe_aur_rel"
	local VAR="_axe_dir_ver"
	local VAR="_axe_older"
	local VAR="_axe_abs_location"
	local VAR="_axe_vercmp_return"
	local VAR="_axe_tag_rel"
	local VAR="_axe_pkgname_upd"
	local VAR="_axe_return_upd"
	
	_axe_return_upd=0
	_axe_pkgname_upd=""
	_axe_version_problem=0
	_axe_find_problem=0
	_axe_rebuild_problem=0
	_axe_abs_ver=""
	_axe_aur_ver=""
	_axe_dir_ver=""
	_axe_older=0
	_axe_abs_location=" "
	_axe_vercmp_return=0
	_axe_tag_rel=""
	
	abs
	
	cd $1
	
	find * -prune -type d > "$_AXE_DIR/update_pkgbuild_dir.list"
	
	cd "$_AXE_INPUT_PKGBUILD_DIR"
	
	find * -prune -type d > "$_AXE_DIR/maintained_pkgbuilds.list"
	
	cd /root/
	
	for _axe_pkgname_upd in $(cat "$_AXE_DIR/update_pkgbuild_dir.list"); do
	
		
		_axe_abs_location=$(find "/var/abs" -type d -name "$_axe_pkgname_upd")
	
	
		if [[ $_axe_abs_location ]]; then
		
			axe_info "$_axe_pkgname_upd found in $_axe_abs_location"

			_axe_abs_ver=""
			_axe_abs_rel=""
			_axe_dir_ver=""
			_axe_dir_rel=""
			

			if [[ "$_axe_pkgname_upd" == 'mesa' ]]; then
				_axe_abs_ver=$(sed '/^\#/d' "$_axe_abs_location/PKGBUILD" | sed '/git/d' | grep -m 1 'pkgver=' | sed 's/pkgver=//' | sed 's/^[ \t]*//')
				_axe_abs_rel=$(sed '/^\#/d' "$_axe_abs_location/PKGBUILD" | sed '/git/d' | grep -m 1 'pkgrel=' | sed 's/pkgrel=//' | sed 's/^[ \t]*//')
			else
				_axe_abs_ver=$(sed '/^\#/d' "$_axe_abs_location/PKGBUILD" | grep -m 1 'pkgver=' | sed 's/pkgver=//')
				_axe_abs_rel=$(sed '/^\#/d' "$_axe_abs_location/PKGBUILD" | grep -m 1 'pkgrel=' | sed 's/pkgrel=//')
			fi
			
			_axe_dir_ver=$(sed '/^\#/d' "$1/$_axe_pkgname_vc/PKGBUILD" | grep -m 1 'pkgver=' | sed 's/pkgver=//')
			_axe_dir_axe_rel=$(sed '/^\#/d' "$1/$_axe_pkgname_vc/PKGBUILD" | grep -m 1 '_axe_rel=' | sed 's/_axe_rel=//')
			_axe_dir_rel=$(sed '/^\#/d' "$1/$_axe_pkgname_vc/PKGBUILD" | grep -m 1 '_arch_rel=' | sed 's/_arch_rel=//')
			
			#pkgrel=99.1axe
			
			if [[ $_axe_abs_ver && $_axe_dir_ver ]]; then
			
				axe_info "$_axe_pkgname_upd version from ABS is ${bldcyn} $_axe_abs_ver-$_axe_abs_rel" 
				axe_info "$_axe_pkgname_upd version from $1 is ${bldcyn} $_axe_dir_ver-$_axe_dir_rel" 
				
				_axe_vercmp_return=$(vercmp "$_axe_abs_ver-$_axe_abs_rel" "$_axe_dir_ver-$_axe_dir_rel")
				
				
				[[ $_axe_vercmp_return -eq 0 ]] && axe_info "versions are the same ${bldcyn} no action taken" 
				[[ $_axe_vercmp_return -lt 0 ]] && axe_info "$1 version is greater than ABS version ${bldcyn} no action taken" 

				if [[ $_axe_vercmp_return -gt 0 ]]; then
					# is this package on the maintained list
					if [[ $(sed '/^\#/d' "$_AXE_DIR/maintained_pkgbuilds.list" | grep -Fx "$_axe_pkgname_vc") ]]; then
						axe_fuck "$_axe_pkgname_vc is out of date and its a maintained package so following standard procedure and exporting the tagged PKGBUILD to $_AXE_DEV_UPDATE_EXPORT_DIR and moving on to the next one" 
						echo "$_axe_pkgname_vc from $1  is older than the AUR AUR VER=$_axe_aur_ver-$_axe_aur_rel DEV VER=$_axe_dir_ver-$_axe_dir_rel" >> "$_AXE_DIR/update_pkgbuild_dir_problems.list"
						find /var/abs -type d -name "$_axe_pkgname_upd" -exec cp -rpf {} "$_AXE_RAM_BUILD_DIR" \; 2> /dev/null
						if [[ -d "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_upd" ]]; then
							#apply axe tag 
							stamp_pkgbuild "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_vc"
							if [[ $? -eq 0 ]]; then 
								cp -fpr "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_vc" "$_AXE_DEV_UPDATE_EXPORT_DIR"
								if [[ $? -eq 0 ]]; then 
									cd "$1/$_axe_pkgname_upd"
									axe_info "applying integrity checks"
									makepkg --asroot --nobuild --syncdeps --noconfirm --clean --force
									if [[ $? -eq 0 ]]; then 
										cd /root/
										axe_info "$_axe_pkgname_vc tagged and exported to $_AXE_DEV_UPDATE_EXPORT_DIR"
										rm -fr "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_vc"
									else
										echo "$_axe_pkgname_upd from $1  failed integrity checks" >> "$_AXE_DIR/update_pkgbuild_dir_problems.list"
										axe_fuck "failed integrity checks normally not serious but can be please check the output above" && any_key
									fi
								else
									axe_fuck "$_axe_pkgname_vc failed to move to $_AXE_DEV_UPDATE_EXPORT_DIR please check why !" && any_key
									rm -f "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_vc"
								fi
							else
								echo "$_axe_pkgname_vc from $_AXE_RAM_BUILD_DIR/$_axe_pkgname_vc failed to accept axe pkgrel tag" >> "$_AXE_DIR/update_pkgbuild_dir_problems.list"
								axe_fuck "$_axe_pkgname_vc from $_AXE_RAM_BUILD_DIR/$_axe_pkgname_vc failed to accept axe pkgrel tag please check why !" && any_key
							fi
						else
							axe_fuck "failed to find and copy  $_axe_pkgname_upd from the ABS to $_AXE_RAM_BUILD_DIR ( which by the way is impossible)"
							any_key
						fi	
							
				
					fi
					# is it a toolchain component
					if [[ $(sed '/^\#/d' "$_AXE_DIR/toolchain.list" | grep -Fx "$_axe_pkgname_vc") ]]; then
						axe_warn "$_axe_pkgname_upd is a toolchain component marking the entire toolchain for rebuilding"
						_AXE_TOOLCHAIN_OPTIMUM_YES=0
						axe_warn " i will delete $_axe_pkgname_upd then you can run the toolchan build from the main menu again"
						rm -f "$1/$_axe_pkgname_upd"
					else
						rm -f "$1/$_axe_pkgname_upd"
						find /var/abs -type d -name "$_axe_pkgname_upd" -exec cp -rpf {} "$1" \; 2> /dev/null
						if [[ -d "$1/$_axe_pkgname_upd" ]]; then
							stamp_pkgbuild "$1/$_axe_pkgname_upd"
							if [[ $? -eq 0 ]]; then 
								build_axe_pkgbuild "$_axe_pkgname_upd" "--noinstall" "--nocon" "$1" "$_AXE_OPT_TYPE" "--fail" "--nosuc" "--tag" "--nocheck"
								if [[ $? -eq 5 || $? -eq 6 || $? -eq 7 || $? -eq 9 ]]; then
									axe_fuck "$_axe_pkgname_upd failed to rebuild  check build log"
									echo "$_axe_pkgname_upd from $1  failed rebuild check build log" >> "$_AXE_DIR/update_pkgbuild_dir_problems.list"
									_axe_rebuild_problem=1
								fi
							else
								echo "$_axe_pkgname_upd from $1  failed to accept axe pkgrel tag" >> "$_AXE_DIR/update_pkgbuild_dir_problems.list"
								axe_fuck "$_axe_pkgname_upd refused  to accept axe pkgtag aborting rebuild"
							fi
						else
							axe_fuck "failed to find and copy  $_axe_pkgname_upd from the ABS to $1 ( which by the way is impossible)"
							any_key
						fi
					fi
					
				fi
				
				
				#clean up
				rm -fr "$_AXE_DEV_UPDATE_EXPORT_DIR/$_axe_pkgname_upd/src"
				rm -fr "$_AXE_DEV_UPDATE_EXPORT_DIR/$_axe_pkgname_upd/pkg"
	
			else
				[[ ! $_axe_abs_ver ]] && axe_fuck "canot obtain a version for $_axe_pkgname_upd from $_axe_abs_location/PKGBUILD"  && echo "could not obtain a version from $_axe_pkgname_upd from ABS " >> "$_AXE_DIR/update_pkgbuild_dir_problems.list"
				[[ ! $_axe_dir_ver ]] && axe_fuck "canot obtain a version for $_axe_pkgname_upd from $1/$_axe_pkgname_upd/PKGBUILD" && echo "could not obtain a version from $_axe_pkgname_upd from $1 " >> "$_AXE_DIR/update_pkgbuild_dir_problems.list"
				any_key
			fi
			
			
			
		else
			axe_info "$_axe_pkgname_upd not found in the ABS looking for it from AUR" 
			cd "$_AXE_RAM_BUILD_DIR"
			yaourt -G --noconfirm "$_axe_pkgname_upd"
			cd /root/
			if [[ -d "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_upd" ]]; then
				
				axe_info "$_axe_pkgname_upd found in AUR" 
				
				_axe_aur_ver=""
				_axe_aur_rel=""
				_axe_dir_ver=""
				_axe_dir_rel=""
				
				_axe_dir_ver=$(sed '/^\#/d' "$1/$_axe_pkgname_vc/PKGBUILD" | grep -m 1 'pkgver=' | sed 's/pkgver=//')
				_axe_dir_axe_rel=$(sed '/^\#/d' "$1/$_axe_pkgname_vc/PKGBUILD" | grep -m 1 '_axe_rel=' | sed 's/_axe_rel=//')
				_axe_dir_rel=$(sed '/^\#/d' "$1/$_axe_pkgname_vc/PKGBUILD" | grep -m 1 '_arch_rel=' | sed 's/_arch_rel=//')
				_axe_aur_ver=$(sed '/^\#/d' "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_upd/PKGBUILD" | grep -m 1 'pkgver=' | sed 's/pkgver=//')
				_axe_aur_rel=$(sed '/^\#/d' "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_upd/PKGBUILD" | grep -m 1 'pkgrel=' | sed 's/pkgrel=//')
				
				
				if [[ $_axe_aur_ver && $_axe_dir_ver ]]; then
				
					axe_info "$_axe_pkgname_upd version from $1 is ${bldcyn} $_axe_dir_ver-$_axe_dir_rel" 
					axe_info "$_axe_pkgname_upd version from AUR is ${bldcyn} $_axe_aur_ver-$_axe_aur_rel" 
					
					_axe_vercmp_return=$(vercmp "$_axe_aur_ver-$_axe_aur_rel" "$_axe_dir_ver-$_axe_dir_rel")
					
					[[ $_axe_vercmp_return -eq 0 ]] && axe_info "versions are the same ${bldcyn} no action taken" 
					[[ $_axe_vercmp_return -lt 0 ]] && axe_info "$1 version is greater than AUR version ${bldcyn} no action taken" 

					if [[ $_axe_vercmp_return -gt 0 ]]; then
						stamp_pkgbuild "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_upd"
						if [[ $? -eq 0 ]]; then
							cp -fpr "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_upd" "$1/$_axe_pkgname_upd"
							build_axe_pkgbuild "$_axe_pkgname_upd" "--noinstall" "--nocon" "$1" "$_AXE_OPT_TYPE" "--nofail" "--nosuc" "--tag" "--nocheck"
							if [[ $? -eq 5 || $? -eq 6 ]]; then
								axe_fuck "$_axe_pkgname_upd failed to rebuild  check build log"
								echo "$_axe_pkgname_upd from AUR  failed rebuild check build log" >> "$_AXE_DIR/update_pkgbuild_dir_problems.list"
								_axe_rebuild_problem=1
								[[ $_debug_maintain_pkgbuild_dir -eq 1 ]] && any_key
							else
								rm -fr "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_upd"
							fi
						else
							echo "$_axe_pkgname_upd from $_AXE_RAM_BUILD_DIR/$_axe_pkgname_upd failed to accept axe pkgrel tag" >> "$_AXE_DIR/update_pkgbuild_dir_problems.list"
							axe_fuck "$_axe_pkgname_upd from $_AXE_RAM_BUILD_DIR/$_axe_pkgname_upd failed to accept axe pkgrel tag please check why !"
						fi
					fi
					
					if [[ $(sed '/^\#/d' "$_AXE_DIR/maintained_pkgbuilds.list" | grep -Fx "$_axe_pkgname_vc") ]]; then
						axe_fuck "$_axe_pkgname_vc is out of date and its a maintained package so following standard procedure and exporting the tagged PKGBUILD to $_AXE_DEV_UPDATE_EXPORT_DIR and moving on to the next one" 
						echo "$_axe_pkgname_vc from $1  is older than the AUR AUR VER=$_axe_aur_ver-$_axe_aur_rel DEV VER=$_axe_dir_ver-$_axe_dir_rel" >> "$_AXE_DIR/update_pkgbuild_dir_problems.list"
						
						#apply axe tag 
						stamp_pkgbuild "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_vc"
						if [[ $? -eq 0 ]]; then 
							cp -fpr "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_vc" "$_AXE_DEV_UPDATE_EXPORT_DIR"
							if [[ $? -eq 0 ]]; then 
								cd "$1/$_axe_pkgname_upd"
								axe_info "applying integrity checks"
								makepkg --asroot --nobuild --syncdeps --noconfirm --clean --force
								if [[ $? -eq 0 ]]; then 
									cd /root/
									axe_info "$_axe_pkgname_vc tagged and exported to $_AXE_DEV_UPDATE_EXPORT_DIR"
									rm -fr "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_vc"
								else
									echo "$_axe_pkgname_upd from $1  failed integrity checks" >> "$_AXE_DIR/update_pkgbuild_dir_problems.list"
									axe_fuck "failed integrity checks normally not serious but can be please check the output above" && any_key
								fi
							else
								axe_fuck "$_axe_pkgname_vc failed to move to $_AXE_DEV_UPDATE_EXPORT_DIR please check why !" && any_key
								rm -f "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_vc"
							fi
						else
							echo "$_axe_pkgname_vc from $_AXE_RAM_BUILD_DIR/$_axe_pkgname_vc failed to accept axe pkgrel tag" >> "$_AXE_DIR/update_pkgbuild_dir_problems.list"
							axe_fuck "$_axe_pkgname_vc from $_AXE_RAM_BUILD_DIR/$_axe_pkgname_vc failed to accept axe pkgrel tag please check why !" && any_key
						fi
					else
					
						rm -f "$1/$_axe_pkgname_upd"
						cp -fpr "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_vc" "$1"
						if [[ -d "$1/$_axe_pkgname_upd" ]]; then
							stamp_pkgbuild "$1/$_axe_pkgname_upd"
							if [[ $? -eq 0 ]]; then 
								build_axe_pkgbuild "$_axe_pkgname_upd" "--noinstall" "--nocon" "$1" "$_AXE_OPT_TYPE" "--nofail" "--nosuc" "--tag" "--nocheck"
								if [[ $? -eq 5 || $? -eq 6 || $? -eq 7 || $? -eq 9 ]]; then
									axe_fuck "$_axe_pkgname_upd failed to rebuild  check build log"
									echo "$_axe_pkgname_upd from $1  failed rebuild check build log" >> "$_AXE_DIR/update_pkgbuild_dir_problems.list"
									_axe_rebuild_problem=1
								fi
							else
								echo "$_axe_pkgname_upd from $1  failed to accept axe pkgrel tag" >> "$_AXE_DIR/update_pkgbuild_dir_problems.list"
								axe_fuck "$_axe_pkgname_upd refused  to accept axe pkgtag aborting rebuild"
							fi
						else
							axe_fuck "failed copy  $_axe_pkgname_upd from the ABS to $1"
							any_key
						fi
					fi
				
					
				else
					[[ ! $_axe_aur_ver ]] && axe_fuck "canot obtain a version for $_axe_pkgname_upd from AUR pkgbuild version is $_axe_aur_ver" && echo "could not obtain a version for $_axe_pkgname_upd from AUR pkgbuild " >> "$_AXE_DIR/update_pkgbuild_dir_problems.list"
					[[ ! $_axe_dir_ver ]] && axe_fuck "canot obtain a version for $_axe_pkgname_upd from $1/$_axe_pkgname_upd/PKGBUILD version is $_axe_dir_ver"&& echo "could not obtain a version for $_axe_pkgname_upd from $1/$_axe_pkgname_upd/PKGBUILD " >> "$_AXE_DIR/update_pkgbuild_dir_problems.list"
					any_key
				fi
				
			else
				#check if pck is on axe native list
				if [[ $(sed '/^\#/d' "$_AXE_DIR/axe_native.list" | grep -Fx "$_axe_pkgname_vc") ]]; then
					axe_warn "$_axe_pkgname_vc not found but its an AXE native package"
				else
					axe_fuck "$_axe_pkgname_vc does not exist in AUR in ABS and is not a axe native package !!!!!!!!!!!!" 
					echo "$_axe_pkgname_vc was not found in the ABS or AUR to make a version check, ignore this if  axe native package" >> "$_AXE_DIR/version_problems.list"
					any_key
					_axe_find_problem=1
				fi
			fi
			
		
		
		
		fi
	done
	
	#clean up
	rm -f "$_AXE_DIR/update_pkgbuild_dir.list"
	
	
	[[ "$_axe_rebuild_problem" -eq 0 && "$_axe_version_problem" -eq 0 && "$_axe_find_problem" -eq 0 ]] && _axe_return_upd=0
	[[ "$_axe_rebuild_problem" -eq 0 && "$_axe_version_problem" -eq 0 && "$_axe_find_problem" -eq 1 ]] && _axe_return_upd=1
	[[ "$_axe_rebuild_problem" -eq 0 && "$_axe_version_problem" -eq 1 && "$_axe_find_problem" -eq 0 ]] && _axe_return_upd=2
	[[ "$_axe_rebuild_problem" -eq 0 && "$_axe_version_problem" -eq 1 && "$_axe_find_problem" -eq 1 ]] && _axe_return_upd=3
	[[ "$_axe_rebuild_problem" -eq 1 && "$_axe_version_problem" -eq 0 && "$_axe_find_problem" -eq 0 ]] && _axe_return_upd=4
	[[ "$_axe_rebuild_problem" -eq 1 && "$_axe_version_problem" -eq 0 && "$_axe_find_problem" -eq 1 ]] && _axe_return_upd=5
	[[ "$_axe_rebuild_problem" -eq 1 && "$_axe_version_problem" -eq 1 && "$_axe_find_problem" -eq 0 ]] && _axe_return_upd=6
	[[ "$_axe_rebuild_problem" -eq 1 && "$_axe_version_problem" -eq 1 && "$_axe_find_problem" -eq 1 ]] && _axe_return_upd=7
		

	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of update_pkgbuild_dir"
	return $_axe_return_upd

}

function load_optimised_toolchain_usb()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of load_optimised_toolchain_git"
	
	local VAR="_axe_local_return_lotu"
	_axe_local_return_lotu=0
	
	toolchain_tag_check > /dev/null
	if [[ $? -eq 1 ]]; then
		
		axe_info "about to copy files from your usb stick, i expect to find the files in"
		axe_info "$_AXE_USB_STICK_MNT/$_AXE_USB_I7_TOOLCHAIN_BIN_DIR/<toolchain binaries> for optimised toolchain binary files and"
		axe_info "if the paths are different on your machine you need to ${_AXE_CTRLC} and either modify your machine or just modify my code"
		axe_info "my path is in the variables right at the top of my code listing , you cant miss it!"
		any_key
		
		if [[ ! -d "$_AXE_USB_STICK_MNT" ]]; then
			axe_info "creating usb mount dir $_AXE_USB_STICK_MNT"
			mkdir "$_AXE_USB_STICK_MNT"
		fi
		
		axe_info "mounting $_AXE_USB_STICK_DEVICE"
		mount -t vfat "$_AXE_USB_STICK_DEVICE" "$_AXE_USB_STICK_MNT"
		if [[ $? -eq 0 ]]; then
			axe_info "$_AXE_USB_STICK_DEVICE sucsessfully mounted to $_AXE_USB_STICK_MNT"
			
			if [[ -d "$_AXE_USB_STICK_MNT/$_AXE_USB_I7_TOOLCHAIN_BIN_DIR" ]]; then
				axe_info "copying over toolchain from $_AXE_USB_STICK_MNT/$_AXE_USB_I7_TOOLCHAIN_BIN_DIR to $_AXE_RAM_BUILD_DIR"
				cp -pfr $_AXE_USB_STICK_MNT/$_AXE_USB_I7_TOOLCHAIN_BIN_DIR/* "$_AXE_RAM_BUILD_DIR"
				if [[ $? -eq 0 ]]; then
					cd "$_AXE_RAM_BUILD_DIR"
					pacman -U  *.pkg.tar.xz
					if [[ $? -eq 0 ]]; then
						cd /root/
						toolchain_tag_check
						if [[ $? -eq 0 ]]; then
							axe_info "toolchain sucsessfully loaded"
							mask_toolchain_upgrades
							_axe_local_return_lotu=0
						fi
					else
						axe_fuck " something is wrong pacman did not install toolchain packages"
						_axe_local_return_lotu=1
					fi
				else
					axe_fuck " something is wrong did not copy anything check sources in correct directory"
					_axe_local_return_lotu=2
				fi
			else
				axe_fuck " $_AXE_USB_STICK_MNT/$_AXE_USB_I7_TOOLCHAIN_BIN_DIR does not exist aborting"
				_axe_local_return_lotu=3
			fi
			axe_info "UNmounting $_AXE_USB_STICK_DEVICE"
			umount  "$_AXE_USB_STICK_MNT"
			if [[ $? -eq 0 ]]; then
				axe_info "$_AXE_USB_STICK_DEVICE sucsessfully UNmounted"
			else
				axe_fuck " failed in UNmounting $_AXE_USB_STICK_DEVICE which will still be active"
				_axe_local_return_lotu=4
			fi
			
		else
			axe_fuck " failed to mount$_AXE_USB_STICK_DEVICE to $_AXE_USB_STICK_MNT"
			_axe_local_return_lotu=5
		fi
	else
		axe_info "toolchain already has the axe packeger tag skipping" 
		_axe_local_return_lotu=6
	fi	
	
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of load_optimised_toolchain_git"
	
	return $_axe_local_return_lotu
}

function lsd_init()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of lsd_init"
	
	local VAR="_axe_return_li"
	_axe_return_li=0
	
	
	axe_info "building LSD init"
	pacman -Rsn --noconfirm systemd-sysvcompat
	if [[ $? -eq 0 ]]; then
		build_axe_pkgbuild "filesystem" "--install" "--nocon" "$_AXE_INPUT_PKGBUILD_DIR" "$_AXE_OPT_TYPE"  "--nofail" "--nosuc" "--notag" "--nocheck"
		if [[ $? -lt 5 ]]; then
			build_axe_pkgbuild "dhcpcd" "--install" "--nocon" "$_AXE_INPUT_PKGBUILD_DIR" "$_AXE_OPT_TYPE"  "--nofail" "--nosuc" "--notag" "--nocheck"
			if [[ $? -lt 5 ]]; then
				build_axe_pkgbuild "sysvinit" "--install" "--con" "$_AXE_INPUT_PKGBUILD_DIR" "$_AXE_OPT_TYPE"  "--nofail" "--nosuc" "--notag" "--nocheck"
				if [[ $? -lt 5 ]]; then
					build_axe_pkgbuild "initscripts-git" "--install-force" "--con" "$_AXE_INPUT_PKGBUILD_DIR" "$_AXE_OPT_TYPE"  "--nofail" "--nosuc" "--notag" "--nocheck"
					if [[ $? -lt 5 ]]; then
						axe_info "now you need to configure rc.conf"
						any_key && nano /etc/rc.conf
					else
						axe_fuck "init scripts failed to build, have no choice but to reset your init back to arch standard so you can try again"
						pacman -S systemd-sysvcompat filesystem dhcpcd systemd --noconfirm
						if [[ $? -eq 0 ]]; then
							axe_info "init reset you are cool to go on but i would reboot if i were you" && _axe_return_li=1 && any_key
						else
							axe_fuck "well we are totally fucked,init refused to reset, your on your own im afraid, quitting"
							any_key
							shutdown -h now
							sleep 10
						fi
					fi
				else
					axe_fuck "sysvinit failed to build, have no choice but to reset your init back to arch standard so you can try again"
					pacman -S systemd-sysvcompat filesystem dhcpcd systemd --noconfirm
					if [[ $? -eq 0 ]]; then
						axe_info "init reset you are cool to go on but i would reboot if i were you" && _axe_return_li=2 && any_key
					else
						axe_fuck "well we are totally fucked,init refused to reset, your on your own im afraid, quitting"
						any_key
						shutdown -h now
						sleep 10
					fi
				fi
			else
				axe_fuck "dhcpcd failed to build, have no choice but to reset your init back to arch standard so you can try again"
				pacman -S systemd-sysvcompat filesystem dhcpcd systemd --noconfirm
				if [[ $? -eq 0 ]]; then
					axe_info "init reset you are cool to go on but i would reboot if i were you" && _axe_return_li=3 && any_key
				else
					axe_fuck "well we are totally fucked,init refused to reset, your on your own im afraid, quitting"
					any_key
					shutdown -h now
					sleep 10
				fi
			fi
		else
			axe_fuck "filesystem failed to build, have no choice but to reset your init back to arch standard so you can try again"
			pacman -S systemd-sysvcompat filesystem dhcpcd systemd --noconfirm
			if [[ $? -eq 0 ]]; then
				axe_info "init reset you are cool to go on but i would reboot if i were you" && _axe_return_li=4 && any_key
			else
				axe_fuck "well we are totally fucked,init refused to reset, your on your own im afraid, quitting"
				any_key
				shutdown -h now
				sleep 10
			fi
		fi
	else
		axe_fuck "pacman failed to remove systemd-sysvcompat, have no choice but to reset your init back to arch standard so you can try again"
		pacman -S systemd-sysvcompat filesystem dhcpcd systemd --noconfirm
		if [[ $? -eq 0 ]]; then
			axe_info "init reset you are cool to go on but i would reboot if i were you" && _axe_return_li=5 && any_key
		else
			axe_fuck "well we are totally fucked,init refused to reset, your on your own im afraid, quitting"
			any_key
			shutdown -h now
			sleep 10
		fi
	fi
	
	
	return $_axe_return_li

	
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of lsd_init"
}

function axe_init_usb()
{
	local VAR="_axe_local_return_aiusb"
	_axe_local_return_aiusb=0
	
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of axe_init_usb"
	
	axe_info "currently only the RUNIT based init scheme is supported from USB"
	axe_info "about to copy files from your usb stick, i expect to find the files in"
	axe_info "$_AXE_USB_STICK_MNT/$_AXE_INIT_BIN_DIR/<runit binaries> for the runit-based init"
	axe_info "if the paths are different on your machine you need to ${_AXE_CTRLC} and either modify your machine or just modify my code"
	axe_info "my path is in the variables right at the top of my code listing , you cant miss it!"
	any_key
	
	if [[ ! -d "$_AXE_USB_STICK_MNT" ]]; then
		axe_info "creating usb mount dir $_AXE_USB_STICK_MNT"
		mkdir "$_AXE_USB_STICK_MNT"
	fi
	
	axe_info "mounting usb device"
	mount -t vfat "$_AXE_USB_STICK_DEVICE" "$_AXE_USB_STICK_MNT"
	if [[ $? -eq 0 ]]; then
		axe_info "$_AXE_USB_STICK_DEVICE sucsessfully mounted to $_AXE_USB_STICK_MNT"
		
		if [[ -d "$_AXE_USB_STICK_MNT/$_AXE_INIT_BIN_DIR" ]]; then
			axe_info "copying over init and components from $_AXE_USB_STICK_MNT/$_AXE_INIT_BIN_DIR to $_AXE_RAM_BUILD_DIR"
			cp -pfr $_AXE_USB_STICK_MNT/$_AXE_INIT_BIN_DIR/* "$_AXE_RAM_BUILD_DIR"
			if [[ $? -eq 0 ]]; then
				pacman -Rsn systemd-sysvcompat
				cd "$_AXE_RAM_BUILD_DIR"
				pacman -U  *.pkg.tar.xz
				if [[ $? -eq 0 ]]; then
					cd /root/
					axe_info "configuring /etc/rc.conf"
					[[ -s "/etc/rc.conf" ]] && sed -i "/DAEMONS=/d" "/etc/rc.conf"
					echo "HARDWARECLOCK=\"$_AXE_HARDWARECLOCK\"
TIMEZONE=\"$_AXE_TIMEZONE\"
KEYMAP=\"$_AXE_KEYMAP\"
CONSOLEFONT=\"$_AXE_CONSOLEFONT\"
CONSOLEMAP=\"$_AXE_CONSOLEMAP\"
DAEMONS=($_AXE_DAEMON_ARRAY)" >> "/etc/rc.conf"
					axe_info "please check /etc/rc.conf press ${_AXE_ANY_KEY} to continue"
					read -n1 -s
					nano /etc/rc.conf
					axe_info "was everything ok ?" && any_key
					_axe_local_return_aiusb=0
				else
					axe_fuck "pacman failed to install the init, please panic"
					_axe_local_return_aiusb=1
				fi
			else
				axe_fuck "something is wrong did not copy anything check sources in correct directory"
				_axe_local_return_aiusb=2
			fi
		else
			axe_fuck "$_AXE_USB_STICK_MNT/$_AXE_INIT_BIN_DIR does not exist aborting"
			_axe_local_return_aiusb=3
		fi
		axe_info "UNmounting $_AXE_USB_STICK_DEVICE"
		umount  "$_AXE_USB_STICK_MNT"
		if [[ $? -eq 0 ]]; then
			axe_info "$_AXE_USB_STICK_DEVICE sucsessfully UNmounted"
		else
			axe_fuck "failed in UNmounting $_AXE_USB_STICK_DEVICE driveletter will still be active"
			_axe_local_return_aiusb=4
		fi
		
	else
		axe_fuck "failed to mount$_AXE_USB_STICK_DEVICE to $_AXE_USB_STICK_MNT"
		_axe_local_return_aiusb=5
	fi
	
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of axe_init_usb"
	
	return $_axe_local_return_aiusb
}

function axe_init_git()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of axe_init_git"
	
	local VAR="_axe_local_return_aig"
	_axe_local_return_aig=0
	
	axe_info "removing systemd symlink"
	pacman -Rsn systemd-sysvcompat
	if [[ $? -eq 0 ]]; then
		axe_info "loading RUNIT init from $_AXE_GIT_BIN_OPTIMUM_RUNIT_DIR"
		cd "$_AXE_GIT_BIN_OPTIMUM_RUNIT_DIR"
		pacman -U  *.pkg.tar.xz
		
		if [[ $? -eq 0 ]]; then
			cd /root/
			build_axe_pkgbuild "ignite-git" "--install" "--con" "$_AXE_INPUT_PKGBUILD_DIR" "$_AXE_OPT_TYPE"  "--nofail" "--nosuc" "--notag" "--nocheck"
			if [[ $? -eq 5 || $? -eq 6 ]]; then
				pacman -S systemd-sysvcompat filesystem dhcpcd systemd --noconfirm
				_axe_local_return_aig=3
			fi
			axe_info "configuring /etc/rc.conf"
			[[ -s "/etc/rc.conf" ]] && sed -i "/DAEMONS=/d" "/etc/rc.conf"
			echo "HARDWARECLOCK=\"$_AXE_HARDWARECLOCK\"
TIMEZONE=\"$_AXE_TIMEZONE\"
KEYMAP=\"$_AXE_KEYMAP\"
CONSOLEFONT=\"$_AXE_CONSOLEFONT\"
CONSOLEMAP=\"$_AXE_CONSOLEMAP\"
DAEMONS=($_AXE_DAEMON_ARRAY)" >> "/etc/rc.conf"
			axe_info "please check /etc/rc.conf" && any_key && nano /etc/rc.conf
		else
			axe_fuck "pacman failed to install AXE init resetting init"
			pacman -S systemd-sysvcompat filesystem dhcpcd systemd --noconfirm
			_axe_local_return_aig=2
		fi
	else
		axe_fuck "pacman failed to remove systemd-sysvcompat resetting init"
		pacman -S systemd-sysvcompat filesystem dhcpcd systemd --noconfirm
		_axe_local_return_aig=1
	fi
	
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of axe_init_git"
}

function get_repo_choice()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of get_repo_choice"
	
	axe_info "axe maintains a list of precompiled binary repos maintained by users of axe"
	axe_info "i will download/refresh the list from git then allow you a choice from that list"
	if [[ $_AXE_BASE_GIT_FETCHED_YES -eq 1 ]]; then			
		refresh_git "$_AXE_GIT_BASE_INFORMATION_DIR"
		if [[ $? -eq 0 ]]; then
			_AXE_BASE_GIT_FETCHED_YES=1 
			save_settings
		else
			axe_fuck "BINARY git refused to update, check your internet connection"
		fi
		
	else		
		get_git "$_AXE_REPO_INFO_URL" "$_AXE_GIT_BASE_INFORMATION_DIR"
		if [[ $? -eq 0 ]]; then
			_AXE_BASE_GIT_FETCHED_YES=1 
			save_settings
		else
			axe_fuck "BINARY git refused to download, check your internet connection"
		fi
	fi
	if [[ $_AXE_BASE_GIT_FETCHED_YES -eq 1 ]]; then
		if [[ -s "$_AXE_GIT_BASE_INFORMATION_DIR/repo_list" ]]; then
			source "$_AXE_GIT_BASE_INFORMATION_DIR/repo_list"
			
			#need a dynamic menu here time for dialog !!!
			[[ $_AXE_REPO_1[0] ]] && axe_menu_active 1 "=_AXE_REPO_1=== $_AXE_REPO_1[0]"
			[[ $_AXE_REPO_2[0] ]] && axe_menu_active 2 "=_AXE_REPO_2=== $_AXE_REPO_2[0]"
			
			
			axe_info "please chose a repo from the list above,you can inspect its extended information before finalising a repo"
			read -s -n1 _AXE_TMP_CHAR
			axe_info "you pressed $_AXE_TMP_CHAR"
			case "$_AXE_TMP_CHAR" in
			
				1) axe_info "you have chosen repo $_AXE_TMP_CHAR ,the extended information for this repo is"
					 axe_info "processor synth "
				
				
				
				
				
				
					_AXE_PROCESOR_REL="$_axe_cpu_model_number$_axe_cpu_model_name_code$_axe_cpu_family_number"
					
					axe_info 'packager variable = axe-<stage code>-<cpuid code>'
					_AXE_PACKAGER_NAME_STAGE1_BINARIES="axe_seed_$_axe_cpu_id_code"
					_AXE_PACKAGER_NAME_STAGE2_BINARIES="axe_tree_$_axe_cpu_id_code"
					_AXE_PACKAGER_NAME_STAGE3_BINARIES="axe_apple_$_axe_cpu_id_code"
					_AXE_PACKAGER_NAME_TOOLCHAIN="axe_tool_$_axe_cpu_id_code"
					_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB="axe_tool_multi_$_axe_cpu_id_code"
					axe_info 'whichresults in the following packeger tags'
					axe_info "STAGE1_BINARIES ----- tag is----- axe_seed_$_axe_cpu_id_code"
					axe_info "STAGE2_BINARIES ----- tag is----- axe_tree_$_axe_cpu_id_code"
					axe_info "STAGE3_BINARIES ----- tag is----- axe_apple_$_axe_cpu_id_code"
					axe_info "TOOLCHAIN_BINARIES ----- tag is----- axe_tool_$_axe_cpu_id_code"
					axe_info "MULTILIB_TOOLCHAIN_BINARIES ----- tag is----- axe_tool_mult_$_axe_cpu_id_code"
					axe_info "is the above info good for you?"
					axe_info "press${_AXE_Y} to fix the tags ${_AXE_ANY_OTHER_KEY} to not fix the tags and display detailed info on your processor"
					read -s -n1 _AXE_TMP_CHAR
					axe_info "you pressed $_AXE_TMP_CHAR"
					if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
						_AXE_BIN_GIT_URL="$_AXE_REPO_1[1]"
						_AXE_REMOTE_GIT_REPO_ENTRY="$_AXE_REPO_1[2]" 
					fi ;;
			
			
			
			esac
			
			
			
			save_settings
	
		else
			axe_fuck "$_AXE_GIT_BASE_INFORMATION_DIR/repo_list does not exist"
			any_key
		fi
	else
		axe_fuck "$_AXE_GIT_BASE_INFORMATION_DIR/repo_list not present git did not download"
		any_key
	fi
	


	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of get_repo_choice"
}

function questions_compile_options()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of questions_compile_options"
	
	

	axe_info "now its time for some descisions on what your eventual cinnamon based desktop will function like"
	axe_info "i have the abbility to compile my maintained packages with use flags a-la gentoo, i thus can give you the choice of including or excluding some desktop components at a compile level"
	axe_info "so far i have limited the choices to a sensible subset of what is actually possible hence the choices i will give you are"
	axe_info "CUPS ( linux printer support ) on/off"
	axe_info "BLUETOOTH ( linux blutooth support ) on/off"
	axe_info "COLRD ( linux monitor color profiles ) on/off"
	axe_info "NETWORKMANAGER ( weather to use network manager as the default network handler, or to allow alternatives such as wicd or connman ) on/off"



	axe_info "many people never use or want a fixed printer, removing support reduces system overhead considerably"
	axe_info "${_AXE_Y} if you want to enable CUPS ${_AXE_ANY_OTHER_KEY} if not"
	read -s -n1 _AXE_TMP_CHAR
	axe_info "you pressed $_AXE_TMP_CHAR"
	if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
		_AXE_CUPS=1
		save_settings
	else
		_AXE_CUPS=0
		save_settings
	fi



	axe_info "many people do not have integrated blutooth hardware, removing support reduces system overhead considerably"
	axe_info "${_AXE_Y} if you want to enable BLUETOOTH ${_AXE_ANY_OTHER_KEY} if not"
	read -s -n1 _AXE_TMP_CHAR
	axe_info "you pressed $_AXE_TMP_CHAR"
	if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
		_AXE_BLUETOOTH=1
		save_settings
	else
		_AXE_BLUETOOTH=0
		save_settings
	fi



	axe_info "COLORD is the most useless piece of crap ever invented ( unless you are a graphic artist ) please say no to COLORD"
	axe_info "${_AXE_Y} if you want to enable COLORD ${_AXE_ANY_OTHER_KEY} if not"
	read -s -n1 _AXE_TMP_CHAR
	axe_info "you pressed $_AXE_TMP_CHAR"
	if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
		_AXE_COLORD=1
		save_settings
	else
		_AXE_COLORD=0
		save_settings
	fi


	axe_info "Networkmanager is a excellent ( if a little bloated ) product but disabling this option will only prevent your desktop from complaining when you install connman"
	axe_info "${_AXE_Y} if you want to DISABLE networkmamager ${_AXE_ANY_OTHER_KEY} if not"
	read -s -n1 _AXE_TMP_CHAR
	axe_info "you pressed $_AXE_TMP_CHAR"
	if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
		_AXE_NETWORKMANAGER=0
		save_settings
	else
		_AXE_NETWORKMANAGER=1
		save_settings
	fi

	
	axe_info "now i need to establish your default optimization level"
	axe_info "are you a brave person? would you like to build all your packages with -O3 as stndard, or you a bit yellow and prefer -O2 ?"
	axe_info "no seariously building system wide with -O3 is a really really bad idea, you can build individual packages with -03"
	axe_info "ans still keep -O2 as the system default, just do a bit of work and edit axe list correctly"
	axe_info "${_AXE_Y} to build all the packages with -O3 as default, ${_AXE_ANY_OTHER_KEY} to build with -O2 as default"
	read -s -n1 _AXE_TMP_CHAR
	axe_info "you pressed $_AXE_TMP_CHAR"
	if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
		_AXE_OPT_TYPE="--o3"
		save_settings
	else
		_AXE_OPT_TYPE="--o2"
		save_settings
	fi
	
	axe_info "now you need to decide on a default checking level"
	axe_info "please note if you chose to enable checks your compile time will go up A LOT !!!!!!!, only chose full checks if you have time on your hands, and are suitably paranoid"
	axe_info "${_AXE_Y} to enable full compile-time checks ${_AXE_ANY_OTHER_KEY} to disable the majority of compile time checks"
	read -s -n1 _AXE_TMP_CHAR
	axe_info "you pressed $_AXE_TMP_CHAR"
	if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
		_AXE_GLOBAL_CHECK="--check"
		save_settings
	else
		_AXE_GLOBAL_CHECK="--nocheck"
		save_settings
	fi


	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of questions_compile_options"

}

function pre_menu()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of pre_menu"
	
	local VAR="_axe_cpu_model_name"
	local VAR="_axe_cpu_model_name_code"
	local VAR="_axe_cpu_model_number"
	local VAR="_axe_cpu_vendor_id"
	local VAR="_axe_cpu_family_number"
	local VAR="_axe_gcc_ver"
	local VAR="_axe_return_pm"
	local VAR="_axe_cpu_id"
	local VAR="_axe_cpu_id_code"
	local VAR="_axe_escape_pm"
	_axe_escape_pm=0
	
	while [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 0 || $_AXE_CPU_IDENTIFIED_YES -eq 0 || $_AXE_MAKEPKG_CONF_SETUP_YES -eq 0 ]]; do	
	
	axe_info '--------------------- PRE MENU ---------------------------'
	
#get pkgbuiklds a b

																			     if [[ $_AXE_PKGBUILD_GIT_FETCHED_YES -eq 1 ]]; then
																			  	  	  axe_menu_active A "=PKGBUILD-GIT=== to update your input $_AXE_INPUT_PKGBUILD_DIR from ${bldblu}GIT ${txtrst}"
																			  	  	  axe_menu_active B "=PKGBUILD-USB=== to update your input $_AXE_INPUT_PKGBUILD_DIR from ${bldblu} USB ${txtrst}"
																			  	   else
																			  	  	  axe_menu_active A "=PKGBUILD-GIT=== to load your input $_AXE_INPUT_PKGBUILD_DIR from ${bldblu}GIT ${txtrst}"
																			  	  	  axe_menu_active B "=PKGBUILD-USB=== to load your input $_AXE_INPUT_PKGBUILD_DIR from ${bldblu}USB ${txtrst}"
																			     fi
	   [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 1 && $_AXE_CPU_IDENTIFIED_YES -eq 0 ]] && axe_menu_active C "=GET-CPU-INFO=== to identify and mark your cpu"
	 [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 0 && $_AXE_CPU_IDENTIFIED_YES -eq 0 ]] && axe_menu_inactive C "=GET-CPU-INFO=== OPTION UNAVAILABLE UNTILL $_AXE_INPUT_PKGBUILD_DIR FILLED"
	 [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 1 && $_AXE_CPU_IDENTIFIED_YES -eq 1 ]] && axe_menu_inactive C "=GET-CPU-INFO=== OPTION CPU ALREADY IDENTIFIED"
	 [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 0 && $_AXE_CPU_IDENTIFIED_YES -eq 1 ]] && axe_menu_inactive C "=GET-CPU-INFO=== OPTION CPU ALREADY IDENTIFIED"
											  [[ $_AXE_CPU_IDENTIFIED_YES -eq 1 ]] && axe_menu_active D "=MODIFY-MAKEPKG= to setup makepkg.conf for optimised binaries"
										    [[ $_AXE_CPU_IDENTIFIED_YES -eq 0 ]] && axe_menu_inactive D "=MODIFY-MAKEPKG= OPTION UNAVAILABLE PROCESSOR NOT YEY IDENTIFIED"
	
	
	
		read -s -n1 _AXE_TMP_CHAR
		axe_info "you pressed $_AXE_TMP_CHAR"
		case "$_AXE_TMP_CHAR" in
		
#pkgbuild usb			
			#pkgbuild git		
			a|A) if [[ $_AXE_PKGBUILD_GIT_FETCHED_YES -eq 1 ]]; then
					axe_info "PKGBUILD git already downloaded do you want to refresh and update your pkgbuild git ?  i will then force you to do another version check"
					axe_info "${_AXE_Y} if you want to update git and refresh $_AXE_INPUT_PKGBUILD_DIR ${_AXE_ANY_OTHER_KEY} if not,"
					read -s -n1 _AXE_TMP_CHAR
					axe_info "you pressed $_AXE_TMP_CHAR"
					if [[ "$_AXE_TMP_CHAR" == "y" ]]; then		
						refresh_git "$_AXE_GIT_PKGBUILD_DIR"
						if [[ $? -eq 0 ]]; then
							if [[ $(ls -A "$_AXE_GIT_MAINTAINED_PKGBUILD_DIR") ]]; then
								rm -fr $_AXE_INPUT_PKGBUILD_DIR/*
								cp -pfr $_AXE_GIT_MAINTAINED_PKGBUILD_DIR/* "$_AXE_INPUT_PKGBUILD_DIR"
								if [[ $? -eq 0 ]]; then
									axe_info "the following PKGBUILD folders have been copied to $_AXE_INPUT_PKGBUILD_DIR"
									dir "$_AXE_INPUT_PKGBUILD_DIR"
									_AXE_VERSIONS_CHECKED_YES=0
									_AXE_PKGBUILD_DIR_FILLED_YES=1
									save_settings
								else
									axe_fuck "there was a copy transfer problem between files from $_AXE_GIT_MAINTAINED_PKGBUILD_DIR to $_AXE_INPUT_PKGBUILD_DIR" && any_key
								fi
							else
								axe_info "$_AXE_GIT_MAINTAINED_PKGBUILD_DIR empty not copying any files"
							fi
						else
							axe_fuck "PKGBUILD git $_AXE_PKGBUILD_GIT_URL refused to update, check your internet connection"
						fi	
					fi
				else
					axe_info "Welcome , i assume you have had a look at my code"
					axe_info "so first lets download the your git and fill $_AXE_INPUT_PKGBUILD_DIR"
					any_key
					get_git "$_AXE_PKGBUILD_GIT_URL" "$_AXE_GIT_PKGBUILD_DIR"
					if [[ $? -eq 0 ]]; then
						_AXE_PKGBUILD_GIT_FETCHED_YES=1 && save_settings
						if [[ $(ls -A "$_AXE_GIT_MAINTAINED_PKGBUILD_DIR") ]]; then
							cp -pfr $_AXE_GIT_MAINTAINED_PKGBUILD_DIR/* "$_AXE_INPUT_PKGBUILD_DIR"
							if [[ $? -eq 0 ]]; then
								axe_info "the following files have been copied to $_AXE_INPUT_PKGBUILD_DIR"
								dir "$_AXE_INPUT_PKGBUILD_DIR"
								_AXE_VERSIONS_CHECKED_YES=0
								_AXE_PKGBUILD_DIR_FILLED_YES=1
								save_settings
							else
								axe_fuck "there was a copy transfer problem between files from $_AXE_GIT_MAINTAINED_PKGBUILD_DIR to $_AXE_INPUT_PKGBUILD_DIR" && any_key
							fi
						else
							axe_info "$_AXE_GIT_MAINTAINED_PKGBUILD_DIR empty not copying any files"
						fi
					else
						axe_fuck "PKGBUILD git $_AXE_PKGBUILD_GIT_URL refused to download, check your internet connection"
					fi	
				fi ;;
				
				
				
#pkgbuild usb			
			b|B) [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 1 ]] && axe_info "the input pkgbuild dir is already filled want to refresh it ? i will then force you to do another version check" && axe_info "${_AXE_Y} if you want to refresh $_AXE_INPUT_PKGBUILD_DIR from USB stick ${_AXE_ANY_OTHER_KEY} if not,"
				[[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 0 ]] && axe_info "ok you have elected to fill $_AXE_INPUT_PKGBUILD_DIR from USB" && axe_info "${_AXE_Y} if you want to fill $_AXE_INPUT_PKGBUILD_DIR from USB stick ${_AXE_ANY_OTHER_KEY} if not,"
				read -s -n1 _AXE_TMP_CHAR
				axe_info "you pressed $_AXE_TMP_CHAR"
				if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
					fill_pkgbuild_dir_from_usb "$_AXE_INPUT_PKGBUILD_DIR"
					if [[ $? -eq 0 ]]; then
						_AXE_VERSIONS_CHECKED_YES=0
						_AXE_PKGBUILD_DIR_FILLED_YES=1 && save_settings
					else
						axe_fuck "there was some problem with fetching the files ,check the output above" && any_key
					fi
				fi ;;
				
			c|C) if [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 1 && $_AXE_CPU_IDENTIFIED_YES -eq 0 ]]; then
					axe_info "first you need to chose your processor code, this will be stamped on and in all the packages you compile"
					axe_info "to do tham am going to have to load a little tool not available from archlinux or the AUR"
					#export defaults
					export _AXE_PREFIX_REL
					export _AXE_STAGE
					export _AXE_PROCESOR_REL
					export _AXE_SUFFIX_REL
					build_axe_pkgbuild "cpuid" "--install" "--nocon" "$_AXE_INPUT_PKGBUILD_DIR" "--o2"  "--nofail" "--nosuc" "--notag" "--nocheck"
					if [[ $? -lt 5 || $? -eq 8 ]]; then
						if [ -f /proc/cpuinfo ]; then
							_axe_cpu_model_name=$(grep -m 1 "model name" /proc/cpuinfo)
							_axe_cpu_model_name_code=$(grep -m 1 "model name" /proc/cpuinfo  | sed 's/(TM)//' | sed 's/(R)//' | sed 's/CPU//' | sed 's/GH//' | sed 's/-//g' | sed 's/[a-z@./ :\t]//g' | tr '[:upper:]' '[:lower:]')
							_axe_cpu_model_number=$(grep -m 1 "model" /proc/cpuinfo | awk '{print $3}')
							_axe_cpu_vendor_id=$(grep -m 1 "vendor_id" /proc/cpuinfo)
							_axe_cpu_family_number=$(grep -m 1 "cpu family" /proc/cpuinfo | awk '{print $4}')
							_axe_cpu_id_code=$(cpuid --one-cpu | grep -m 1 '(synth)'| sed 's/(synth)//' | sed 's/[@./ :\t=,]//g')
							_axe_cpu_id=$(cpuid --one-cpu | grep -m 1 '(synth)')
							axe_info "your cpu $_axe_cpu_model_name"
							axe_info "your cpu model name code is $_axe_cpu_model_name_code"
							axe_info "your cpu model number is $_axe_cpu_model_number"
							axe_info "your cpu $_axe_cpu_vendor_id"
							axe_info "your cpu family number is $_axe_cpu_family_number"
							axe_info "your cpuid is $_axe_cpu_id"
							axe_info "your cpuid code is $_axe_cpu_id_code"
							any_key
							echo -e "\n"
							axe_info 'i code your processor id into pkgrel for each package in the following manner ( no spaces )'
							axe_info 'rel segment = <model> <cpu code> <cpu family>'
							_AXE_PROCESOR_REL="$_axe_cpu_model_number$_axe_cpu_model_name_code$_axe_cpu_family_number"
							axe_info "hence your particular rel segment will be $_AXE_PROCESOR_REL which will appear in the name of all the packages compiled on this machine"
							axe_info "furthermore i code your cpu code into the packager variable"
							axe_info 'packager variable = axe-<stage code>-<cpuid code>'
							_AXE_PACKAGER_NAME_STAGE1_BINARIES="axe_seed_$_axe_cpu_id_code"
							_AXE_PACKAGER_NAME_STAGE2_BINARIES="axe_tree_$_axe_cpu_id_code"
							_AXE_PACKAGER_NAME_STAGE3_BINARIES="axe_apple_$_axe_cpu_id_code"
							_AXE_PACKAGER_NAME_TOOLCHAIN="axe_tool_$_axe_cpu_id_code"
							_AXE_PACKAGER_NAME_TOOLCHAIN_MULTILIB="axe_tool_multi_$_axe_cpu_id_code"
							axe_info 'whichresults in the following packeger tags'
							axe_info "STAGE1_BINARIES ----- tag is----- axe_seed_$_axe_cpu_id_code"
							axe_info "STAGE2_BINARIES ----- tag is----- axe_tree_$_axe_cpu_id_code"
							axe_info "STAGE3_BINARIES ----- tag is----- axe_apple_$_axe_cpu_id_code"
							axe_info "TOOLCHAIN_BINARIES ----- tag is----- axe_tool_$_axe_cpu_id_code"
							axe_info "MULTILIB_TOOLCHAIN_BINARIES ----- tag is----- axe_tool_mult_$_axe_cpu_id_code"
							axe_info "is the above info good for you?"
							axe_info "press${_AXE_Y} to fix the tags ${_AXE_ANY_OTHER_KEY} to not fix the tags and display detailed info on your processor"
							read -s -n1 _AXE_TMP_CHAR
							axe_info "you pressed $_AXE_TMP_CHAR"
							if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
								echo '------------------------------------------ CPUID FULL OUTPUT ----------------------------------------------' > "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
								cpuid --one-cpu >> "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
								echo '------------------------------------------ /proc/cpuinfo FULL OUTPUT ----------------------------------------------' >> "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
								cat /proc/cpuinfo >> "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
								echo '------------------------------------------ /proc/cpuinfo FULL OUTPUT ----------------------------------------------' >> "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
								dmesg >> "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
								_AXE_CPU_IDENTIFIED_YES=1
								save_settings
							else
								echo '------------------------------------------ CPUID FULL OUTPUT ----------------------------------------------' > "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
								cpuid --one-cpu >> "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
								echo '------------------------------------------ /proc/cpuinfo FULL OUTPUT ----------------------------------------------' >> "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
								cat /proc/cpuinfo >> "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
								echo '------------------------------------------ /proc/cpuinfo FULL OUTPUT ----------------------------------------------' >> "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
								dmesg >> "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
								nano "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
							fi
						else
							axe_fuck "could not optain any relevent processor info, plese type a 4 to 10 digit code to mark your binaries"
						fi
					else 
						axe_fuck "cpuinfo refused to build or refused to install, please check the output above and try again" && any_key
					fi
				else
					[[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 0 ]] && axe_warn " you need to fetch a pkgbuild repo either from git or usb first"
					[[ $_AXE_CPU_IDENTIFIED_YES -eq 0 ]] && axe_warn "cpu already identified skipping"
				fi ;;
		
		d|D) if [[ $_AXE_CPU_IDENTIFIED_YES -eq 1 && $_AXE_MAKEPKG_CONF_SETUP_YES -eq 0 ]]; then
				axe_info "this routine alters your makepkg.conf, if you have an original, unaltered makepkg.con, then you are all set to go,"
				axe_info "otherwise chose to modify makepkg.conf yourself"
				axe_info "press${_AXE_Y} to let me do the altrerations ${_AXE_ANY_OTHER_KEY} key to skip and let you do makepkg.conf yourself"
				read -s -n1 _AXE_TMP_CHAR
				axe_info "you pressed $_AXE_TMP_CHAR"
				if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
					
					# backup first
					if [[ -s "$_AXE_DIR/makepkg.conf.original" ]]; then
						axe_info "$_AXE_DIR/makepkg.conf.original already present skipping backup"
					
					else
						#backup make.conf
						axe_info "$_AXE_DIR/makepkg.conf.original not found backing up to $_AXE_DIR/makepkg.conf.original"
						cp -p "$_AXE_MAKEPKG_CONF_PATH" "$_AXE_DIR/makepkg.conf.original"
					fi
					
					if [[ -s "/etc/makepkg.conf.axebackup" ]]; then
						axe_info "/etc/makepkg.conf.axebackup already present skipping backup"
					else
						axe_info "/etc/makepkg.conf.axebackup not found backing up to makepkg.conf.axebackup"
						#backup make.conf
						cp -p "/etc/makepkg.conf" "/etc/makepkg.conf.axebackup"
					fi
					
					#comment out current flags
					sed -i 's/CFLAGS=/#commented out by axe CFLAGS/' "$_AXE_MAKEPKG_CONF_PATH"
					if [[ $? -eq 0 ]]; then
						sed -i 's/CXXFLAGS=/#commented out by axe CXXFLAGS/' "$_AXE_MAKEPKG_CONF_PATH"
						if [[ $? -eq 0 ]]; then
							axe_info "standard compiler flags commented out"
						else
							axe_fuck "problem with commenting out the standard compiler flags" && _axe_return_pm=2
						fi
					else
						axe_fuck "problem with commenting out the standard compiler flags" && _axe_return_pm=1
					fi
					
					#mark makepkg.conf as modified by axe
					echo "#AXE modified this file $(date)" >> "$_AXE_MAKEPKG_CONF_PATH"
		
					#setup compiler flags
					
					_axe_gcc_ver=$(cat "/var/abs/core/gcc/PKGBUILD" | grep -m 1 'pkgver=' | sed 's/pkgver=//' )
		
					_AXE_CFLAGS=$(echo "" | gcc -march=native -v -E - 2>&1 | grep cc1 | sed 's/^/CFLAGS="-O2 -pipe/' | sed "s:/usr/lib/gcc/x86_64-unknown-linux-gnu/$_axe_gcc_ver/cc1 -E -quiet -v - ":: | sed 's:--param :--param=:g')
					_AXE_CXXFLAGS=$(echo "" | gcc -march=native -v -E - 2>&1 | grep cc1 | sed 's/^/CXXFLAGS="-O2 -pipe/' | sed "s:/usr/lib/gcc/x86_64-unknown-linux-gnu/$_axe_gcc_ver/cc1 -E -quiet -v - ":: | sed 's:--param :--param=:g')
					
					echo '------------------------------------------ CFLAGS AND CXXFLAGS ----------------------------------------------' >> "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
					echo -e "CFLAGS= $_AXE_CFLAGS \n CXXFLAGS=$_AXE_CXXFLAGS \n" >> "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
		
					axe_info "at this point you need to decide what your compiler flags should be, i have detected your flags and can automatically add them, they are"
					axe_info "$_AXE_CFLAGS"
					axe_info "CXXFLAGS = CFLAGS"
					axe_info "but you may be more comfortable with -march=native which is what i used to calculate your flags, so im giving you the choice at this point"
					axe_info "here is a detailed and accurate summary of your cpu features"
					any_key
					nano "$_AXE_BINARY_EXPORT_DIR/cpuinfo"
					axe_menu_active M "=FLAGS-TO-MARCH======= to set CFLAGS and CXXFLAGS to -march=native"
					axe_menu_active A "=FLAGS-TO-AXE========= to set CFLAGS and CXXFLAGS to the values above"
					axe_menu_active H "=FLAGS-TO-HUMAN======= to set CFLAGS and CXXFLAGS by hand from the processor information supplied"
					read -s -n1 _AXE_TMP_CHAR
					axe_info "you pressed $_AXE_TMP_CHAR"
					while [[ $_axe_escape_pm -eq 0 ]]; do
						case "$_AXE_TMP_CHAR" in
							m|M) sed -i "/#commented out by axe CFLAGS/aCFLAGS=\"-O2 -pipe -march=native\"" "$_AXE_MAKEPKG_CONF_PATH"
								if [[ $? -eq 0 ]]; then
									sed -i "/#commented out by axe CXXFLAGS/aCXXFLAGS=\"-O2 -pipe -march=native\"" "$_AXE_MAKEPKG_CONF_PATH"
									if [[ $? -eq 0 ]]; then
										axe_info "axe compiler flags -march=native sucessfully inserted"
										_axe_escape_pm=1
									else
										axe_fuck "problem with inserting axe CFLAGS compiler flags -march=native" && _axe_return_pm=4 && _axe_escape_pm=1
									fi
								else
									axe_fuck "problem with inserting axe CXXFLAGS compiler flags -march=native" && _axe_return_pm=3 && _axe_escape_pm=1
								fi ;;
						
							a|A) sed -i "/#commented out by axe CFLAGS/a$_AXE_CFLAGS\"" "$_AXE_MAKEPKG_CONF_PATH"
							if [[ $? -eq 0 ]]; then
								sed -i "/#commented out by axe CXXFLAGS/a$_AXE_CXXFLAGS\"" "$_AXE_MAKEPKG_CONF_PATH"
								if [[ $? -eq 0 ]]; then
									axe_info "axe compiler flags $_AXE_CXXFLAGS sucessfully inserted"
									_axe_escape_pm=1
								else
									axe_fuck "problem with inserting axe CFLAGS compiler flags $_AXE_CXXFLAGS" && _axe_return_pm=6 && _axe_escape_pm=1
								fi
							else
								axe_fuck "problem with inserting axe CXXFLAGS compiler flags $_AXE_CXXFLAGS" && _axe_return_pm=5 && _axe_escape_pm=1
							fi ;;
							
							h|H) nano "$_AXE_DIR/cpuinfo"
								nano "$_AXE_MAKEPKG_CONF_PATH" 
								_axe_escape_pm=1 ;;
						esac
					done
		
					sed -i "s/\#PACKAGER=.*/PACKAGER=\"$_AXE_PACKAGER_NAME_STAGE1_BINARIES\"/" "$_AXE_MAKEPKG_CONF_PATH"
					if [[ $? -eq 0 ]]; then
						axe_info "$_AXE_PACKAGER_NAME_STAGE1_BINARIES sucsessfully written as packeger"
					else
						axe_fuck "problem with inserting $_AXE_PACKAGER_NAME_STAGE1_BINARIES" && _axe_return_pm=7
					fi

					#get rid of all the checks with !check and remove fakeroot since building in root
					sed -i 's/fakeroot !distcc color !ccache check !sign/!fakeroot !distcc color !ccache !check !sign/' "$_AXE_MAKEPKG_CONF_PATH"
					if [[ $? -eq 0 ]]; then
						axe_info "default compile tests commented out"
					else
						axe_fuck "problem with commenting out default compile tests" && _axe_return_pm=8
					fi
		
					#add makeflags
					#work out how many cores
					_AXE_CORES=$(cat /proc/cpuinfo | grep 'processor' | wc -l)
					let _AXE_CORES=$_AXE_CORES+1
					#make the change
					sed -i "s/#MAKEFLAGS=.*/MAKEFLAGS=\"-j$_AXE_CORES\"/" "$_AXE_MAKEPKG_CONF_PATH"
					if [[ $? -eq 0 ]]; then
						axe_info "sucsessfully added cores to make flags"
					else
						axe_fuck "problem with adding cores to make flags" && _axe_return_pm=9
					fi
					
					
					
						
					
					if [[ $_axe_return_pm -eq 0 ]]; then
						questions_compile_options
						#final check
						axe_info "everything seems to have gone well"
						axe_info "as a double check examin make.conf make sure changes are correct"
						any_key
						nano "$_AXE_MAKEPKG_CONF_PATH"
						#backup modified makepkg.conf we are going to need it as a check for next time i am run
						cp -pf "$_AXE_MAKEPKG_CONF_PATH" "$_AXE_DIR/makepkg.conf.axemodified"
						_AXE_MAKEPKG_CONF_SETUP_YES=1
						save_settings
					else
						axe_fuck "there was a problemsomewhere down the line taking you back to the menu"
					fi
		
					
				else
					questions_compile_options
					axe_info "ok you have chosen to make your own changes to makepkg.conf------ i will open it up in nano for you"
					axe_info "when you are done i will mark the file as modified so we do not repeat this step, please do not remove my tag ,its bloody obvious what it is"
					axe_info "here is a detailed and accurate summary of your cpu features"
					any_key
					cpuid --one-cpu > "$_AXE_DIR/cpuinfo"
					nano "$_AXE_DIR/cpuinfo"
					nano "$_AXE_MAKEPKG_CONF_PATH"
					echo "#THE HUMAN modified this file $(date)" >> "$_AXE_MAKEPKG_CONF_PATH"
					#backup modified makepkg.conf we are going to need it to make sure update function works
					cp -p "$_AXE_MAKEPKG_CONF_PATH" "$_AXE_DIR/makepkg.conf.humanmodified"
				fi
			else
				[[ $_AXE_CPU_IDENTIFIED_YES -eq 0 ]] && axe_warn " you need to check your processor type first first"
				[[ $_AXE_MAKEPKG_CONF_SETUP_YES -eq 0 ]] && axe_warn "makepkg.conf already setup skipping"
			fi ;;
		
		
		*) axe_warn "incorrect key, try again" ;;

		esac
	done		
	
	
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of pre_menu"
}


function bootstrap_menu()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of bootstrap_menu"
	
	local VAR="_axe_escape"
	local VAR="_axe_choice"
	_axe_escape=50
	
	
	
	
	while [[ $_axe_escape -eq 50 && $_AXE_SKIP_BOOTSTRAP_MENU_YES -eq 0 ]]; do
	
	
	
		axe_info '--------------------- BOOTSTRAP MENU ---------------------------'
		
	#setupbootstrap S
		[[ $_AXE_BOOTSTRAP_SETUP_YES -eq 0 ]] && axe_menu_active S "=CHOSE-REPO========== to setup your system for bootsrapping"	
	#refresh binary git R
		[[ $_AXE_BOOTSTRAP_SETUP_YES -eq 1 ]] && axe_menu_active S "=REFRESH-REPO======== to refresh your local binary repo"
	#bootstrap toolchain T 
		[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]] && axe_menu_active T "=TOOLCHAIN========= to bootstrap your toolchain to an optimised state from git"
		[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]] && axe_menu_inactive T "=TOOLCHAIN========= OPTION UNAVAILABLE TOOLCHAIN ALREADY AN OPTIMISED VERSION"		
	#bootstrap init A L
		[[ $_AXE_INIT_REPLACED_YES -eq 0 ]] && axe_menu_active A "=INIT============== to bootstrap your init to I7 optimised AXE INIT from the axe I7 repo"
		[[ $_AXE_INIT_REPLACED_YES -eq 0 ]] && axe_menu_active L "=INIT============== to bootstrap your init to I7 optimised LSD INIT from the axe I7 repo"
		[[ $_AXE_INIT_REPLACED_YES -eq 1 ]] && axe_menu_inactive A "=INIT============== ALREADY REPLACED NO FURTHER INIT ALTERATION IS POSSIBLE"
		[[ $_AXE_INIT_REPLACED_YES -eq 1 ]] && axe_menu_inactive L "=INIT============== ALREADY REPLACED NO FURTHER INIT ALTERATION IS POSSIBLE"
	#bootstrap udev U
		[[ $_AXE_UDEV_INSTALLED_YES -eq 0 && $_AXE_INIT_REPLACED_YES -eq 1 ]] && axe_menu_active U "=UDEV============== to bootstrap udev and replace systemd from the axe I7 repo"
		[[ $_AXE_UDEV_INSTALLED_YES -eq 0 && $_AXE_INIT_REPLACED_YES -eq 0 ]] && axe_menu_inactive U "=UDEV============== OPTION UNAVAILABLE UNTILL INIT REPLACED"
	#bootstrap kernel K
		[[ $_AXE_UDEV_INSTALLED_YES -eq 1 ]] && axe_menu_active K "=KERNEL============ to bootstrap your kernel to I7 optimised from the axe I7 repo"
		[[ $_AXE_UDEV_INSTALLED_YES -eq 0 ]] && axe_menu_inactive K "=KERNEL============ OPTION UNAVAILABLE UNTILL UDEV FETCHED"
	#bootstrap nvidia N
		[[ $_AXE_UDEV_INSTALLED_YES -eq 1 ]] && axe_menu_active N "=NVIDIA============ to bootstrap Nvidia drivers and CUDA from the axe I7 repo"
		[[ $_AXE_UDEV_INSTALLED_YES -eq 0 ]] && axe_menu_inactive N "=NVIDIA============ OPTION UNAVAILABLE UNTILL UDEV FETCHED"
	#bootstrap stage3 X
		[[ $_AXE_UDEV_INSTALLED_YES -eq 1 && $_AXE_STAGE2_FINALISE_COMPLETE_YES -eq 0 && $_AXE_STAGE3_FINALISE_COMPLETE_YES -eq 0 ]] && axe_menu_active X "=STAGE3-FINALISE=== to sync all the other packages from the axe I7 repo and finalise stage 3"
		[[ $_AXE_UDEV_INSTALLED_YES -eq 0 || $_AXE_STAGE2_FINALISE_COMPLETE_YES -eq 1 || $_AXE_STAGE3_FINALISE_COMPLETE_YES -eq 1 ]] && axe_menu_inactive X "=STAGE3-FINALISE=== OPTION UNAVAILABLE UNTILL UDEV FETCHED AND SYSTEM NOT ALREADY FINALISED"
	#bootstrap desktop D		
		[[ $_AXE_STAGE3_FINALISE_COMPLETE_YES -eq 1 ]] && axe_menu_active D "=DESKTOP=========== to bootstrap your desktops"
		[[ $_AXE_STAGE3_FINALISE_COMPLETE_YES -eq 0 ]] && axe_menu_inactive D "=DESKTOP=========== OPTION UNAVAILABLE UNTILL SYSTEM FIALISED"
	#to dev menu Z		
		[[ $_AXE_BOOTSTRAP_SETUP_YES -eq 0 ]] && axe_menu_active Z "=OPTIMISATION-MENU= to abandon bootstrapping and progress to the Optimisation/DEV menu"
		[[ $_AXE_BOOTSTRAP_SETUP_YES -eq 1 ]] && axe_menu_inactive Z "=OPTIMISATION-MENU= OPTION UNAVAILABLE you have started to bootstrap"
		
		
		read -s -n1 _AXE_TMP_CHAR
		axe_info "you pressed $_AXE_TMP_CHAR"
		case "$_AXE_TMP_CHAR" in

# setup bootstrap			
			s|S) if [[ $_AXE_BOOTSTRAP_SETUP_YES -eq 0 ]]; then
					axe_info "ok you have chosen to bootstrap your system into stage 3 using precompiled optimised binaries"
					axe_info "the fist step in this is to match your processor with a suitable set of optimised binaries"
					axe_menu_active G "=TOOLCHAIN=========== to load your optimised binaries from ${bldblu} GIT${txtrst}"
					axe_menu_active P "=TOOLCHAIN=========== to load your optimised binaries by pacman repo assignment"
					read -s -n1 _AXE_TMP_CHAR
					axe_info "you pressed $_AXE_TMP_CHAR"
					case "$_AXE_TMP_CHAR" in
						g|G) 
									
									if [[ $_AXE_BINARY_GIT_FETCHED_YES -eq 1 ]]; then
										axe_warn "my settings say git binary git is already fetched, which at this point is a bit suspicious, plese check the code"
										any_key
									else
										axe_info "so first lets download $_AXE_BIN_GIT_URL git to $_AXE_GIT_BIN_DIR and refresh $_AXE_LOCAL_BINARY_REPO_DIR"
										any_key				
										get_git "$_AXE_BIN_GIT_URL" "$_AXE_GIT_BIN_DIR"
										if [[ $? -eq 0 ]]; then
											_AXE_BINARY_GIT_FETCHED_YES=1 
											save_settings
											if [[ $(ls "$_AXE_GIT_BIN_DIR") ]]; then 
												cp -prf $_AXE_GIT_BIN_DIR/* "$_AXE_LOCAL_BINARY_REPO_DIR"
												if [[ $? -eq 0 ]]; then
													axe_info "the following files have been copied to $_AXE_LOCAL_BINARY_REPO_DIR"
													dir "$_AXE_LOCAL_BINARY_REPO_DIR"
													_AXE_BINARY_DIR_FILLED_YES=1
													save_settings
													any_key
													
													rm -f /var/cache/pacman/pkg/*
													rm -f $_AXE_PACMAN_CACHE_DIR/*
													update_repo_database "$_AXE_GIT_BIN_DIR" "axelocal"
													if [[ $? -eq 0 ]]; then
														mod_axe_repo_entries --local
														if [[ $? -eq 0 ]]; then
															_AXE_BOOTSTRAP_SETUP_YES=1
															SAVE_SETTINGS
														else
															axe_fuck "add local repo entry"
															any_key
														fi
													else
														axe_fuck "failed repo-add in $_AXE_LOCAL_BINARY_REPO_DIR"
														any_key
													fi
													
												else
													axe_fuck "there was a copy transfer problem between files from $_AXE_GIT_BIN_DIR to _AXE_LOCAL_BINARY_REPO_DIR"
													any_key
												fi
											else
												axe_info "$_AXE_GIT_BIN_DIR empty not copying any files"
											fi
										else
											axe_fuck "choasen BINARY git refused to download, check your internet connection"
										fi
									fi

						 ;;



						p|P) axe_info "axe maintains a list of precompiled binary repos maintained by users of axe"
							axe_info "i will download/refresh the list from git then allow you a choice from that list"
							if [[ $_AXE_BASE_GIT_FETCHED_YES -eq 1 ]]; then			
								refresh_git "$_AXE_GIT_BASE_INFORMATION_DIR"
								if [[ $? -eq 0 ]]; then
									_AXE_BASE_GIT_FETCHED_YES=1 
									save_settings
								else
									axe_fuck "BINARY git refused to update, check your internet connection"
								fi
								
							else		
								get_git "$_AXE_REPO_INFO_URL" "$_AXE_GIT_BASE_INFORMATION_DIR"
								if [[ $? -eq 0 ]]; then
									_AXE_BASE_GIT_FETCHED_YES=1 
									save_settings
								else
									axe_fuck "BINARY git refused to download, check your internet connection"
								fi
							fi
							if [[ $_AXE_BASE_GIT_FETCHED_YES -eq 1 ]]; then
								if [[ -s "$_AXE_GIT_BASE_INFORMATION_DIR/repo_list" ]]; then
									source "$_AXE_GIT_BASE_INFORMATION_DIR/repo_list"
									
									
									axe_menu_active 1 "=_AXE_REPO_1=== $_AXE_REPO_1[0]"
									axe_menu_active 2 "=_AXE_REPO_2=== $_AXE_REPO_2[0]"
									
									
									axe_info "please chose a repo from the list above"
									read -s -n1 _AXE_TMP_CHAR
									axe_info "you pressed $_AXE_TMP_CHAR"
									case "$_AXE_TMP_CHAR" in
									
										1) _AXE_BIN_GIT_URL="$_AXE_REPO_1[1]"
											_AXE_REMOTE_GIT_REPO_ENTRY="$_AXE_REPO_1[2]" ;;
									
									
									
									esac
									
									
									
									
									
									save_settings
									
									
									rm -f /var/cache/pacman/pkg/*
									rm -f $_AXE_PACMAN_CACHE_DIR/*
									mod_axe_repo_entries --remote
									if [[ $? -eq 0 ]]; then
										_AXE_BOOTSTRAP_SETUP_YES=1
										SAVE_SETTINGS
									else
										axe_fuck "add remote repo entry"
										any_key
									fi
									
								else
									axe_fuck "$_AXE_GIT_BASE_INFORMATION_DIR/repo_list does not exist"
									any_key
								fi
							else
								axe_fuck "$_AXE_GIT_BASE_INFORMATION_DIR/repo_list not present git did not download"
								any_key
							fi
						
					esac
				else
					axe_warn "bootstrap already setup"
				fi ;;
		


# refresh binary git

			r|R) if [[ $_AXE_BINARY_GIT_FETCHED_YES -eq 1 && $_AXE_BOOTSTRAP_SETUP_YES -eq 1 ]]; then
					axe_info "${_AXE_Y} if you want to update git and refresh $_AXE_LOCAL_BINARY_REPO_DIR ${_AXE_ANY_OTHER_KEY} if not,"
					read -s -n1 _AXE_TMP_CHAR
					axe_info "you pressed $_AXE_TMP_CHAR"
					if [[ "$_AXE_TMP_CHAR" == "y" ]]; then					
						refresh_git "$_AXE_GIT_BIN_DIR"
						if [[ $? -eq 0 ]]; then
							_AXE_BINARY_GIT_FETCHED_YES=1
							save_settings
							if [[ $(ls "$_AXE_GIT_BIN_DIR") ]]; then
								rm -fr $_AXE_LOCAL_BINARY_REPO_DIR/*
								cp -prf $_AXE_GIT_BIN_DIR/* "$_AXE_LOCAL_BINARY_REPO_DIR"
								if [[ $? -eq 0 ]]; then
									update_repo_database "$_AXE_GIT_BIN_DIR" "axelocal"
									if [[ $? -eq 0 ]]; then
										axe_info "the following files have been copied to $_AXE_LOCAL_BINARY_REPO_DIR"
										dir "$_AXE_LOCAL_BINARY_REPO_DIR"
										_AXE_BINARY_DIR_FILLED_YES=1 && save_settings
									else
										axe_fuck "failed repo-add in $_AXE_LOCAL_BINARY_REPO_DIR"
										any_key
									fi	
								else
									axe_fuck "there was a copy transfer problem between files from $_AXE_GIT_BIN_DIR to $_AXE_LOCAL_BINARY_REPO_DIR" && any_key
								fi
							else
								axe_info "$_AXE_GIT_BIN_DIR empty not copying any files"
							fi
						else
							axe_fuck "BINARY git refused to update, check your internet connection"
						fi
					fi
					
				else
					axe_fuck "you must complete bootstrap setup first"
				fi ;;


# bootstrap	toolchain		
			t|T) pacman -S linux-api-headers glibc "libtool$_AXE_MULTILIB_SUFFIX" libltdl "binutils$_AXE_MULTILIB_SUFFIX" "gcc$_AXE_MULTILIB_SUFFIX" "gcc-ada$_AXE_MULTILIB_SUFFIX" "gcc-fortran$_AXE_MULTILIB_SUFFIX" "gcc-go$_AXE_MULTILIB_SUFFIX" "gcc-libs$_AXE_MULTILIB_SUFFIX" "gcc-objc$_AXE_MULTILIB_SUFFIX" zlib file gmp mpfr libmpc attr acl isl cloog ppl
				if [[ $? -eq 0 ]]; then
					#check load sucsessful
					toolchain_tag_check
					if [[ $? -eq 0 ]]; then
						axe_fuck "toolchain reset procedure failed one of the toolchain components still has the tag/tags "
						_axe_local_return_rtt=1
						any_key
					fi
				else
					axe_fuck "toolchain reset procedure failed pacman bailed out"
					_axe_local_return_rtt=2
					any_key
				fi	;;
			
# bootstrap	init

			"2") bootstrap_init ;;
			
			"3") bootstrap_udev ;;
		
# bootstrap	udev

			"4") bootstrap_kernel ;;

# bootstrap	kernel

			"5") bootstrap_kernel ;;

# bootstrap	nvidia

			"6") stage3_bootstrap ;;


# bootstrap	stage 3

			"7") stage3_bootstrap ;;

# bootstrap	desktop

			"8") stage3_bootstrap ;;
			
#update		
			
			
			
			
#to dev menu		
			z|Z) if [[ $_AXE_BOOTSTRAP_YES -eq 0 ]]; then
			
					axe_info "you have chosen to leave the boostrap menu in favour of the developer menu"
					axe_info "${_AXE_Y} if you want to be able to access the bootstrap menu on subsiquent runs ${_AXE_ANY_OTHER_KEY} if not,"
					read -s -n1 _AXE_TMP_CHAR
					axe_info "you pressed $_AXE_TMP_CHAR"
					if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
						_AXE_SKIP_BOOTSTRAP_MENU_YES=0
						save_settings
						_axe_escape=51
					else
						_AXE_SKIP_BOOTSTRAP_MENU_YES=1
						save_settings
						_axe_escape=51
					fi
				else
					axe_warn "you have already started bootstrapping your machine, i cannot allow you to mix compiled packages with optimised binaries at this time"
					axe_warn "complete bootstrapping then we can talk about it"
				fi ;;
			
	
			*) axe_warn "incorrect key please try again" ;;
			
			
			
		esac
	
	done

	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of bootstrap_menu"
	return $_axe_escape
}


function main_menu()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of main_menu"
	
	
	local VAR="_axe_vcheck_pkgbuild_dir_return"
	local VAR="_axe_update_pkgbuild_dir_return"
	local VAR="_axe_escape"
	_axe_escape=50
	_axe_update_pkgbuild_dir_return=0
	_axe_vcheck_pkgbuild_dir_return=0

	
	while [[ $_axe_escape -eq 50 ]]; do
		echo -e "\n"
		

	
	
		axe_info '--------------------- DEV MENU ---------------------------'
		
		
#get pkgbuiklds g B
		if [[ $_AXE_PKGBUILD_GIT_FETCHED_YES -eq 1 ]]; then
			  axe_menu_active G "=PKGBUILD-GIT======== to update your input $_AXE_INPUT_PKGBUILD_DIR from ${bldblu}GIT ${txtrst}"
			  axe_menu_active B "=PKGBUILD-USB======== to update your input $_AXE_INPUT_PKGBUILD_DIR from ${bldblu} USB ${txtrst}"
		else
			  axe_menu_active G "=PKGBUILD-GIT======== to load your input $_AXE_INPUT_PKGBUILD_DIR from ${bldblu}GIT ${txtrst}"
			  axe_menu_active B "=PKGBUILD-USB======== to load your input $_AXE_INPUT_PKGBUILD_DIR from ${bldblu}USB ${txtrst}"
		fi
		
		
#version check V
		[[ $_AXE_VERSIONS_CHECKED_YES -eq 0 && $_AXE_PKGBUILD_DIR_FILLED_YES -eq 1 ]] && axe_menu_active V "=VERSION-CHECK======= to run a version check on $_AXE_INPUT_PKGBUILD_DIR, note you need to pass this before i will let you move on"
		[[ $_AXE_VERSIONS_CHECKED_YES -eq 1 && $_AXE_PKGBUILD_DIR_FILLED_YES -eq 1 ]] && axe_menu_active V "=VERSION-CHECK======= to re-run a version check on $_AXE_INPUT_PKGBUILD_DIR"
		[[ $_AXE_VERSIONS_CHECKED_YES -eq 0 && $_AXE_PKGBUILD_DIR_FILLED_YES -eq 0 ]] && axe_menu_inactive V "=VERSION-CHECK======= OPTION UNAVAILABLE UNTILL $_AXE_INPUT_PKGBUILD_DIR FILLED"
		
		
#toolchain T C
		
		[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]] && axe_menu_active C "=TOOLCHAIN=========== to install a completed toolchain from ${bldblu}USB${txtrst}"
		[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]] && axe_menu_inactive C "=TOOLCHAIN=========== OPTION UNAVAILABLE TOOLCHAIN ALREADY AN OPTIMISED VERSION"
		[[ $_AXE_VERSIONS_CHECKED_YES -eq 1 && $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]] && axe_menu_active T "=TOOLCHAIN=========== to build a optimised toolchain"
		[[ $_AXE_VERSIONS_CHECKED_YES -eq 0 && $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]] && axe_menu_inactive T "=TOOLCHAIN=========== OPTION UNAVAILABLE UNTILL $_AXE_INPUT_PKGBUILD_DIR VERSIONS CHECKED"
		[[ $_AXE_VERSIONS_CHECKED_YES -eq 1 && $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]] && axe_menu_inactive T "=TOOLCHAIN=========== OPTION UNAVAILABLE TOOLCHAIN ALREADY AN OPTIMISED VERSION"
		[[ $_AXE_VERSIONS_CHECKED_YES -eq 0 && $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]] && axe_menu_inactive T "=TOOLCHAIN=========== OPTION UNAVAILABLE UNTILL $_AXE_INPUT_PKGBUILD_DIR VERSIONS CHECKED AND TOOLCHAIN NEEDS UPGRADING"

		
#init A L I
		if [[ $_AXE_INIT_REPLACED_YES -eq 0 ]]; then 
			[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]] && axe_menu_active A "=INIT================ to load and build the AXE init from ${bldblu}GIT ${txtrst}"
			[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]] && axe_menu_inactive A "=INIT================ OPTION UNAVAILABLE UNTILL TOOLCHAIN BUILT"
			axe_menu_active I "INIT-- to load and install the AXE init from ${bldblu}USB ${txtrst}"
			[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 1 ]] && axe_menu_active L "=INIT================ to load and install the sysv based LSD init from ${bldblu} GIT ${txtrst}"
			[[ $_AXE_TOOLCHAIN_OPTIMUM_YES -eq 0 ]] && axe_menu_inactive L "=INIT================ OPTION UNAVAILABLE UNTILL TOOLCHAIN BUILT"
		else
			axe_menu_inactive A "=INIT================ OPTION UNAVAILABLE INIT ALREADY REPLACED"
			axe_menu_inactive L "=INIT================ OPTION UNAVAILABLE INIT ALREADY REPLACED"
		fi

		
#udev U
		[[ $_AXE_UDEV_INSTALLED_YES -eq 0 && $_AXE_INIT_REPLACED_YES -eq 1 ]] &&  axe_menu_active U "=UDEV================ to build udev and replace systemd"
		[[ $_AXE_UDEV_INSTALLED_YES -eq 0 && $_AXE_INIT_REPLACED_YES -eq 0 ]] &&  axe_menu_inactive U "=UDEV================ OPTION UNAVAILABLE UNTILL INIT REPLACED"
		[[ $_AXE_UDEV_INSTALLED_YES -eq 1 && $_AXE_INIT_REPLACED_YES -eq 1 ]] &&  axe_menu_inactive U "=UDEV================ OPTION UNAVAILABLE UDEV ALREADY BUILT AND INSTALLED"
		[[ $_AXE_UDEV_INSTALLED_YES -eq 1 && $_AXE_INIT_REPLACED_YES -eq 0 ]] &&  axe_menu_inactive U "=UDEV================ OPTION UNAVAILABLE UDEV ALREADY BUILT AND INSTALLED"
		
		
#fetch sources F
		[[ $_AXE_SOURCES_FETCHED_YES -eq 1 && $_AXE_UDEV_INSTALLED_YES -eq 1 ]] && axe_menu_active F "=FETCH-SOURCES======= to update your sources by re-downloading everything"
		[[ $_AXE_SOURCES_FETCHED_YES -eq 0 && $_AXE_UDEV_INSTALLED_YES -eq 1 ]] && axe_menu_active F "=FETCH-SOURCES======= to fetch your sources"
		[[ $_AXE_SOURCES_FETCHED_YES -eq 1 && $_AXE_UDEV_INSTALLED_YES -eq 0 ]] && axe_menu_inactive F "=FETCH-SOURCES======= OPTION UNAVAILABLE UNTILL UDEV INSTALLED AND SYSTEMD REMOVED"
		[[ $_AXE_SOURCES_FETCHED_YES -eq 0 && $_AXE_UDEV_INSTALLED_YES -eq 0 ]] && axe_menu_inactive F "=FETCH-SOURCES======= OPTION UNAVAILABLE UNTILL UDEV INSTALLED AND SYSTEMD REMOVED"

		
#kernel	K
		[[ $_AXE_SOURCES_FETCHED_YES -eq 1 ]] && axe_menu_active K "=KERNEL============== to rebuild and optimise your kernal"
		[[ $_AXE_SOURCES_FETCHED_YES -eq 0 ]] && axe_menu_inactive K "=KERNEL============== OPTION UNAVAILABLE UNTILL SOURCES FETCHED"

		
#nvidia N
	    [[ $_AXE_SOURCES_FETCHED_YES -eq 1 ]] && axe_menu_active N "=NVIDIA============== to build Nvidia drivers and CUDA"
		[[ $_AXE_SOURCES_FETCHED_YES -eq 0 ]] && axe_menu_inactive N "=NVIDIA============== OPTION UNAVAILABLE UNTILL SOURCES FETCHED"
		
		
#build stage 2 binaries E
	    [[ $_AXE_SOURCES_FETCHED_YES -eq 1 ]] && axe_menu_active E "=STAGE2-BINARIES===== to build stage 2 binaries"
		[[ $_AXE_SOURCES_FETCHED_YES -eq 0 ]] && axe_menu_inactive E "=STAGE2-BINARIES===== OPTION UNAVAILABLE UNTILL SOURCES FETCHED"
		
		
#finalise stage 2 W
		[[ $_AXE_STAGE2_BINARIES_BUILT_YES -eq 1 ]] && axe_menu_active W "=FINALISE-STAGE2===== to finalise your system at stage 2"
		[[ $_AXE_STAGE2_BINARIES_BUILT_YES -eq 0 ]] && axe_menu_inactive W "=FINALISE-STAGE2===== OPTION UNAVAILABLE UNTILL STAGE 2 BINARIES BUILT"
		
		
#setup for stage 3	X
		[[ $_AXE_STAGE2_BINARIES_BUILT_YES -eq 1 && $_AXE_STAGE2_FINALISE_COMPLETE_YES -eq 0 ]] && axe_menu_active X "=SETUP-FOR-STAGE3==== to setup for the stage 3 build"
		[[ $_AXE_STAGE2_BINARIES_BUILT_YES -eq 0 && $_AXE_STAGE2_FINALISE_COMPLETE_YES -eq 0 ]] && axe_menu_inactive X "=SETUP-FOR-STAGE3==== OPTION UNAVAILABLE UNTILL STAGE 2 BINARIES BUILT"
		[[ $_AXE_STAGE2_BINARIES_BUILT_YES -eq 1 && $_AXE_STAGE2_FINALISE_COMPLETE_YES -eq 1 ]] && axe_menu_inactive X "=SETUP-FOR-STAGE3==== OPTION UNAVAILABLE SYSTEM STABILISED AT STAGE 2"
		[[ $_AXE_STAGE2_BINARIES_BUILT_YES -eq 0 && $_AXE_STAGE2_FINALISE_COMPLETE_YES -eq 1 ]] && axe_menu_inactive X "=SETUP-FOR-STAGE3==== OPTION UNAVAILABLE SYSTEM STABILISED AT STAGE 2"
		
		
#build stage 3 binaries	Y
		[[ $_AXE_STAGE3_SETUP_COMPLETE_YES -eq 1 && $_AXE_STAGE2_FINALISE_COMPLETE_YES -eq 0 ]] &&  axe_menu_active Y "=STAGE3-BINARIES===== to build stage 3 binaries"
		[[ $_AXE_STAGE3_SETUP_COMPLETE_YES -eq 0 && $_AXE_STAGE2_FINALISE_COMPLETE_YES -eq 0 ]] &&  axe_menu_inactive Y "=STAGE3-BINARIES===== OPTION UNAVAILABLE UNTILL STAGE 3 SETUP"
		[[ $_AXE_STAGE3_SETUP_COMPLETE_YES -eq 1 && $_AXE_STAGE2_FINALISE_COMPLETE_YES -eq 1 ]] &&  axe_menu_inactive Y "=STAGE3-BINARIES===== OPTION UNAVAILABLE SYSTEM STABILISED AT STAGE 2"
		[[ $_AXE_STAGE3_SETUP_COMPLETE_YES -eq 0 && $_AXE_STAGE2_FINALISE_COMPLETE_YES -eq 1 ]] &&  axe_menu_inactive Y "=STAGE3-BINARIES===== OPTION UNAVAILABLE SYSTEM STABILISED AT STAGE 2"
		
		
#finalise stage 3 Z
		[[ $_AXE_STAGE3_BINARIES_BUILT_YES -eq 1 && $_AXE_STAGE2_FINALISE_COMPLETE_YES -eq 0 ]] &&  axe_menu_active Z "=FINALISE-STAGE3===== to finalise stage 3"
		[[ $_AXE_STAGE3_BINARIES_BUILT_YES -eq 0 && $_AXE_STAGE2_FINALISE_COMPLETE_YES -eq 0 ]] &&  axe_menu_inactive Z "=FINALISE-STAGE3===== OPTION UNAVAILABLE UNTILL STAGE 3 SETUP"
		[[ $_AXE_STAGE3_BINARIES_BUILT_YES -eq 1 && $_AXE_STAGE2_FINALISE_COMPLETE_YES -eq 1 ]] &&  axe_menu_inactive Z "=FINALISE-STAGE3===== OPTION UNAVAILABLE SYSTEM STABILISED AT STAGE 2"
		[[ $_AXE_STAGE3_BINARIES_BUILT_YES -eq 0 && $_AXE_STAGE2_FINALISE_COMPLETE_YES -eq 1 ]] &&  axe_menu_inactive Z "=FINALISE-STAGE3===== OPTION UNAVAILABLE SYSTEM STABILISED AT STAGE 2"
		
		
#build desktop D
		[[ $_AXE_STAGE2_FINALISE_COMPLETE_YES -eq 0 && $_AXE_STAGE3_FINALISE_COMPLETE_YES -eq 0 ]] &&  axe_menu_inactive D "=DESKTOP============= OPTION UNAVAILABLE UNTILL SYSTEM STABILISED AT STAGE 2 OR 3"
		[[ $_AXE_STAGE2_FINALISE_COMPLETE_YES -eq 0 && $_AXE_STAGE3_FINALISE_COMPLETE_YES -eq 1 ]] &&  axe_menu_active D "=DESKTOP============= to build a your desktops at a stage 3 level"
		[[ $_AXE_STAGE2_FINALISE_COMPLETE_YES -eq 1 && $_AXE_STAGE3_FINALISE_COMPLETE_YES -eq 0 ]] &&  axe_menu_active D "=DESKTOP============= to build a your desktops at a stage 2 level"
		
		
#update M	
		[[ $_AXE_STAGE2_FINALISE_COMPLETE_YES -eq 0 && $_AXE_STAGE3_FINALISE_COMPLETE_YES -eq 0 ]] &&  axe_menu_inactive M "=MAINTAIN============ OPTION UNAVAILABLE UNTILL SYSTEM STABILISED AT STAGE 2 OR 3"
	    [[ $_AXE_STAGE2_FINALISE_COMPLETE_YES -eq 0 && $_AXE_STAGE3_FINALISE_COMPLETE_YES -eq 1 ]] &&  axe_menu_active M "=MAINTAIN============ to clean and update $_AXE_PKGBUILD_DIR at a stage 3 level"
		[[ $_AXE_STAGE2_FINALISE_COMPLETE_YES -eq 1 && $_AXE_STAGE3_FINALISE_COMPLETE_YES -eq 0 ]] &&  axe_menu_active M "=MAINTAIN============ to clean and update $_AXE_PKGBUILD_DIR at a stage 2 level"
		
		
		axe_menu_active "${_AXE_ANY_OTHER_KEY} to quit AXE"
		
		
		read -s -n1 _AXE_TMP_CHAR
		axe_info "you pressed $_AXE_TMP_CHAR"
		case "$_AXE_TMP_CHAR" in
		
		
#pkgbuild git		
			g|G) if [[ $_AXE_PKGBUILD_GIT_FETCHED_YES -eq 1 ]]; then
					axe_info "PKGBUILD git already downloaded do you want to refresh and update your pkgbuild git ?  i will then force you to do another version check"
					axe_info "${_AXE_Y} if you want to update git and refresh $_AXE_INPUT_PKGBUILD_DIR ${_AXE_ANY_OTHER_KEY} if not,"
					read -s -n1 _AXE_TMP_CHAR
					axe_info "you pressed $_AXE_TMP_CHAR"
					if [[ "$_AXE_TMP_CHAR" == "y" ]]; then		
						refresh_git "$_AXE_GIT_PKGBUILD_DIR"
						if [[ $? -eq 0 ]]; then
							if [[ $(ls -A "$_AXE_GIT_MAINTAINED_PKGBUILD_DIR") ]]; then
								rm -fr $_AXE_INPUT_PKGBUILD_DIR/*
								cp -pfr $_AXE_GIT_MAINTAINED_PKGBUILD_DIR/* "$_AXE_INPUT_PKGBUILD_DIR"
								if [[ $? -eq 0 ]]; then
									axe_info "the following PKGBUILD folders have been copied to $_AXE_INPUT_PKGBUILD_DIR"
									dir "$_AXE_INPUT_PKGBUILD_DIR"
									_AXE_VERSIONS_CHECKED_YES=0
									_AXE_PKGBUILD_DIR_FILLED_YES=1
									save_settings
								else
									axe_fuck "there was a copy transfer problem between files from $_AXE_GIT_MAINTAINED_PKGBUILD_DIR to $_AXE_INPUT_PKGBUILD_DIR" && any_key
								fi
							else
								axe_info "$_AXE_GIT_MAINTAINED_PKGBUILD_DIR empty not copying any files"
							fi
						else
							axe_fuck "PKGBUILD git $_AXE_PKGBUILD_GIT_URL refused to update, check your internet connection"
						fi	
					fi
				else
					axe_info "Welcome , i assume you have had a look at my code"
					axe_info "so first lets download the your git and fill $_AXE_INPUT_PKGBUILD_DIR"
					any_key
					get_git "$_AXE_PKGBUILD_GIT_URL" "$_AXE_GIT_PKGBUILD_DIR"
					if [[ $? -eq 0 ]]; then
						_AXE_PKGBUILD_GIT_FETCHED_YES=1 && save_settings
						if [[ $(ls -A "$_AXE_GIT_MAINTAINED_PKGBUILD_DIR") ]]; then
							cp -pfr $_AXE_GIT_MAINTAINED_PKGBUILD_DIR/* "$_AXE_INPUT_PKGBUILD_DIR"
							if [[ $? -eq 0 ]]; then
								axe_info "the following files have been copied to $_AXE_INPUT_PKGBUILD_DIR"
								dir "$_AXE_INPUT_PKGBUILD_DIR"
								_AXE_VERSIONS_CHECKED_YES=0
								_AXE_PKGBUILD_DIR_FILLED_YES=1
								save_settings
							else
								axe_fuck "there was a copy transfer problem between files from $_AXE_GIT_MAINTAINED_PKGBUILD_DIR to $_AXE_INPUT_PKGBUILD_DIR" && any_key
							fi
						else
							axe_info "$_AXE_GIT_MAINTAINED_PKGBUILD_DIR empty not copying any files"
						fi
					else
						axe_fuck "PKGBUILD git $_AXE_PKGBUILD_GIT_URL refused to download, check your internet connection"
					fi	
				fi ;;
				
				
				
#pkgbuild usb			
			b|B) [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 1 ]] && axe_info "the input pkgbuild dir is already filled want to refresh it ? i will then force you to do another version check" && axe_info "${_AXE_Y} if you want to refresh $_AXE_INPUT_PKGBUILD_DIR from USB stick ${_AXE_ANY_OTHER_KEY} if not,"
				[[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 0 ]] && axe_info "ok you have elected to fill $_AXE_INPUT_PKGBUILD_DIR from USB" && axe_info "${_AXE_Y} if you want to fill $_AXE_INPUT_PKGBUILD_DIR from USB stick ${_AXE_ANY_OTHER_KEY} if not,"
				read -s -n1 _AXE_TMP_CHAR
				axe_info "you pressed $_AXE_TMP_CHAR"
				if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
					fill_pkgbuild_dir_from_usb "$_AXE_INPUT_PKGBUILD_DIR"
					if [[ $? -eq 0 ]]; then
						_AXE_VERSIONS_CHECKED_YES=0
						_AXE_PKGBUILD_DIR_FILLED_YES=1 && save_settings
					else
						axe_fuck "there was some problem with fetching the files ,check the output above" && any_key
					fi
				fi ;;	
				
#check versions				
			v|V) if [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 1 ]]; then
					[[ $_AXE_VERSIONS_CHECKED_YES -eq 1 ]] && axe_info "versions in  $_AXE_INPUT_PKGBUILD_DIR already checked want to do it again ?" && axe_info "${_AXE_V} if you want to recheck the versions in $_AXE_INPUT_PKGBUILD_DIR with integrity checks in place,this forces a source fetch for each package so can be slow" && axe_info "${_AXE_N} if you want to recheck the versions in $_AXE_INPUT_PKGBUILD_DIR with integrity checks turned off"
					[[ $_AXE_VERSIONS_CHECKED_YES -eq 0 ]] && axe_info "ok lets check the versions of the packages in  $_AXE_INPUT_PKGBUILD_DIR" && axe_info "${_AXE_V} if you want to do a check of the versions in $_AXE_INPUT_PKGBUILD_DIR with integrity checks in place,this forces a source fetch for each package so can be slow" && axe_info "${_AXE_N} if you want to do a check of the versions in $_AXE_INPUT_PKGBUILD_DIR with integrity checks turned off"
					axe_info "${_AXE_ANY_OTHER_KEY} to do nothing and return to the main menu"
					read -s -n1 _AXE_TMP_CHAR
					axe_info "you pressed $_AXE_TMP_CHAR"
					if [[ "$_AXE_TMP_CHAR" == "v" || "$_AXE_TMP_CHAR" == "n" ]]; then
					
						if [[ "$_AXE_TMP_CHAR" == "v" ]]; then
							version_check_pkgbuild_dir "$_AXE_INPUT_PKGBUILD_DIR" --int
							_axe_vcheck_pkgbuild_dir_return=$?
						else
							version_check_pkgbuild_dir "$_AXE_INPUT_PKGBUILD_DIR" --noint
							_axe_vcheck_pkgbuild_dir_return=$?
						fi
										
						[[ $_axe_vcheck_pkgbuild_dir_return -eq 0 ]] && axe_info "There were no upgrades to process and no errors stamping the pkgbuilds" && _AXE_VERSIONS_CHECKED_YES=1 && save_settings
							
			
						if [[ $_axe_vcheck_pkgbuild_dir_return -eq 2 ]]; then
							axe_warn "There were some process problems but nothing was out of date, will display a list so you can double check" && any_key
							nano "$_AXE_DIR/version_problems.list"
							axe_info "${_AXE_Y} if you want to quit now and investigate some pkgbuilds etc ${_AXE_ANY_OTHER_KEY} to continue"
							#backup version_problems.list
							cat "$_AXE_DIR/version_problems.list" > "$_AXE_DIR/version_problems-$(date +%Y%m%d-%H%M%S)"
							rm -f "$_AXE_DIR/version_problems.list"
							read -s -n1 _AXE_TMP_CHAR
							axe_info "you pressed $_AXE_TMP_CHAR"
							if [[ "$_AXE_TMP_CHAR" == "y" ]]; then 
								_axe_escape=2
							else
								_AXE_VERSIONS_CHECKED_YES=1 && save_settings
							fi
						fi
						
						if [[ $_axe_vcheck_pkgbuild_dir_return -eq 3 ]]; then
							axe_fuck "there were some process problems and some packages are definatly are out of date, rectify the situation then re-run" && any_key
							nano "$_AXE_DIR/version_problems.list"
							#backup version_problems.list
							cat "$_AXE_DIR/version_problems.list" > "$_AXE_DIR/version_problems-$(date +%Y%m%d-%H%M%S)"
							rm -f "$_AXE_DIR/version_problems.list"
							axe_info "${_AXE_Y} if you want to export the updateable pkgbuilds to USB stick ${_AXE_ANY_OTHER_KEY} if not,"
							read -s -n1 _AXE_TMP_CHAR
							axe_info "you pressed $_AXE_TMP_CHAR"
							[[ "$_AXE_TMP_CHAR" == "y" ]] && export_pkgbuilds_to_usb "$_AXE_DEV_UPDATE_EXPORT_DIR" "$_AXE_USB_UPDATEABLE_PKGBUILD_DIR"
							_axe_escape=3
						fi
						
						if [[ $_axe_vcheck_pkgbuild_dir_return -eq 1 ]]; then
							axe_fuck "the following PKGBUILDS are out of date, rectify the situation then re-run" && any_key
							nano "$_AXE_DIR/version_problems.list"
							#backup version_problems.list
							cat "$_AXE_DIR/version_problems.list" > "$_AXE_DIR/version_problems-$(date +%Y%m%d-%H%M%S)"
							rm -f "$_AXE_DIR/version_problems.list"
							axe_info "${_AXE_Y} if you want to export the updateable pkgbuilds to USB stick ${_AXE_ANY_OTHER_KEY} if not,"
							read -s -n1 _AXE_TMP_CHAR
							axe_info "you pressed $_AXE_TMP_CHAR"
							[[ "$_AXE_TMP_CHAR" == "y" ]] && export_pkgbuilds_to_usb "$_AXE_DEV_UPDATE_EXPORT_DIR" "$_AXE_USB_UPDATEABLE_PKGBUILD_DIR"
							_axe_escape=4
						fi
					fi
					
				else	
					axe_warn " you need to fetch a pkgbuild repo either from git or usb first"
				fi ;;
				
				
				

				
#toolchain usb			
			c|C) axe_info "${_AXE_Y} if you want to load your optimised toolchain from USB ${_AXE_ANY_OTHER_KEY} if not,"
				read -s -n1 _AXE_TMP_CHAR
				axe_info "you pressed $_AXE_TMP_CHAR"
				if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
					load_optimised_toolchain_usb				
					if [[ $? -gt 0 ]]; then
						axe_fuck "toolchain disd not load please check the output above for clues" && any_key
					fi 
				fi ;;
				
				
			
# toolchain build			
			t|T) 	axe_info "about to build your toolchain this is a fucking long build so piss off, get a coffe, roll a spliff and check on me in a couple of hours"
				axe_info "${_AXE_Y} if you want to build a optimised toolchain first i will fetch some minor sources then build  ${_AXE_ANY_OTHER_KEY} if not,"
				read -s -n1 _AXE_TMP_CHAR
				axe_info "you pressed $_AXE_TMP_CHAR"
				if [[ "$_AXE_TMP_CHAR" == "y" && $_AXE_VERSIONS_CHECKED_YES -eq 1 ]]; then		
					axe_info "Fetching sources for your toolchain build"	
					fetch_sources "$_AXE_PKGBUILD_DIR" "$_AXE_DIR/toolchain.list"
					if [[ $? -eq 0 ]]; then
						# contains tool tag check so wont be built needlesly
						build_toolchain
						if [[ $? -eq 0 ]]; then
							toolchain_tag_check > /dev/null
							if [[ $? -eq 0 ]]; then
								axe_info "tolchain now has the correct packeger variable, saving toolchain version"
								_AXE_TOOLCHAIN_OPTIMUM_YES=1 && save_settings
							else
								axe_fuck "wow wierd for some reason the above packeges failed to take the packger tag after a rebuild will let you try again" && any_key
							fi
						else
							axe_fuck "There was a problem with building your optimised toolchain read the above output" && any_key
							_axe_escape=5
						fi
					else	
						axe_fuck "the following sources failed in some way, rectify the situation then re-run, also available in $_AXE_DIR/src_fetch_errors.list" && any_key
						nano "$_AXE_DIR/src_fetch_errors.list"
						#backup src_fetch_errors.list
						cat "$_AXE_DIR/src_fetch_errors.list" > "$_AXE_DIR/src_fetch_errors-$(date +%Y%m%d-%H%M%S)"
						rm -f "$_AXE_DIR/src_fetch_errors.list"
						_axe_escape=6
					fi
				else
					[[ $_AXE_VERSIONS_CHECKED_YES -eq 0 ]] && axe_warn "you need to check versions before i will allow this.......... skipping"			
				fi ;;
				
				
#axe init git				
			a|A) axe_info "most of the steps in this process require youi to say yes, this is deliberate so you can see whats going on"
				axe_info "${_AXE_Y} if you want to build and load the runit-based axe-init from git ${_AXE_ANY_OTHER_KEY} if not,"
				read -s -n1 _AXE_TMP_CHAR
				axe_info "you pressed $_AXE_TMP_CHAR"
				if [[ "$_AXE_TMP_CHAR" == "y" ]]; then	
					if [[ $_AXE_INIT_REPLACED_YES -eq 0 && $_AXE_VERSIONS_CHECKED_YES -eq 1 ]]; then
						axe_init_git
						if [[ $? -eq 0 ]]; then
							axe_info "init loaded "
							_AXE_INIT_REPLACED_YES=1
							_AXE_RESUME_YES=1
							save_settings
							_axe_escape=0
						else
							axe_fuck "There was a problem with init replacement read the above output" && any_key && pacman -S systemd-sysvcompat filesystem dhcpcd systemd --noconfirm
						fi
					else
						[[ $_AXE_INIT_REPLACED_YES -eq 0 ]] && axe_warn "you have already replaced your init.......... skipping"
						[[ $_AXE_VERSIONS_CHECKED_YES -eq 0 ]] && axe_warn "for the build part of this opperation you need to have checked your versions .......... skipping"
					fi 
				fi ;;
				
				
				
#axe init usb				
			i|I) axe_info "${_AXE_Y} if you want to build and load the runit-based axe-init from USB ${_AXE_ANY_OTHER_KEY} if not,"
				read -s -n1 _AXE_TMP_CHAR
				axe_info "you pressed $_AXE_TMP_CHAR"
				if [[ "$_AXE_TMP_CHAR" == "y" ]]; then	
					if [[ $_AXE_INIT_REPLACED_YES -eq 0 ]]; then
						axe_init_usb
						if [[ $? -eq 0 ]]; then
							axe_info "init loaded "
							_AXE_INIT_REPLACED_YES=1
							_AXE_RESUME_YES=1
							save_settings
							_axe_escape=0
						else
							axe_fuck "There was a problem with init replacement read the above output" && any_key && pacman -S systemd-sysvcompat filesystem dhcpcd systemd --noconfirm
						fi
					else
						axe_warn "you have already replaced your init.......... skipping"
					fi 
				fi ;;
				
						
#lsd init git				
			l|L) axe_info "${_AXE_Y} if you want to build LSD init from git ${_AXE_ANY_OTHER_KEY} if not,"
				read -s -n1 _AXE_TMP_CHAR
				axe_info "you pressed $_AXE_TMP_CHAR"
				if [[ "$_AXE_TMP_CHAR" == "y" ]]; then	
					if [[ $_AXE_INIT_REPLACED_YES -eq 0 && $_AXE_VERSIONS_CHECKED_YES -eq 1 ]]; then
						lsd_init
						if [[ $? -eq 0 ]]; then
							axe_info "init loaded "
							_AXE_INIT_REPLACED_YES=1
							_AXE_RESUME_YES=1
							save_settings
							_axe_escape=0
						else
							axe_fuck "There was a problem with init replacement read the above output" && any_key && pacman -S systemd-sysvcompat filesystem dhcpcd systemd --noconfirm
						fi 
					else
						[[ $_AXE_INIT_REPLACED_YES -eq 0 ]] && axe_warn "you have already replaced your init.......... skipping"
						[[ $_AXE_VERSIONS_CHECKED_YES -eq 0 ]] && axe_warn "you need to have checked your versions before i will allow this opperation .......... skipping"
					fi 		
				fi ;;				
				
#udev			
			u|U) axe_info "some of the steps in this process require youi to say yes, this is deliberate so you can see whats going on, most is automated though"
				axe_info "please note that this step will negate your abbility to bootstrap this machine, hence the bootstrap menu will no longer be available"
				axe_info "${_AXE_Y} if you want to build udev and all its deps, thus replacing systemd, i will download the needed sources first ${_AXE_ANY_OTHER_KEY} if not,"
				read -s -n1 _AXE_TMP_CHAR
				axe_info "you pressed $_AXE_TMP_CHAR"
				if [[ "$_AXE_TMP_CHAR" == "y" && $_AXE_VERSIONS_CHECKED_YES -eq 1 ]]; then
					axe_info "Fetching sources for your udev and associated components build"	
					fetch_sources "$_AXE_PKGBUILD_DIR" "$_AXE_DIR/replace_systemd.list" --nosync
					if [[ $? -eq 0 ]]; then
						if [[ $_AXE_UDEV_INSTALLED_YES -eq 0 ]]; then
							_AXE_SKIP_BOOTSTRAP_MENU_YES=1
							save_settings
							build_list "$_AXE_DIR/replace_systemd.list"
							case $?	in
								0) _AXE_UDEV_INSTALLED_YES=1
									_AXE_RESUME_YES=1
									save_settings
									_axe_escape=0 ;;
								1)  axe_fuck " one or more systemd replacement components did not build install export or was not found altogether"
									axe_fuck " this could be a problem or just a minor glitch you can ignore"
									axe_fuck " these are the packages that failed build" && any_key
									nano "$_AXE_DIR/fails_display.list"
									axe_fuck " ${_AXE_Y} to quit , examin your build fail logs, do some work and try again ${_AXE_ANY_OTHER_KEY} to ignore the situation and mark udev as replaced"
									read -s -n1 _AXE_TMP_CHAR
									axe_info "you pressed $_AXE_TMP_CHAR"
									if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
										_axe_escape=7
									else
										_AXE_UDEV_INSTALLED_YES=1
										_AXE_RESUME_YES=1
										save_settings
										_axe_escape=0
									fi ;;
							esac
							
						else
							axe_info "udev already installed skipping ......"
						fi
						
					else	
						axe_fuck "the following sources failed in some way, rectify the situation then re-run, also available in $_AXE_DIR/src_fetch_errors.list" && any_key
						nano "$_AXE_DIR/src_fetch_errors.list"
						#backup src_fetch_errors.list
						cat "$_AXE_DIR/src_fetch_errors.list" > "$_AXE_DIR/src_fetch_errors-$(date +%Y%m%d-%H%M%S)"
						rm -f "$_AXE_DIR/src_fetch_errors.list"
						_axe_escape=9
					fi	
				else
					[[ $_AXE_VERSIONS_CHECKED_YES -eq 0 ]] && axe_warn "you need to have checked your versions before i will allow this opperation .......... skipping"
				fi ;;
				
				
#fetch sources				
			f|F) if [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 1 && $_AXE_VERSIONS_CHECKED_YES -eq 1 && $_AXE_INIT_REPLACED_YES -eq 1 && $_AXE_UDEV_INSTALLED_YES -eq 1 ]]; then
					[[ $_AXE_SOURCES_FETCHED_YES -eq 0 ]] && axe_info "now lets do an initial run of downloading these sources you may have to ctrl c many times and fix"
					[[ $_AXE_SOURCES_FETCHED_YES -eq 0 ]] && axe_info "broken source url's upstream servers often take a break!!"
					[[ $_AXE_SOURCES_FETCHED_YES -eq 0 ]] && axe_info "${_AXE_Y} if you want to fetch your sources  ${_AXE_ANY_OTHER_KEY} if not"
					[[ $_AXE_SOURCES_FETCHED_YES -eq 1 ]] && axe_info "sources already fetched so i will delete your current sources then fetch everything again"
					[[ $_AXE_SOURCES_FETCHED_YES -eq 1 ]] && axe_info "${_AXE_Y} if you want to rerun fetches  ${_AXE_ANY_OTHER_KEY} if not"
					read -s -n1 _AXE_TMP_CHAR
					axe_info "you pressed $_AXE_TMP_CHAR"
					if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
						rm -f $_AXE_PKGBUILD_DIR/*
						cat "$_AXE_DIR/axe.list" > "$_AXE_DIR/sources.list"
						cat "$_AXE_DIR/desktop.list" >> "$_AXE_DIR/sources.list"
						cat "$_AXE_DIR/nvidia.list" >> "$_AXE_DIR/sources.list"
						fetch_sources "$_AXE_PKGBUILD_DIR" "$_AXE_DIR/sources.list"
						if [[ $? -eq 0 ]]; then
							_AXE_SOURCES_FETCHED_YES=1 && save_settings
						else
							axe_fuck " the following sources failed in some way, rectify the situation then re-run, also available in $_AXE_DIR/src_fetch_errors.list" && any_key
							nano "$_AXE_DIR/src_fetch_errors.list"
							#backup src_fetch_errors.list
							cat "$_AXE_DIR/src_fetch_errors.list" > "$_AXE_DIR/src_fetch_errors-$(date +%Y%m%d-%H%M%S)"
							rm -f "$_AXE_DIR/src_fetch_errors.list"
							_axe_escape=10	
						fi
					fi
				else
					[[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 0 ]] && axe_warn " you need to fetch a pkgbuild repo either from git or usb first"
					[[ $_AXE_VERSIONS_CHECKED_YES -eq 0 ]] && axe_warn " you need to check the pkgbuild repo versions first"
					[[ $_AXE_INIT_REPLACED_YES -eq 0 ]] && axe_warn " you need to load an init first"
					[[ $_AXE_UDEV_INSTALLED_YES -eq 0 ]] && axe_warn " you need to build udev and replace systemd first"
				fi ;;
				
#rebuild kernal			
			k|K) check_pkg_tag "linux" "--nofail" "--nosuc" "--tag"
				if [[  $? -eq 0 ]]; then
					if [[ $_AXE_SOURCES_FETCHED_YES -eq 1 ]]; then
						axe_info "${_AXE_Y} if you want to optimise your kernal, i will present you with some choices before build ${_AXE_ANY_OTHER_KEY} if not"
						read -s -n1 _AXE_TMP_CHAR
						axe_info "you pressed $_AXE_TMP_CHAR"
						if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
							axe_info "right ! time to make some descisions about rebuilding your kernel i will build it with full CFLAGS optimisation which should give you a bit of a performance boost"
							axe_info "do you want to configure the kernel for yourself ? if you say yes i will bring up a standard kernal config menu"
							axe_info "which SHOULD show your standard arch config,if unsure use the menue to load the standard arch config in  $_AXE_RAM_BUILD_DIR/linux"
							axe_info "then you can make any alterations you need , save and quit, then i will finish the build"
							axe_info "it is quite usefull to change processor type from generic to core2, this will gain you another 5pc boost ontop of the gains from optimisation"
							axe_info "but i would not bother with much else, arch kernal configs are very good in my opinion"
							axe_info "at the end of the build i will reboot your pc which could be automatic or need your assistance, if you get a build fail, follow the instructions, or your nose"
							axe_info "do you want to build your kernal with a menu? this will allow you to reconfigure your kernel but can be risky if your not sure what your doing"
							axe_info "press ${_AXE_Y} to build your kernel with a menu, ${_AXE_ANY_OTHER_KEY} to use default menu config as provided by Arch"
							read -s -n1 _AXE_TMP_CHAR
							axe_info "you pressed $_AXE_TMP_CHAR"
							if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
								_AXE_LINUX_MENU_YES=1
							else
								_AXE_LINUX_MENU_YES=0
							fi
							
							
							axe_info "ok you fancy being really daring and building the kernel with -O3 ?"
							axe_info "press ${_AXE_Y} to build your kernal with -O3 ${_AXE_ANY_OTHER_KEY} to build your kernal with O2"
							read -s -n1 _AXE_TMP_CHAR
							axe_info "you pressed $_AXE_TMP_CHAR"
							if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
								_AXE_LINUX_O2_O3="--o3"
							else
								_AXE_LINUX_O2_O3="--o2"
							fi
							
							build_axe_pkgbuild "linux" "--install" "--nocon" "$_AXE_PKGBUILD_DIR" "$_AXE_LINUX_O2_O3" "--nofail" "--nosuc" "--tag" "--nocheck"
							if [[ $? -lt 5 ]]; then
								_AXE_RESUME_YES=1
								save_settings
								_axe_escape=0
							fi
						fi
					
					else	
						axe_warn "you need to fetch sources first"
					fi 				
				
				else
					axe_info "kernal already has the packeger variable set skipping"
				fi ;;

#nvidia			
			n|N) if [[ $_AXE_NVIDIA_YES -eq 0 && $_AXE_SOURCES_FETCHED_YES -eq 1 ]]; then
					axe_info "are you running a fairly modern nvidia graphics card ?"
					axe_info "if so you can take advantage of all the wonderfull cuda powered utils"
					axe_info "${_AXE_Y} if you are running a NVIDIA and want tobuild the drivers${_AXE_ANY_OTHER_KEY} if running some other piece of crap or are utterly mad and dont want cuda"
					read -s -n1 _AXE_TMP_CHAR
					axe_info "you pressed $_AXE_TMP_CHAR"
					if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
						axe_info "Fetching sources for your udev and associated components build"	
						fetch_sources "$_AXE_PKGBUILD_DIR" "$_AXE_DIR/replace_systemd.list" --nosync
						if [[ $? -eq 0 ]]; then
								pacman -Rc ati-dri intel-dri nouveau-dri --noconfirm
								if [[ $? -eq 0 ]]; then
									build_list "$_AXE_DIR/nvidia.list"
									case $?	in
										0) _AXE_NVIDIA_YES=1
											_AXE_RESUME_YES=1
											save_settings
											_axe_escape=0 ;;
										1)  axe_fuck " one or more nvidia components did not build install export or was not found altogether"
											axe_fuck " this could be a problem or just a minor glitch you can ignore"
											axe_fuck " these are the packages that failed build" && any_key
											nano "$_AXE_DIR/fails_display.list"
											axe_fuck " ${_AXE_Y} exit, check your build logs, do some work and try again ${_AXE_ANY_OTHER_KEY} to ignore the situation and mark Nvidia as installed"
											read -s -n1 _AXE_TMP_CHAR
											axe_info "you pressed $_AXE_TMP_CHAR"
											if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
												_axe_escape=12
											else
												_AXE_NVIDIA_YES=1
												_AXE_RESUME_YES=1
												save_settings
												_axe_escape=0
											fi ;;
									esac
								else	
									axe_fuck "pacman failed to remove ati-dri intel-dri nouveau-dri please check why then rerun " && any_key
								fi		
						else	
						axe_fuck "the following sources failed in some way, rectify the situation then re-run, also available in $_AXE_DIR/src_fetch_errors.list" && any_key
						nano "$_AXE_DIR/src_fetch_errors.list"
						#backup src_fetch_errors.list
						cat "$_AXE_DIR/src_fetch_errors.list" > "$_AXE_DIR/src_fetch_errors-$(date +%Y%m%d-%H%M%S)"
						rm -f "$_AXE_DIR/src_fetch_errors.list"
						_axe_escape=16
					fi	
						
					fi
					
				else
					[[ $_AXE_NVIDIA_YES -eq 1 ]] && axe_info "nvidia and CUDA already installed skipping ......"
					[[ $_AXE_SOURCES_FETCHED_YES -eq 0 ]] && axe_warn "you need to fetch sources first"
				fi ;;
				
#build stage 2 binaries		
			e|E) if [[ $_AXE_STAGE2_BINARIES_BUILT_YES -eq 0 && $_AXE_SOURCES_FETCHED_YES -eq 1 ]]; then
					axe_info "please note that this step will negate your abbility to bootstrap this machine, hence the bootstrap menu will no longer be available"
					axe_info "${_AXE_Y} if you want to build your stage 2 binaries ${_AXE_ANY_OTHER_KEY} to return to the main menu"
					read -s -n1 _AXE_TMP_CHAR
					axe_info "you pressed $_AXE_TMP_CHAR"
					if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
						_AXE_SKIP_BOOTSTRAP_MENU_YES=1
						save_settings
						build_list "$_AXE_DIR/axe.list"
						case $?	in
							0) _AXE_STAGE2_BINARIES_BUILT_YES=1 && save_settings ;;
							1)  axe_fuck " one or more pkgbuilds in $_AXE_DIR/axe.list did not build install export or was not found"
								axe_fuck " this could be a problem or just a minor glitch you can ignore"
								axe_fuck " these are the packages that failed build" && any_key
								nano "$_AXE_DIR/fails_display.list"
								axe_fuck " ${_AXE_Y} exit, check your build logs, do some work and try again ${_AXE_ANY_OTHER_KEY} to ignore the situation and mark stag2 binaries as built"
								read -s -n1 _AXE_TMP_CHAR
								axe_info "you pressed $_AXE_TMP_CHAR"
								if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
									nano "$_AXE_DIR/fails_display.list"
									_axe_escape=14
								else
									_AXE_STAGE2_BINARIES_BUILT_YES=1
									save_settings
								fi ;;
						esac
					fi
				else
					[[ $_AXE_SOURCES_FETCHED_YES -eq 0 ]] && axe_warn "you need to fetch sources first ......"
					[[ $_AXE_STAGE2_BINARIES_BUILT_YES -eq 1 ]] && axe_info "stage 2 binaries already built skipping ......"
				fi ;;
				
				
	
#finalise stage 2
			w|W) if [[ $_AXE_STAGE2_FINALISE_COMPLETE_YES -eq 0 && $_AXE_STAGE2_BINARIES_BUILT_YES -eq 1 ]]; then
					axe_info "${_AXE_Y} if you want to finalise stage 2? this will mask of the abbility to build to stage 3"
					read -s -n1 _AXE_TMP_CHAR
					axe_info "you pressed $_AXE_TMP_CHAR"
					if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
						stage2_finalise
						if [[  $? -eq 0 ]]; then
							_AXE_STAGE2_FINALISE_COMPLETE_YES=1
							_AXE_STAGE=2
							save_settings
						fi
					fi
				else
					[[ $_AXE_STAGE2_BINARIES_BUILT_YES -eq 0 ]] && axe_info "you need to build yor stage 2 binaries first ......"
					[[ $_AXE_STAGE2_FINALISE_COMPLETE_YES -eq 1 ]] && axe_info "stage 2 already finalised ......"
				fi ;;
				
				
				
#setup stage 3	
			x|X) if [[ $_AXE_STAGE3_SETUP_COMPLETE_YES -eq 0 && $_AXE_STAGE2_BINARIES_BUILT_YES -eq 1 ]]; then
					axe_info "${_AXE_Y} if you want to setup to build to stage 3"
					read -s -n1 _AXE_TMP_CHAR
					axe_info "you pressed $_AXE_TMP_CHAR"
					if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
						stage3_setup
						if [[  $? -eq 0 ]]; then
							_AXE_STAGE3_SETUP_COMPLETE_YES=1
							save_settings
						fi
					fi
				else
					[[ $_AXE_STAGE2_BINARIES_BUILT_YES -eq 0 ]] && axe_info "you need to build yor stage 2 binaries first ......"
					[[ $_AXE_STAGE3_SETUP_COMPLETE_YES -eq 1 ]] && axe_info "stage 3 already setup ......"
				fi ;;
	
	
#build stage 3 binaries		
			y|Y) if [[ $_AXE_STAGE3_SETUP_COMPLETE_YES -eq 1 && $_AXE_STAGE3_BINARIES_BUILT_YES -eq 0 ]]; then
					axe_info "ok about to build all the stage3 binaries this is a fucking long build so piss off, get a coffe, roll a spliff and check on me in a couple of hours"
					axe_info "${_AXE_Y} if you want to build your stage 3 binaries ${_AXE_ANY_OTHER_KEY} to return to the main menu"
					read -s -n1 _AXE_TMP_CHAR
					axe_info "you pressed $_AXE_TMP_CHAR"
					if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
						build_list "$_AXE_DIR/axe.list"
						case $?	in
							0) _AXE_STAGE2_BINARIES_BUILT_YES=1 && save_settings ;;
							1)  axe_fuck " one or more pkgbuilds in $_AXE_DIR/axe.list did not build install export or was not found"
								axe_fuck " this could be a problem or just a minor glitch you can ignore"
								axe_fuck " these are the packages that failed build" && any_key
								nano "$_AXE_DIR/fails_display.list"
								axe_fuck " ${_AXE_Y} exit, check your build logs, do some work and try again ${_AXE_ANY_OTHER_KEY} to ignore the situation and mark stag3 binaries as built"
								read -s -n1 _AXE_TMP_CHAR
								axe_info "you pressed $_AXE_TMP_CHAR"
								if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
									nano "$_AXE_DIR/fails_display.list"
									_axe_escape=16
								else
									_AXE_STAGE3_BINARIES_BUILT_YES=1
									save_settings
								fi ;;
						esac
					fi
				else
					[[ $_AXE_STAGE3_SETUP_COMPLETE_YES -eq 1 ]] && axe_info "you need to setup the stage 3 build first ......"
					[[ $_AXE_STAGE3_BINARIES_BUILT_YES -eq 1 ]] && axe_info "stage 3 binaries already built skipping ......"
				fi ;;	
	
	
#finalise stage 3
			z|Z) if [[ $_AXE_STAGE3_FINALISE_COMPLETE_YES -eq 0 && $_AXE_STAGE3_BINARIES_BUILT_YES -eq 1 ]]; then
					axe_info "${_AXE_Y} if you want to finalise stage 2? this will mask of the abbility to build to stage 3"
					read -s -n1 _AXE_TMP_CHAR
					axe_info "you pressed $_AXE_TMP_CHAR"
					if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
						stage2_finalise
						if [[  $? -eq 0 ]]; then
							_AXE_STAGE3_FINALISE_COMPLETE_YES=1
							_AXE_STAGE=3
							save_settings
						fi
					fi
				else
					[[ $_AXE_STAGE2_BINARIES_BUILT_YES -eq 0 ]] && axe_info "you need to build yor stage 2 binaries first ......"
					[[ $_AXE_STAGE3_FINALISE_COMPLETE_YES -eq 1 ]] && axe_info "stage 3 already finalised ......"
				fi ;;				
#desktop 			
				
			d|D) if [[ $_AXE_STAGE3_FINALISE_COMPLETE_YES -eq 1 || $_AXE_STAGE2_FINALISE_COMPLETE_YES -eq 1 ]]; then
					if [[ $_AXE_STAGE3_FINALISE_COMPLETE_YES -eq 0 ]]; then
						axe_info "${_AXE_Y} if you want to build your full desktop ${_AXE_ANY_OTHER_KEY} to return to the main menu"
						read -s -n1 _AXE_TMP_CHAR
						axe_info "you pressed $_AXE_TMP_CHAR"
						if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
							build_list "$_AXE_DIR/desktop.list"
							case $?	in
								0) _AXE_DESKTOP_BUILT_YES=1 && save_settings ;;
								1)  axe_fuck " one or more pkgbuilds in $_AXE_DIR/desktop.list did not build install export or was not found"
									axe_fuck " this could be a problem or just a minor glitch you can ignore"
									axe_fuck " these are the packages that failed build" && any_key
									nano "$_AXE_DIR/fails_display.list"
									axe_fuck " ${_AXE_Y} exit, check your build logs, do some work and try again ${_AXE_ANY_OTHER_KEY} to ignore the situation and mark desktop as built"
									read -s -n1 _AXE_TMP_CHAR
									axe_info "you pressed $_AXE_TMP_CHAR"
									if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
										nano "$_AXE_DIR/fails_display.list"
										_axe_escape=14
									else
										_AXE_DESKTOP_BUILT_YES=1
										save_settings
									fi ;;
							esac
						fi
					else
						axe_warn "desktop already built"
					fi
				else
					axe_warn "you need to finalise your system at a stage first ......"
				fi ;;
				
				
#update pkgbuild dir		
			m|M) if [[ $_AXE_STAGE3_FINALISE_COMPLETE_YES -eq 1 || $_AXE_STAGE2_FINALISE_COMPLETE_YES -eq 1 ]]; then
					axe_info "lets run through $_AXE_PKGBUILD_DIR clean out any out of date pkgbuilds, rebuilding as i go"
					any_key
					
					refresh_git "$_AXE_GIT_PKGBUILD_DIR" "$_AXE_GIT_MAINTAINED_PKGBUILD_DIR" "$_AXE_INPUT_PKGBUILD_DIR" 
					if [[ $? -eq 0 ]]; then
						version_check_pkgbuild_dir "$_AXE_INPUT_PKGBUILD_DIR" --noint
						_axe_update_pkgbuild_dir_return=$?
							
			
						if [[ $_axe_update_pkgbuild_dir_return -eq 2 ]]; then
							axe_warn "There were some process problems but nothing was out of date, will display a list so you can double check" && any_key
							nano "$_AXE_DIR/update_pkgbuild_dir_problems.list"
							axe_info "${_AXE_Y} if you want to quit now and investigate some pkgbuilds etc ${_AXE_ANY_OTHER_KEY} to continue"
							#backup update_pkgbuild_dir_problems.list
							cat "$_AXE_DIR/update_pkgbuild_dir_problems.list" > "$_AXE_DIR/update_problems-$(date +%Y%m%d-%H%M%S)"
							rm -f "$_AXE_DIR/update_pkgbuild_dir_problems.list"
							read -s -n1 _AXE_TMP_CHAR
							axe_info "you pressed $_AXE_TMP_CHAR"
							[[ "$_AXE_TMP_CHAR" == "y" ]] && _axe_escape=18
						fi
						
						if [[ $_axe_update_pkgbuild_dir_return -eq 3 ]]; then
							axe_fuck "there were some process problems and some packages are definatly are out of date, rectify the situation then re-run" && any_key
							nano "$_AXE_DIR/update_pkgbuild_dir_problems.list"
							#backup update_pkgbuild_dir_problems.list
							cat "$_AXE_DIR/update_pkgbuild_dir_problems.list" > "$_AXE_DIR/update_problems-$(date +%Y%m%d-%H%M%S)"
							rm -f "$_AXE_DIR/update_pkgbuild_dir_problems.list"
							axe_info "${_AXE_Y} if you want to export the updateable pkgbuilds to USB stick ${_AXE_ANY_OTHER_KEY} if not,"
							read -s -n1 _AXE_TMP_CHAR
							axe_info "you pressed $_AXE_TMP_CHAR"
							[[ "$_AXE_TMP_CHAR" == "y" ]] && export_pkgbuilds_to_usb "$_AXE_DEV_UPDATE_EXPORT_DIR" "$_AXE_USB_UPDATEABLE_PKGBUILD_DIR"
							_axe_escape=19
						fi
						
						if [[ $_axe_update_pkgbuild_dir_return -eq 1 ]]; then
							axe_fuck "the following PKGBUILDS are out of date, rectify the situation then re-run" && any_key
							nano "$_AXE_DIR/update_pkgbuild_dir_problems.list"
							#backup update_pkgbuild_dir_problems.list
							cat "$_AXE_DIR/update_pkgbuild_dir_problems.list" > "$_AXE_DIR/update_problems-$(date +%Y%m%d-%H%M%S)"
							rm -f "$_AXE_DIR/update_pkgbuild_dir_problems.list"
							axe_info "${_AXE_Y} if you want to export the updateable pkgbuilds to USB stick ${_AXE_ANY_OTHER_KEY} if not,"
							read -s -n1 _AXE_TMP_CHAR
							axe_info "you pressed $_AXE_TMP_CHAR"
							[[ "$_AXE_TMP_CHAR" == "y" ]] && export_pkgbuilds_to_usb "$_AXE_DEV_UPDATE_EXPORT_DIR" "$_AXE_USB_UPDATEABLE_PKGBUILD_DIR"
							_axe_escape=20
						fi
						
						
						if [[ $_axe_update_pkgbuild_dir_return -eq 0 ]]; then
							update_pkgbuild_dir "$_AXE_PKGBUILD_DIR"
							if [[ ! $? -eq 0 ]]; then
								axe_fuck "the following PKGBUILDS have some issues, rectify the situation then re-run"
								#backup update_pkgbuild_dir_problems.list
								cat "$_AXE_DIR/update_pkgbuild_dir_problems.list" > "$_AXE_DIR/update_problems-$(date +%Y%m%d-%H%M%S)"
								rm -f "$_AXE_DIR/update_pkgbuild_dir_problems.list"
								_axe_escape=21
							fi
						fi
						

						
					else
						axe_warn "git failed to refresh"
					fi
				else	
					axe_warn "you need fetch sources"
				fi ;;
				
				
			*) _axe_escape=51 ;;

		esac
	done

	
	
	axe_block "End of main_menu"
	return $_axe_escape
}

# setup functions **********************************************************************************************************************************************
#***************************************************************************************************************************************************************

function check_dir()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of check_dir"
	
	[[ ! -d "$_AXE_DIR" ]] && axe_info "creating $_AXE_DIR" && mkdir -pv "$_AXE_DIR"
	[[ ! -d "$_AXE_CHROOT_BUILD_DIR" ]] && axe_info "creating $_AXE_CHROOT_BUILD_DIR" && mkdir -pv "$_AXE_CHROOT_BUILD_DIR"
	[[ ! -d "$_AXE_INPUT_PKGBUILD_DIR" ]] && axe_info "creating $_AXE_INPUT_PKGBUILD_DIR" && mkdir -pv "$_AXE_INPUT_PKGBUILD_DIR"
	[[ ! -d "$_AXE_PKGBUILD_DIR" ]] && axe_info "creating $_AXE_PKGBUILD_DIR" && mkdir -pv "$_AXE_PKGBUILD_DIR"
	[[ ! -d "$_AXE_USER_OVERIDE_PKGBUILD_DIR" ]] && axe_info "creating $_AXE_USER_OVERIDE_PKGBUILD_DIR" && mkdir -pv "$_AXE_USER_OVERIDE_PKGBUILD_DIR"
	[[ ! -d "$_AXE_DEV_UPDATE_EXPORT_DIR" ]] && axe_info "creating $_AXE_DEV_UPDATE_EXPORT_DIR" && mkdir -pv "$_AXE_DEV_UPDATE_EXPORT_DIR"
	[[ ! -d "$_AXE_BINARY_EXPORT_DIR" ]] && axe_info "creating $_AXE_BINARY_EXPORT_DIR" && mkdir -pv "$_AXE_BINARY_EXPORT_DIR"
	[[ ! -d "$_AXE_SRC_EXPORT_DIR" ]] && axe_info "creating $_AXE_SRC_EXPORT_DIR" && mkdir -pv "$_AXE_SRC_EXPORT_DIR"
	[[ ! -d "$_AXE_STAGE2_BINARY_REPO_DIR" ]] && axe_info "creating $_AXE_STAGE2_BINARY_REPO_DIR" && mkdir -pv "$_AXE_STAGE2_BINARY_REPO_DIR"
	[[ ! -d "$_AXE_STAGE3_BINARY_REPO_DIR" ]] && axe_info "creating $_AXE_STAGE3_BINARY_REPO_DIR" && mkdir -pv "$_AXE_STAGE3_BINARY_REPO_DIR"
	[[ ! -d "$_AXE_LOCAL_BINARY_REPO_DIR" ]] && axe_info "creating $_AXE_LOCAL_BINARY_REPO_DIR" && mkdir -pv "$_AXE_LOCAL_BINARY_REPO_DIR"
	[[ ! -d "$_AXE_RAM_BUILD_DIR" ]] && axe_info "creating $_AXE_RAM_BUILD_DIR" && mkdir -pv "$_AXE_RAM_BUILD_DIR"
	[[ ! -d "$_AXE_HDD_BUILD_DIR" ]] && axe_info "creating $_AXE_HDD_BUILD_DIR" && mkdir -pv "$_AXE_HDD_BUILD_DIR"
	[[ ! -d "$_AXE_LOGS_DIR" ]] && axe_info "creating $_AXE_LOGS_DIR" && mkdir -pv "$_AXE_LOGS_DIR"
	[[ ! -d "$_AXE_GIT_PKGBUILD_DIR" ]] && axe_info "creating $_AXE_GIT_PKGBUILD_DIR" && mkdir -pv "$_AXE_GIT_PKGBUILD_DIR"
	[[ ! -d "$_AXE_GIT_BIN_DIR" ]] && axe_info "creating $_AXE_GIT_BIN_DIR" && mkdir -pv "$_AXE_GIT_BIN_DIR"
	[[ ! -d "$_AXE_PACMAN_CACHE_DIR" ]] && axe_info "creating $_AXE_PACMAN_CACHE_DIR" && mkdir -pv "$_AXE_PACMAN_CACHE_DIR"
	[[ ! -d "$_AXE_FAIL_BUILD_LOGS_DIR" ]] && axe_info "creating $_AXE_FAIL_BUILD_LOGS_DIR" && mkdir -pv "$_AXE_FAIL_BUILD_LOGS_DIR"
	[[ ! -d "$_AXE_GIT_BASE_INFORMATION_DIR" ]] && axe_info "creating $_AXE_GIT_BASE_INFORMATION_DIR" && mkdir -pv "$_AXE_GIT_BASE_INFORMATION_DIR"
	
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of check_dir"
}

function check_for_toolchain_change()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of check_for_toolchain_change"
	
	if [[ $_AXE_MULTILIB_SUFFIX == "undecided" ]]; then
		#check for multilib toolchain
		if [[ -s "/usr/lib32" ]]; then
			axe_info "detected /usr/lib32, obviously assuming i am running on a multilib system"
			_AXE_MULTILIB_SUFFIX="-multilib"
			save_settings
			if [[ $(grep "#\[multilib\]" "$_AXE_PACMAN_CONF_PATH") ]]; then
				axe_info "found that your multilib repo is commented out, the arch installer does this as standard, am enabling it"
				echo "#entry added by axe " >> "$_AXE_PACMAN_CONF_PATH"
				echo "[multilib]" >> "$_AXE_PACMAN_CONF_PATH"
				echo "SigLevel = PackageRequired" >> "$_AXE_PACMAN_CONF_PATH"
				echo "Include = /etc/pacman.d/mirrorlist" >> "$_AXE_PACMAN_CONF_PATH"
				echo "#end of axe entry" >> "$_AXE_PACMAN_CONF_PATH"			
			fi
		else
			axe_info "did not detected /usr/lib32, obviously assuming i am running on a pure x64 system"
			_AXE_MULTILIB_SUFFIX=""
			save_settings
		fi
	
	else
		[[ $_AXE_MULTILIB_SUFFIX == "" &&  -s "/usr/lib32" ]] && axe_warning "toolchain swiched to multilib, marking toolchain for recompilation" && _AXE_TOOLCHAIN_OPTIMUM_YES=0 && save_settings
		[[ $_AXE_MULTILIB_SUFFIX == "-multilib" && ! -s "/usr/lib32" ]] && axe_warning "toolchain swiched to pure x64 /x86, marking toolchain for recompilation" && _AXE_TOOLCHAIN_OPTIMUM_YES=0 && save_settings
	fi
	
	
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of check_for_toolchain_change"
}

function check_makepkg_valid()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of check_makepkg_valid"
	
	local VAR="_axe_difference"
	_axe_difference=""
	
	#check that my tag is in makepkg and also decide who modified it me or the human
	if [[ $(cat "$_AXE_MAKEPKG_CONF_PATH" | grep '#AXE modified this file') ]]; then
		axe_info "well looking promissing i found the tag in makpkg.conf it says i modified the file, now lets check if its been altered"
		cmp "$_AXE_MAKEPKG_CONF_PATH" "$_AXE_DIR/makepkg.conf.axemodified"
		if [[ $? -eq 0 ]]; then
			axe_info "good as far as i can tell you have not altered makepkg.conf since i modified makepkg.conf"
		else
			axe_fuck "HEY someone , or some other script , has altered makepkg.conf since i first modified it"
			axe_fuck "do you want me to use my original backup and continue ? i am assuming most of my system files have been untouched"
			axe_fuck "and this little hickup is due to me having been ctrlc_ed during a later compile phase where i am compiling with -O3"
			axe_difference=$(cmp "$_AXE_MAKEPKG_CONF_PATH" $_AXE_DIR/makepkg.conf.humanmodified)
			axe_fuck "this is what the differences are $_axe_difference"
			axe_fuck "press ${_AXE_Y} to continue and use my backup or ${_AXE_ANY_KEY} to just ignore the situation"
			read -s -n1 _AXE_TMP_CHAR
			axe_info "you pressed $_AXE_TMP_CHAR"
			if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
				cp -pf "$_AXE_DIR/makepkg.conf.axemodified" "$_AXE_MAKEPKG_CONF_PATH"
				if [[ ! $? -eq 0 ]]; then
					axe_fuck " failed to recover backup"
					any_key
					return 1
				fi	
			else
				axe_info "ok ignoring any makepkg.conf changes, hope you know what your doing good luck , will show you makepkg.conf so you can look for yourself"
				any_key
				nano "$_AXE_MAKEPKG_CONF_PATH"
			fi
		fi
	fi

	if [[ $(cat "$_AXE_MAKEPKG_CONF_PATH" | grep '#THE HUMAN modified this file') ]]; then
		axe_info "well looking promissing i found the tag in makpkg.conf it says the human modified the file"
		cmp "$_AXE_MAKEPKG_CONF_PATH" "$_AXE_DIR/makepkg.conf.humanmodified"
		if [[ $? -eq 0 ]]; then
			axe_info "good as far as i can tell you have not altered makepkg.conf since i setup the system"
		else
			axe_fuck "HEY someone , or some other script, has altered $_AXE_MAKEPKG_CONF_PATH since you first modified it"
			axe_fuck "do you want me to use my original backup of your handywork and continue ? i am assuming most of my system files have been untouched"
			axe_fuck "and this little hickup is someones brainfart, by the way this is the same makepkg.conf that you chose to modify for youself"
			_axe_difference=$(cmp "$_AXE_MAKEPKG_CONF_PATH" $_AXE_DIR/makepkg.conf.humanmodified)
			axe_fuck " this is what the differences are $_axe_difference"
			axe_fuck "press ${_AXE_Y} to continue and use my backup of the humans efforts or${_AXE_ANY_KEY} to just ignore the situation"
			read -s -n1 _AXE_TMP_CHAR
			axe_info "you pressed $_AXE_TMP_CHAR"
			if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
				cp -pf $_AXE_DIR/makepkg.conf.humanmodified "$_AXE_MAKEPKG_CONF_PATH"
				if [[ ! $? -eq 0 ]]; then
					axe_fuck " failed to recover backup"
					any_key
					return 1
				fi
			else
				axe_info "ok ignoring any makepkg.conf changes, hope you know what your doing good luck , will show you makepkg.conf so you can look for yourself"
				any_key
				nano "$_AXE_MAKEPKG_CONF_PATH"
			fi
		fi
	fi

	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of check_makepkg_valid"

}

function intro()
{
	[[ "$_AXE_SKIP_INTRO_YES" -eq 1 ]] && axe_info "respecting settings and skipping intro" && return 1


	axe_info "Hi I am  ${_AXE_AER} 
I am a script designed to massivly rebuild a sizable part of the Archlinux distribution in a particular direction.

My Directives........
1) AXE does not like systemd..... remove systemd at root by rebuliding around udev-fork
2) AXE does not like consolekit, polkit, pulseaudio, sudo, socialweb, colord..... remove as much as possible of them at root by clever patching and recompilation
and either replace thyeir functionality or remove the need for them entirly
3) AXE likes root.... make it easy and convenient to run everything as root, AXE uses its own far more effective security model
4) AXE only supports GTK 2/3, ( at the moment )
5) AXE likes Cinnamon

Why? ........ The nature of GCC and linux as a concept allows a user to tailor their Opperating system (oS) to the exact peramiters of the hardware
and to their personal tastes, by doing so one can achieve considerable speed and stability improvements.

Why not Gentoo or any other source based distro? ..... Good question, gentoo is an excellent alternative to AXE and you should seariously consider
gentoo before trying AXE, having said that Archlinux is very very cutting edge and progressive, whereas gentoo is not, and portage is very
hard to learn and not as featurefull as pacman/makepkg"

	any_key

	axe_info "How is all this achieved ? ..... Obviously as a script i cannot be imparted with all the code necessary to modify Arch
so extensivly, so my creator has produced a collection of over 60 PKGBUILD's to do the job, they replace standard Arclinux packages
during the build process, these PKGBUILDS have been carefully modified to replace systemd and achieve my other goals,
they are also being maintained inline with arch packages and in some cases are better/newer ( depends on opinion ).
The github locations for the repo,s i use are

git://github.com/Jubei-Mitsuyoshi/AXE-BINARIES.git ...... which contains I7 compiled binaries (more on that later )
git://github.com/Jubei-Mitsuyoshi/AXE-PKGBUILDS.git ..... which contains all my creators original work

all the modifications are open to public scrutiny and critisism."

	any_key


	axe_info "What i need........ i am designed to be run on a bare archlinux setup the following install medium have been tested

	archlinux-2012.08.04-dual.iso
	archlinux-2012.08.26-x86_64.iso
	archlinux-2012.09.07-dual.iso
	
I also need a stable and quick wired internet connection, ( wifi support on the way ) all the other dependencies etc i will fetch for myself.

What do you need....... you need to have some basic knowlege of pacman, and understand what optimisation flags mean,
not because you need to do any programming or anything but because i will be asking you some questions about your
personal optimisation preferences, it would be usefull if you knew what the fuck i was talking about.
	
How long does it take ..... About 24 hours on an I7 laptop, considerably less on a similar desktop

When i'm done ....... you will have a collection of optimised binaries, FULLY and beautifully crafted for your processor
you can then share these binaries with other AXE users so they can enjoy full optimisatioon without the headache
of compiling "
	
	any_key
	
	axe_info "if you want to skip this intro screen from now on press ${_AXE_ANY_OTHER_KEY} to display it next time press ${_AXE_Y}"
	read -s -n1 _AXE_TMP_CHAR
	axe_info "you pressed $_AXE_TMP_CHAR"
	if 	[[ ! "$_AXE_TMP_CHAR" == "y"  ]]; then
		_AXE_SKIP_INTRO_YES=1
		save_settings
	fi
	
}


# ref and working on *******************************************************************************************************************************************
#***************************************************************************************************************************************************************




# trash bin *******************************************************************************************************************************************
#***************************************************************************************************************************************************************
function load_optimised_toolchain_git()
{
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "Start of load_optimised_toolchain_git"
	local VAR="_axe_local_return_lotg"
	_axe_local_return_lotg=0
	
	toolchain_tag_check > /dev/null
	if [[ $? -eq 1 ]]; then
		cd "$_AXE_GIT_BIN_OPTIMUM_TOOLCHAIN_DIR"
		pacman -U  *.pkg.tar.xz
		if [[ $? -eq 0 ]]; then
			cd /root/
			toolchain_tag_check
			if [[ $? -eq 0 ]]; then
				axe_info "toolchain sucsessfully loaded"
				mask_toolchain_upgrades
			else
			axe_fuck "something is wrong one or more toolcxhain packages still has packager variable "
			_axe_local_return_lotg=3
			fi
		else
			axe_fuck "something is wrong pacman did not install toolchain packages"
			_axe_local_return_lotg=2
		fi
	else
		axe_info "toolchain already has the axe packeger tag skipping"
		_axe_local_return_lotg=1
	fi
	[[ $_AXE_VERBOSE_YES -eq 1 ]] && axe_block "End of load_optimised_toolchain_git"
	
	return $_axe_local_return_lotg
}


	#			if [[ "$_axe_pkgname_vc" == 'mesa' ]]; then
	#				_axe_abs_ver=$(sed '/^\#/d' "$_axe_abs_location/PKGBUILD" | sed '/git/d' | grep -m 1 'pkgver=' | sed 's/pkgver=//' | sed 's/^[ \t]*//')
	#				_axe_abs_rel=$(sed '/^\#/d' "$_axe_abs_location/PKGBUILD" | sed '/git/d' | grep -m 1 'pkgrel=' | sed 's/pkgrel=//' | sed 's/^[ \t]*//')
	#			else
	#				_axe_abs_ver=$(sed '/^\#/d' "$_axe_abs_location/PKGBUILD" | grep -m 1 'pkgver=' | sed 's/pkgver=//')
	#				_axe_abs_rel=$(sed '/^\#/d' "$_axe_abs_location/PKGBUILD" | grep -m 1 'pkgrel=' | sed 's/pkgrel=//')
	#			fi
				
	#			_axe_dir_ver=$(sed '/^\#/d' "$1/$_axe_pkgname_vc/PKGBUILD" | grep -m 1 'pkgver=' | sed 's/pkgver=//')
	#			_axe_dir_axe_rel=$(sed '/^\#/d' "$1/$_axe_pkgname_vc/PKGBUILD" | grep -m 1 '_axe_rel=' | sed 's/_axe_rel=//')
	#			_axe_dir_rel=$(sed '/^\#/d' "$1/$_axe_pkgname_vc/PKGBUILD" | grep -m 1 '_arch_rel=' | sed 's/_arch_rel=//')

					
#				if [[ "$_axe_pkgname_vc" == 'compiz-ubuntu' ]]; then
#					_axe_aur_ver=$(sed '/^\#/d' "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_vc/PKGBUILD" | grep -m 1 'pkgver=' | sed 's/pkgver=//')
#					_axe_aur_rel=$(sed '/^\#/d' "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_vc/PKGBUILD" | grep -m 1 'pkgrel=' | sed 's/pkgrel=//')
#				else
#					_axe_aur_ver=$(sed '/^\#/d' "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_vc/PKGBUILD" | grep -m 1 'pkgver=' | sed 's/pkgver=//')
#					_axe_aur_rel=$(sed '/^\#/d' "$_AXE_RAM_BUILD_DIR/$_axe_pkgname_vc/PKGBUILD" | grep -m 1 'pkgrel=' | sed 's/pkgrel=//')
#				fi
				
				
#				_axe_dir_ver=$(sed '/^\#/d' "$1/$_axe_pkgname_vc/PKGBUILD" | grep -m 1 'pkgver=' | sed 's/pkgver=//')
#				_axe_dir_axe_rel=$(sed '/^\#/d' "$1/$_axe_pkgname_vc/PKGBUILD" | grep -m 1 '_axe_rel=' | sed 's/_axe_rel=//')
#				_axe_dir_rel=$(sed '/^\#/d' "$1/$_axe_pkgname_vc/PKGBUILD" | grep -m 1 '_arch_rel=' | sed 's/_arch_rel=//')


# main script *******************************************************************************************************************************************
#***************************************************************************************************************************************************************

	# Check if root
	if [[ $(whoami) != root ]]; then
		echo -e "\n"
		axe_fuck "you must be some kind of root to even get my attention !  Goodbye !"
		axe_fuck "press ${_AXE_ANY_KEY} to continue"
		read -n1 -s
		exit 1
	fi
	
	#process input argument
	case $1 in
		-v|--verbose) _AXE_VERBOSE_YES=1 ;;
		
	esac

	

	# basic environment setup
	
	
	check_dir
	
	#load settings if settings not there do first run tasks ( order of tasks impotant do not change)
	if [[ -s "$_AXE_DIR/settings" ]]; then
		source "$_AXE_DIR/settings"
	else
		if [[ ! -s "$_AXE_DIR/original_installed_packages.list" ]]; then
			axe_warn "no settings file detected assuming first run doing first run tasks and writing default values"
			
			#check for and do tmpfs
			if [[ $(cat "$_AXE_FSTAB_PATH" | grep "tmpfs") ]]; then
				axe_info "tmpfs ref found in fstab skipping"
			else
				axe_info "it has come to my attention that sysd is handling tmpfs"
				axe_info "this is not acceptable, since its simply not working, so am writing the correct ref to fstab"
				any_key
				echo "tmpfs		/tmp	tmpfs	nodev,nosuid	0	0" >> "$_AXE_FSTAB_PATH"
				axe_info "please check everything is cool in fstab, you should know how critical that is"
				axe_info "maybe move the tmpfs entry to your prefered location, after you double check i will reboot your pc so do not panic!"
				any_key
				nano "$_AXE_FSTAB_PATH"
				axe_info "double check !!! one typo and your system is unbootable !!!!!!!"
				any_key
				nano "$_AXE_FSTAB_PATH"
				echo "axe" >> "$_AXE_BASH_PROFILE_PATH"
				shutdown -r now
				exit 0 
			fi
			
			#backup pacman.conf
			if [[ -s "$_AXE_DIR/pacman.conf.original" ]]; then
				axe_info "$_AXE_DIR/pacman.conf.original already present skipping"
			else
				axe_info "$_AXE_DIR/pacman.conf.original not found backing up to $_AXE_DIR/pacman.conf.original"
				cp -p "$_AXE_PACMAN_CONF_PATH" "$_AXE_DIR/pacman.conf.original"
				[[ ! -s "$_AXE_DIR/pacman.conf.original" ]] && axe_warn "unable to backup pacman .conf to _AXE_DIR/pacman.conf.original, please check the output above" && any_key
			fi
		
			if [[ -s "/etc/pacman.conf.axebackup" ]]; then
				axe_info "/etc/pacman.conf.axebackup already present skipping"
			else
				cp -p "$_AXE_PACMAN_CONF_PATH" "/etc/pacman.conf.axebackup"
				[[ ! -s "/etc/pacman.conf.axebackup" ]] && axe_warn "unable to backup pacman .conf to _AXE_DIR/pacman.conf.original, please check the output above" && any_key
				axe_info "/etc/pacman.conf.axebackup not found backing up to pacman.conf.axebackup"
			fi
			#add archlinux fr
			if [[ $(cat "$_AXE_PACMAN_CONF_PATH" | grep 'archlinuxfr') ]]; then
				axe_info "an entry for archlinuxfr already exists------skipping"
			else
				axe_info "did not find an entry for archlinuxfr creating one"
				echo "#entry added by AXE cos you dont have it and i need yaourt for AUR" >> "$_AXE_PACMAN_CONF_PATH"
				echo "[archlinuxfr]" >> "$_AXE_PACMAN_CONF_PATH"
				echo 'Server = http://repo.archlinux.fr/$arch' >> "$_AXE_PACMAN_CONF_PATH"
				echo "#end of AXE entry" >> "$_AXE_PACMAN_CONF_PATH"
				if [[ $(cat "$_AXE_PACMAN_CONF_PATH" | grep 'archlinuxfr') ]]; then
					axe_info "archlinuxfr sucsessfully added"
				else
					axe_fuck "archlinuxfr not added, since i need yaourt this is a fatal error, exiting"
					exit 3
				fi
			fi
			
			#fetch deps
			axe_info "ok time to fetch all the progs i need to get the job done"
			any_key
		
			if [[ -s "/usr/lib32" ]]; then
				pacman -Syu
				pacman -S --needed  expac yaourt abs git sed grep nano diffutils patch autoconf automake bison fakeroot flex m4 make pkg-config multilib-devel mc
				if [[ ! $? -eq 0 ]]; then
					axe_fuck "pacman install problem, read the output above and rectify, this is a fatal error exiting"
					exit 3
				fi														
			else
				pacman -Syu
				pacman -S --needed expac yaourt abs git devtools sed grep nano diffutils mc base-devel
				if [[ ! $? -eq 0 ]]; then
					axe_fuck "pacman install problem, read the output above and rectify, this is a fatal error exiting"
					exit 3
				fi			
			fi
		
		
			axe_info "updating ABS"
			axe_info "by the way if ABS sync gets stuck at multilib download just ${_AXE_CTRLC} and i will continue,"
			axe_info "there is no harm in this and it only happend once, subsiquent times ABS uses a different sync method which does not stick, so i just check twice to make sure :)"
			
			abs
			abs
			
			
			
			#make backup of originally installed packages, if not already there, we will use this later
			if [[ -s "$_AXE_DIR/original_installed_packages.list" ]]; then
				axe_fuck "$_AXE_DIR/original_installed_packages.list already there very strange and should not happen,someone been tampering ?"
				any_key
			else
				axe_info "writing all installed packages to $_AXE_DIR/original_installed_packages.list"
				expac "%n %v %p"  > "$_AXE_DIR/original_installed_packages.list"
				if [[ -s "$_AXE_DIR/original_installed_packages.list" ]]; then
					axe_info "installed packages list in $_AXE_DIR/original_installed_packages.list written sucessfully"
				else
					axe_warn "problem with writing $_AXE_DIR/original_installed_packages.list please check output above this is a fatal error, exiting"
					any_key
					exit 3
				fi
			fi
			
			_AXE_FIRST_RUN_COMPLETE_YES=1
			save_settings
			
			if [[ -s "$_AXE_DIR/settings" ]]; then
				axe_info "default settings file written sucsessfully"
			else
				axe_fuck "problem with writing default settings file, this is a fatal error, exiting"
				any_key
				exit 3
			fi
			
		else
			axe_fuck "well fucked up dude !!! my settings file, is missing, this is a fatal error . exiting"
			any_key
			exit 3
		fi
	fi
	

	
	#check up to date
	if [[ $(cat "$_AXE_BASH_PROFILE_PATH" | grep 'axe') ]]; then
		axe_info "removing my entry from $_AXE_BASH_PROFILE_PATH"
		sed -i 's/axe//' "$_AXE_BASH_PROFILE_PATH"
		_AXE_RESUME_YES=0
		save_settings
	else
		axe_info "first things first we need to make sure your Arch mirrors are correct"
		pacman -Sy
		if [[ ! $? -eq 0 ]]; then
			axe_warn "problem with pacman sync, check output above and internet connection"
			any_key
		fi
		
	fi
	
	check_for_toolchain_change
	create_toolchain_list
	create_axe_list
	create_helper_axe_get_deps
	create_helper_axe_get_vers
	create_replace_systemd_list
	create_nvidia_list
	create_desktop_list
	intro
	[[ $_AXE_MAKEPKG_CONF_SETUP_YES -eq 1 ]] && check_makepkg_valid

	# some pkg fail in root without this
	export FORCE_UNSAFE_CONFIGURE=1


	#pre main run actions
	pre_menu
	
	#exports makeflags
	export _AXE_CUPS
	export _AXE_BLUETOOTH
	export _AXE_COLORD
	export _AXE_NETWORKMANAGER
	#exports pkg tags
	export _AXE_PREFIX_REL
	export _AXE_STAGE
	export _AXE_PROCESOR_REL
	export _AXE_SUFFIX_REL
	
	bootstrap_menu
	if [[ $? -eq 0 ]]; then
		_AXE_RESUME_YES=1
		save_settings
		# write restsrt command to /etc/profile
		echo "axe" >> "$_AXE_BASH_PROFILE_PATH"
		shutdown -r now
		exit 0
	fi
	
	
	#check the toolchain still cool
	toolchain_tag_check
	if [[ $? -eq 1 ]]; then
		axe_info "One or more of the toolchain components have been updated rendering the toolchain non-perfect, hence am marking the toolchain for recompilation"
		_AXE_TOOLCHAIN_OPTIMUM_YES=0
		save_settings
	fi
	
	#main menu
	main_menu
	if [[ $? -eq 0 ]]; then
		_AXE_RESUME_YES=1
		save_settings
		# write restsrt command to /etc/profile
		echo "axe" >> "$_AXE_BASH_PROFILE_PATH"
		shutdown -r now
		exit 0
	fi
	
	exit 0

	

#end of main section**************************************************************************************************************************************
