#!/bin/bash
#Archlinux eXtream rEbuilder
#AXE-0.0.1


	#vars that work :)
	_AXE_DIR='/root/axebuilder'
	
	#calculate subdirs created by setup
	#build locations
	_AXE_CHROOT_BUILD_DIR="$_AXE_DIR/AxeBuildChroot"
	_AXE_HDD_BUILD_DIR="$_AXE_DIR/AxeBuildHdd"
	_AXE_RAM_BUILD_DIR="/tmp/axebuild"
	#general
	_AXE_PACMAN_CACHE_DIR="$_AXE_DIR/AxePacmanCache"
	_AXE_GIT_DIR="$_AXE_DIR/AxeGitPkgbuilds"
	_AXE_GIT_BIN_DIR="$_AXE_DIR/AxeGitBinaries"
	#log dirs
	_AXE_LOGS_DIR="$_AXE_DIR/AxeBuildLogsProgress"
	_AXE_FAIL_BUILD_LOGS_DIR="$_AXE_DIR/AxeBuildLogsFailed"
	#pkgbuild input dirs
	_AXE_PKGBUILD_DIR="$_AXE_DIR/AxePkgbuilds"
	_AXE_INPUT_PKGBUILD_DIR="$_AXE_DIR/AxePkgbuildsInput"
	_AXE_USER_OVERIDE_PKGBUILD_DIR="$_AXE_DIR/AxePkgbuildsUserOveride"
	#binary repo dirs
	_AXE_LOCAL_BINARY_REPO_DIR="$_AXE_DIR/AxeBinaryRepoLocal"
	_AXE_STAGE2_BINARY_REPO_DIR="$_AXE_DIR/AxeBinaryRepoStage2"
	_AXE_STAGE3_BINARY_REPO_DIR="$_AXE_DIR/AxeBinaryRepoStage3"
	#export dirs
	_AXE_BINARY_EXPORT_DIR="$_AXE_DIR/AxeExportsBinary"
	_AXE_SRC_EXPORT_DIR="$_AXE_DIR/AxeExportsAllSource"
	_AXE_DEV_UPDATE_EXPORT_DIR="$_AXE_DIR/AxePkgbuildsUpdatable"
	_AXE_OPTIMISED_TOOLCHAIN_DIR="$_AXE_DIR/AxeToolchainOptimised"
	
	
	#tags
	_AXE_PACKAGER_NAME_START='axe_i7_seed'
	_AXE_PACKAGER_NAME_FINAL='axe_i7_tree'
	_AXE_BASE_REL_TAG='pkgrel=99.1axe'
	
	#urls
	_AXE_BIN_GIT_URL='git://github.com/Jubei-Mitsuyoshi/AXE-BINARIES.git'
	_AXE_GIT_URL='git://github.com/Jubei-Mitsuyoshi/AXE-PKGBUILDS.git'
	
	#git locations
	_AXE_REMOTE_GIT_REPO_ENTRY='Server = https://github.com/Jubei-Mitsuyoshi/AXE-BINARIES/I7/raw/master/'  #note do not change hard coded at the moment
	_AXE_GIT_MAINTAINED_PKGBUILD_DIR="$_AXE_GIT_DIR/AXE-MAINTAINED"
	_AXE_GIT_BIN_TOOLCHAIN_DIR="$_AXE_GIT_BIN_DIR/I7-TOOLCHAIN"
	_AXE_GIT_BIN_RUNIT_DIR="$_AXE_GIT_BIN_DIR/I7-TOOLCHAIN"

	# runit init settings
	_AXE_HARDWARECLOCK='localtime'
	_AXE_TIMEZONE='Europe/Copenhagen'
	_AXE_KEYMAP='dk'
	_AXE_CONSOLEFONT=""
	_AXE_CONSOLEMAP=""
	_AXE_DAEMON_ARRAY='syslog-ng acpid eth0 crond agetty-tty1'
	
	#usb stick locations
	_AXE_USB_STICK_DEVICE='/dev/sdd'
	_AXE_USB_STICK_MNT='/media/usbstick'
	_AXE_USB_DEV_PKGBUILD_DIR='AXE-MAINTAINED'
	_AXE_USB_I7_TOOLCHAIN_BIN_DIR='I7-TOOLCHAIN'
	_AXE_INIT_BIN_DIR='RUNIT-MUSL'
	_AXE_USB_UPDATEABLE_PKGBUILD_DIR='AxePkgbuilds_NeedingUpdating'

	
	
	#initialise vars (INTS)
	_AXE_BUILD_PROBLEM_TOOLCHAIN_YES=0
	_AXE_CORES=0
	_AXE_GLIBC_REP=1
	_AXE_GCC_REP=1
	_AXE_BINUTILS_REP=1
	_AXE_LIBTOOL_REP=1
	_AXE_LIBLTDL_REP=0
	_AXE_LINUX_MENU_YES=0
	
	
	#initialise vars (CHARS)
	_AXE_TMP_CHAR=""
	_AXE_TMP_CHAR2=""
	_AXE_MULTILIB_SUFFIX=""
	_AXE_LINUX_O2_O3='--o2'
	
	
	
	#defaults ( should all be listed in save_settings )
	#resumes
	_AXE_LINUX_RESUME_YES=0
	_AXE_STAGE_2_RESUME_YES=0
	_AXE_BOOTSTRAP_RESUME_YES=0
	
	
	# choices
	_AXE_DEPS_MET_YES=0
	_AXE_XORG=""
	_AXE_I7_HARDWARE_YES=1
	_AXE_I7_HARDWARE_SAVED_YES=0
	_AXE_OPT_TYPE=""
	_AXE_NVIDIA=""
	_AXE_BUILD_STAGE3=""
	_AXE_SKIP_MENU_YES=0
	
	#program stage counters
	_AXE_SOURCES_FETCHED_YES=0
	_AXE_VERSIONS_CHECKED_YES=0
	_AXE_INIT_REPLACED_YES=0
	_AXE_UDEV_INSTALLED_YES=0
	_AXE_BINARY_BOOTSRTAP_YES=0
	_AXE_FINAL_EXTRAS_INSTALLED_YES=0
	_AXE_WHATS_LEFT_BUILT_YES=0
	_AXE_STAGE2_SETUP_COMPLETE_YES=0
	_AXE_STAGE3_SETUP_COMPLETE_YES=0
	_AXE_STAGE=1
	_AXE_TOOLCHAIN_STAGE=1
	_AXE_PKGBUILD_DIR_FILLED_YES=0
	_AXE_GIT_FETCHED_YES=0


	
	#set vars that change with stage or prefs
	


	# VERY IMPORTANT ASSIGNMENT, will only be changed when we get to stage 2 by resume_with_settings routine
	_AXE_PACKAGER_NAME="$_AXE_PACKAGER_NAME_START"

	
	
	txtred='\e[0;31m' # red
	txtgrn='\e[0;32m' # green
	txtylw='\e[0;33m' # yellow
	txtblu='\e[0;34m' # blue
	txtpur='\e[0;35m' # purple
	txtcyn='\e[0;36m' # cyan
	txtwht='\e[0;37m' # white
	bldred='\e[1;31m' # red - Bold
	bldgrn='\e[1;32m' # green
	bldylw='\e[1;33m' # yellow
	bldblu='\e[1;34m' # blue
	bldpur='\e[1;35m' # purple
	bldcyn='\e[1;36m' # cyan
	bldwht='\e[1;37m' # white
	txtund=$(tput sgr 0 1) # Underline
	txtbld=$(tput bold) # Bold
	txtrst='\e[0m' # Text reset


	# Feedback indicators
	_AXE_G="${bldgrn} g ${bldwht}"
	_AXE_W="${bldgrn} w ${bldwht}"
	_AXE_Y="${bldgrn} y ${bldwht}"
	_AXE_E="${bldgrn} e ${bldwht}"
	_AXE_ANY_KEY="${bldgrn} ANY KEY ${bldwht}"
	_AXE_ANY_OTHER_KEY="${bldgrn} ANY OTHER KEY ${bldwht}"
	_AXE_U="${bldgrn} u ${bldwht}"
	_AXE_B="${bldgrn} b ${bldwht}"
	_AXE_M="${bldgrn} m ${bldwht}"
	_AXE_CTRLC="${bldgrn} CTRL-C ${bldwht}"
	_AXE_S="${bldgrn} s ${bldwht}"
	_AXE_AER="${bldgrn}A${bldwht}rch e${bldgrn}X${bldwht}tream r${bldgrn}E${bldwht}builder"
	_AXE_V="${bldgrn} v ${bldwht}"
	_AXE_F="${bldgrn} f ${bldwht}"
	_AXE_D="${bldgrn} d ${bldwht}"
	_AXE_Q="${bldgrn} q ${bldwht}"
	_AXE_T="${bldgrn} t ${bldwht}"
	_AXE_I="${bldgrn} i ${bldwht}"
	_AXE_R="${bldgrn} r ${bldwht}"
	
	_AXE_INFO_MODE="${bldgrn}AXE-->${bldwht}"
	_AXE_WARN_MODE="${bldcyn}AXE??-->${bldwht}"
	_AXE_FUCKUP_MODE="${txtred}AXE!!-->"
	_AXE_BLOCK_MODE="${bldgrn}BLOCK-->${txtgrn}"
	_AXE_DEBUG_MODE="${bldylw}DEBUG-->${bldwht}"




# list functions these lists are here to allow easy edditing ***************************************************************************************************
#***************************************************************************************************************************************************************

function create_udev_dep_list()
{
	echo -e "\n${_AXE_BLOCK_MODE} Start of create_udev_dep_list${txtrst}"
echo "pcmciautils
pulseaudio
udisks
xf86-video-nouveau
cronie
gstreamer0.10-good
networkmanager
libatasmart
colord
xorg-server
system-config-printer-common
libgusb
thunar
modemmanager
udisks2
libvirt
packagekit
mesa
udevil
spacefm
eez-svn
pup-volume-monitor" > "$_AXE_DIR/udev_dep.list"


	echo -e "${_AXE_BLOCK_MODE} End of create_udev_dep_list${txtrst}"
}

function create_toolchain_list()
{
	echo -e "\n${_AXE_BLOCK_MODE} Start of create_toolchain_list${txtrst}"
echo "linux-api-headers
glibc
binutils$_AXE_MULTILIB_SUFFIX
gcc$_AXE_MULTILIB_SUFFIX
libtool$_AXE_MULTILIB_SUFFIX
zlib
file
gmp
mpfr
libmpc
attr
acl
isl
cloog
ppl
linux" > "$_AXE_DIR/toolchain.list"

	echo -e "${_AXE_BLOCK_MODE} End of create_toolchain_list${txtrst}"
}

function create_toolchain_deps_list()
{
	echo -e "\n${_AXE_BLOCK_MODE} Start of create_toolchain_reinstall_list ${txtrst}"
echo "
zlib
file
gmp
mpfr
libmpc
attr
acl
isl
cloog
ppl" > "$_AXE_DIR/toolchain_deps.list"


	echo -e "${_AXE_BLOCK_MODE} End of create_toolchain_reinstall_list ${txtrst}"
}

function create_base_reinstall_list()
{
	echo -e "\n${_AXE_BLOCK_MODE} Start of create_base_reinstall_list ${txtrst}"
echo "acl
acpi
acpid
apr
apr-util
attr
autoconf
automake
bash
bison
bzip2
ca-certificates
cloog
coreutils
cracklib
cronie
cryptsetup
curl
db
dbus-core
device-mapper
dhcpcd
diffutils
dirmngr
e2fsprogs
elfutils
eventlog
expac
expat
fakeroot
file
filesystem
findutils
flex
freetype2
fuse
gawk
gcc
gcc-libs
gdbm
gettext
git
glib2
glibc
gmp
gnupg
gpgme
gpm
grep
groff
gzip
heirloom-mailx
hwids
iana-etc
inetutils
iproute2
iputils
isl
jfsutils
kbd
keyutils
kmod
krb5
ldns
less
libarchive
libassuan
libcap
libedit
libffi
libgcrypt
libgpg-error
libgssglue
libksba
libldap
libltdl
libmpc
libnl
libpcap
libpipeline
libsasl
libssh2
libtirpc
libtool
libusbx
linux
linux-firmware
logrotate
lvm2
m4
make
man-db
man-pages
mc
mdadm
mkinitcpio
mkinitcpio-busybox
mpfr
namcap
nano
ncurses
neon
openssh
openssl
package-query
pacman
pam
pambase
patch
pciutils
pcmciautils
pcre
perl
perl-error
pinentry
pkg-config
popt
ppl
ppp
procps-ng
psmisc
pth
pyalpm
python
python-pyelftools
readline
reiserfsprogs
rsync
run-parts
sed
shadow
slang
sqlite
subversion
sysfsutils
syslog-ng
sysvinit
sysvinit-tools
tar
texinfo
tzdata
unixodbc
usbutils
util-linux
vi
which
wpa_supplicant
xfsprogs
xz
zlib" > "$_AXE_DIR/base_reinstall.list"


	echo -e "${_AXE_BLOCK_MODE} End of create_base_reinstall_list ${txtrst}"
}

function create_axe_list()
{
echo -e "\n${_AXE_BLOCK_MODE} Start of create_axe_list${txtrst}"
#list good as of 1/10/2012
echo "#base system packages, order from LFS mainly
filesystem
sed
bzip2
ncurses
dialog
shadow
libcap
coreutils
bash
m4
bison
procps-ng
grep
readline
gdbm
inetutils
db
perl
autoconf
automake
procinfo-ng
diffutils
gawk
findutils
flex
gettext
groff
xz
less
gzip
iproute2
kbd
kmod
make
libpipeline
man-db
patch
tar
texinfo
dash
fakeroot
elfutils
# the rest of the base packages including udev deps
eventlog
expat
perl-xml-parser
intltool
libgssglue
libtirpc
cracklib
hdparm
idnkit
ifenslave
iptables
libcap-ng
keyutils
libedit
libnl
libusbx
libusb-compat
lzo2
net-tools
run-parts
popt
sysfsutils
traceroute
p11-kit
nettle
libtasn1
gnutls
usbutils
libpcap
freetype2
fontconfig
nano
bridge-utils
wireless_tools
which
psmisc
pambase
pam
util-linux
e2fsprogs
mlocate
isdn4k-utils
ifenslave
pth
pcre
libffi
openssl
glib2
pkg-config
pinentry
isdn4k-utils
libarchive
iputils
libsasl
openldap
libssh2
curl
openslp
dnsutils
mtdev
acpid
xf86-input-evdev
mkinitcpio-nfs-utils
mkinitcpio-busybox
mkinitcpio --install --nocon --force $_AXE_OPT_TYPE
udev-axe
syslog-ng
dbus-core
lvm2
dmraid
libwacom
iw
libatasmart
lockdev
libgpg-error
libassuan
libgcrypt
libxslt
libksba
sdparm
libgusb
crda
cronie
dnsmasq
dhcpcd
dhcp
gpm
krb5
heirloom-mailx
mdadm
netcfg
librpcsecgss
dirmngr
nfsidmap
rpcbind
openssh
openvpn
pciutils
pcmciautils
gnupg
gpgme
ppp
rfkill
cryptsetup
logrotate
wpa_supplicant
sudo
nfs-utils
sysvinit
wpa_actiond
ca-certificates
# the extended components leading to a desktop eventually
menu-cache
sqlite
python2
python
pygobject2
p11-kit
nettle
libtasn1
gnutls
libxml2
libpng
netpbm
libice
libsm
libxt
libxdmcp
libxau
libxcb
xcb-util
startup-notification
pmount
libx11
libxv
libxext
libdmx
libxi
libxt
libxss
libxmu
libxrender
libxfixes
libxcursor
libfs
libxft
libxrandr
libxinerama
libxcomposite
libxpm
libxtst
libfontenc
libxfont
links
orc
libogg
libvorbis
cdparanoia
shared-mime-info
jade
docbook-xml
rarian
gnome-doc-utils
gtk-doc
pixman
flac
libsndfile
libsamplerate
libxxf86vm
cairo
libdatrie
libthai
pango
gstreamer0.10
gstreamer0.10-base
gstreamer0.10-good
bluez
python2-pybluez
libpciaccess
libdrm
mesa
freeglut
xf86-video-intel
libjpeg-turbo
libtiff
lcms2
alsa-lib
alsa-utils
alsa-firmware
alsa-plugins
python2-pyalsa
python-pyalsaaudio
jasper
lcms
pyudev
rsync
vala
libfm
spacefm
libplist
usbmuxd
libxvmc
xinetd
xorg-server
xf86-video-nouveau
xf86-video-intel
xorg-xrandr
xorg-xbacklight
xorg-xauth
xorg-utils
xorg-server-utils
numactl
icu
libfbclient
irqbalance
dkms
distcc
bftpd
connman
connman-gnome-git
atop
arptables
audit
libdaemon
libexif
libgdiplus
mono
bc
nss-mdns
libglade
python2-cairo
blas
lapack
python-nose
python-numpy
pygtk
dbus-glib
dbus
dbus-python
libmng
mysql
postgresql
unixodbc
atk
gdk-pixbuf2
libnotify
python-notify
avahi
cups
apcupsd
system-config-printer
pycups
talloc
cifs-utils
samba
pysmbc
sane
colord
gtk
gtk2
gtk3
gparted
gnome-keyring
libcroco
librsvg
emacs
apr-util
apache
git
subversion
texlive-bin
qt3
ghostscript
doxygen
wicd
man-db
groff
libasyncns
fftw
pulseaudio
sdl
qingy
upower
parted
sg3_utils
lsof
udisks
gptfdisk
udisks
fuse
xfce4-session
gvfs
laptop-mode-tools
networkmanager
modemmanager
packagekit
accountsservice
pup-volume-monitor
gvfs
libvirt
eeze-svn
gnome-control-center
gnome-session
gnome-settings-daemon
#finally optional stuff
nvclock
nvdock
libvdpau
libcl
nvidia
nvidia-utils
cuda
nvidia-cg-toolkit
python2-pycuda
gnome-settings-daemon-ubuntu
gnome-menus2
muffin-wm
muffin-git
cinnamon
cinnamon-git
alacarte
nemo-fm
nemo-git
compiz-axe
ignite-git
initscripts-git
linux-zen" > "$_AXE_DIR/axe.list"

	echo -e "${_AXE_BLOCK_MODE} End of create_axe_list${txtrst}"

}


function create_replace_udev_list()
{
echo -e "$\n{_AXE_BLOCK_MODE} Start of create_axe_list${txtrst}"



echo "mkinitcpio --install --nocon --force $_AXE_OPT_TYPE
dbus-core --install --con --force $_AXE_OPT_TYPE
udev-axe --install --con --force $_AXE_OPT_TYPE
libgusb --install --nocon --force $_AXE_OPT_TYPE
pyudev --install --nocon --force $_AXE_OPT_TYPE
libatasmart --install --nocon --force $_AXE_OPT_TYPE
lockdev --install --nocon --force $_AXE_OPT_TYPE
#known arch fail, willnot be back in list till i fix it
#libcec --install --nocon --force $_AXE_OPT_TYPE
syslog-ng --install --nocon --force $_AXE_OPT_TYPE
mkinitcpio-busybox --install --nocon --force $_AXE_OPT_TYPE
mkinitcpio --install --nocon --force $_AXE_OPT_TYPE
dbus-core --install --nocon --force $_AXE_OPT_TYPE
lvm2 --install --nocon --force $_AXE_OPT_TYPE
dmraid --install --nocon --force $_AXE_OPT_TYPE
pcmciautils --install --nocon --force $_AXE_OPT_TYPE
crda --install --nocon --force $_AXE_OPT_TYPE
mtdev --install --nocon --force $_AXE_OPT_TYPE
xf86-input-evdev --install --nocon --force $_AXE_OPT_TYPE" > "$_AXE_DIR/axe.list"



echo -e "${_AXE_BLOCK_MODE} End of create_axe_list${txtrst}"
}





# dialog functions *********************************************************************************************************************************************
#***************************************************************************************************************************************************************

function any_key()
{
		echo -e "  ${_AXE_INFO_MODE} press ${_AXE_ANY_KEY} to continue  ${txtrst}"
		read -n1 -s
}


function axe_info()
{

	#argument 1 text to display
		# xxx .. text to display...
		
		printf "  ${_AXE_INFO_MODE} $1 ${txtrst}"
}

function axe_block()
{

	#argument 1 text to display
		# xxx .. text to display...
		
		printf "  ${_AXE_BLOCK_MODE} $1 ${txtrst}"
}

function axe_warn()
{

	#argument 1 text to display
		# xxx .. text to display...
		
		printf "  ${_AXE_WARN_MODE} $1 ${txtrst}"
}

function axe_fuck()
{

	#argument 1 text to display
		# xxx .. text to display...
		
		printf "  ${_AXE_FUCK_MODE} $1 ${txtrst}"
}



# functions that do not call any other internal functions except dialogs ***************************************************************************************
#***************************************************************************************************************************************************************

function copy_pkgbuild()
{
	#first argument is pkgbuild name
		#xxxxxx ...pkgbuild name
	#second argument is destination path
		#xxxxxx ... path/to/dir (either hdd build dir or ram build dir
	#third argument (optional) is alternate input path, defaults to $_AXE_PKGBUILD_DIR
		#xxxxxx ... path/to/dir
	
	local VAR="_debug_copy_pkgbuild"
	_debug_copy_pkgbuild=0
	[[ $_debug_copy_pkgbuild -eq 0 ]] && echo -e "${_AXE_BLOCK_MODE} Start of copy_pkgbuild ${txtrst}"
	[[ $_debug_copy_pkgbuild -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} DEBUG MODE Start of copy_pkgbuild ${txtrst}"
	[[ $_debug_copy_pkgbuild -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} ARGUMENT-1..is pkgbuild name= ${bldcyn} $1 ${txtrst} \n ARGUMENT-2..is destination path = ${bldcyn} $2 ${txtrst}\n ARGUMENT-3..is alternate input path, defaults to $_AXE_PKGBUILD_DIR = ${bldcyn} $2 ${txtrst}" && any_key

	local VAR="_axe_source"
	_axe_source="$_AXE_PKGBUILD_DIR"
	[[ $3 ]] && _axe_source="$3"
	[[ $_debug_copy_pkgbuild -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} _axe_source= $_axe_source ${txtrst}" && any_key
	
	if [[ ! -d "$2/$1" ]]; then

		find "$_axe_source" -type d -name "$1" -exec cp -rp {} "$2" \; 2> /dev/null
		if [[ ! -d "$2/$1" ]]; then

			find /var/abs -type d -name "$1" -exec cp -rp {} "$2" \; 2> /dev/null
			if [[ ! -d "$2/$1" ]]; then
			
				cd "$2"
				yaourt -G --noconfirm "$pkgname"
				cd /root/
				if [[ ! -d "$2/$1" ]]; then
					echo -e "  ${_AXE_FUCKUP_MODE}ok something is seariously wrong cannot locate the $1 pkg build directory in my lookup locations check the code!!!${txtrst}"
					any_key
					return 6
				else
					echo -e "  ${_AXE_INFO_MODE}found $1 PKGBUILD in AUR fetching and using it as source PKGBUILD ${txtrst}"
					echo -e "${_AXE_BLOCK_MODE} End of copy_pkgbuild ${txtrst}"
					[[ $_debug_copy_pkgbuild -eq 1 ]] && any_key
					return 5
				fi
								
			else
				echo -e "  ${_AXE_INFO_MODE}found $1 PKGBUILD in /var/abs fetching and using it as source PKGBUILD ${txtrst}"
				echo -e "${_AXE_BLOCK_MODE} End of copy_pkgbuild ${txtrst}"
				[[ $_debug_copy_pkgbuild -eq 1 ]] && any_key
				return 4
			fi	

		else
			echo -e "  ${_AXE_INFO_MODE}found $1 PKGBUILD in $_axe_source fetching and using it as source PKGBUILD ${txtrst}"
			echo -e "${_AXE_BLOCK_MODE} End of copy_pkgbuild ${txtrst}"
			[[ $_debug_copy_pkgbuild -eq 1 ]] && any_key
			return 3
		fi

	else
		echo -e "  ${_AXE_INFO_MODE}found $2/$1 not fetching${txtrst}"
		[[ $_debug_copy_pkgbuild -eq 1 ]] && any_key
	fi
	

	echo -e "${_AXE_BLOCK_MODE} End of copy_pkgbuild ${txtrst}"
	return 0
}

function check_pkg_tag()
{
	local VAR="_debug_check_pkg_tag"
	_debug_check_pkg_tag=0
	[[ $_debug_check_pkg_tag -eq 0 ]] && echo -e "${_AXE_BLOCK_MODE} Start of check_pkg_tag ${txtrst}"
	[[ $_debug_check_pkg_tag -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} DEBUG MODE Start of check_pkg_tag ${txtrst}"
	[[ $_debug_check_pkg_tag -eq 1 ]] && echo -e "  $_AXE_DEBUG_MODE} ARGUMENT-1..PKGBUILD NAME= ${bldcyn} $1 ${txtrst} \n ARGUMENT-2..CHECK BUILD FAIL LIST= ${bldcyn} $2 ${txtrst} \n ARGUMENT-3..CHECK BUILD SUCESS LIST= ${bldcyn} $3 ${txtrst} \n ARGUMENT-3..CHECK PACKAGER TAG= ${bldcyn} $4 ${txtrst}" && any_key
	
	#first argument is pkg name
		#xxxx pkgbuild name
	#second argument is check for build fail lisings
		#--fail .. check the build fail list
		#--nofail ..do not check the build fail list
	#third argument is check for build sucess lisings
		#--suc .. check the build sucess list
		#--nosuc ..do not check the build sucess list
	#fourth argument is check for packager tag
		#--tag .. check the packager variable
		#--tag-all .. check the packager variable ignoring stage mask
		#--notag .. do not check the packager variable

	
	if [[ -s "$_AXE_DIR/build_fail.list" && "$2" == "--fail" ]]; then
		if [[ $(sed '/^\#/d' $_AXE_DIR/build_fail.list | grep -v "^$" | sed 's/ .*//' | grep -Fx "$1") ]]; then
			echo -e "  ${_AXE_INFO_MODE} PKGBUILD $1  is on the build fail list ${txtrst}"
			[[ $_debug_check_pkg_tag -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} pkgbuild $1 is on the build fail list returning with 2 ${txtrst}" && any_key
			return 2
		fi
	fi
	
	# built in build_sucsess.list check
	if [[ -s "$_AXE_DIR/build_sucsess.list" && "$3" == "--suc"  ]]; then
	#   delete comments | delete emty lines | delete everything after first space | print only package name> to file
		if [[ $(sed '/^\#/d' $_AXE_DIR/build_sucsess.list | grep -v "^$" | sed 's/ .*//' | grep -Fx "$1") ]]; then
			echo -e "  ${_AXE_INFO_MODE} PKGBUILD $1  is on the build sucess list ${txtrst}"
			[[ $_debug_check_pkg_tag -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} pkgbuild $1 is on the build sucess list returning with 3 ${txtrst}" && any_key
			return 3
		fi
	fi

	
	#check if passed argument has taken the PACKEGER variable, if not report back with return value 1
	
	if [[ $4 == "--tag" ]]; then
		expac "%n %p" | grep "$_AXE_PACKAGER_NAME" | sed 's/ .*//' | grep -Fx "$1" > "$_AXE_DIR/scratch"
	fi
	
	if [[ $4 == "--tag-all" ]]; then
		expac "%n %p" | grep "$_AXE_PACKAGER_NAME_START" | sed 's/ .*//' | grep -Fx "$1" > "$_AXE_DIR/scratch"
		expac "%n %p" | grep "$_AXE_PACKAGER_NAME_FINAL" | sed 's/ .*//' | grep -Fx "$1" >> "$_AXE_DIR/scratch"
	fi
	
	
	
	if [[ -s "$_AXE_DIR/scratch" ]]; then
		echo -e "  ${_AXE_INFO_MODE} PKGBUILD $1  HAS the i7 PACKAGER variable set so lets NOT build it again${txtrst}"
		echo -e "${_AXE_BLOCK_MODE} End check_pkg_tag ${txtrst}"
		[[ $_debug_check_pkg_tag -eq 1 ]]  && any_key
		return 1
	fi
	
	echo -e "${_AXE_BLOCK_MODE} End check_pkg_tag ${txtrst}"
	return 0
	
}

function save_settings()
{
	echo -e "${_AXE_BLOCK_MODE} Start of save_settings ${txtrst}"
	

	#save new settings
	echo "_AXE_LINUX_RESUME_YES=$_AXE_LINUX_RESUME_YES
_AXE_STAGE_2_RESUME_YES=$_AXE_STAGE_2_RESUME_YES
_AXE_BOOTSTRAP_RESUME_YES=$_AXE_BOOTSTRAP_RESUME_YES
_AXE_XORG=\"$_AXE_XORG\"
_AXE_DEPS_MET_YES=$_AXE_DEPS_MET_YES
_AXE_I7_HARDWARE_YES=$_AXE_I7_HARDWARE_YES
_AXE_I7_HARDWARE_SAVED_YES=$_AXE_I7_HARDWARE_SAVED_YES
_AXE_OPT_TYPE=\"$_AXE_OPT_TYPE\"
_AXE_STAGE=$_AXE_STAGE
_AXE_BINARY_BOOTSRTAP_YES=$_AXE_BINARY_BOOTSRTAP_YES
_AXE_SKIP_MENU_YES=$_AXE_SKIP_MENU_YES
_AXE_TOOLCHAIN_STAGE=$_AXE_TOOLCHAIN_STAGE
_AXE_GIT_FETCHED_YES=$_AXE_GIT_FETCHED_YES
_AXE_PKGBUILD_DIR_FILLED_YES=$_AXE_PKGBUILD_DIR_FILLED_YES
_AXE_UDEV_INSTALLED_YES=$_AXE_UDEV_INSTALLED_YES
_AXE_SOURCES_FETCHED_YES=$_AXE_SOURCES_FETCHED_YES
_AXE_VERSIONS_CHECKED_YES=$_AXE_VERSIONS_CHECKED_YES
_AXE_INIT_REPLACED_YES=$_AXE_INIT_REPLACED_YES
_AXE_FINAL_EXTRAS_INSTALLED_YES=$_AXE_FINAL_EXTRAS_INSTALLED_YES
_AXE_NVIDIA=\"$_AXE_NVIDIA\"
_AXE_WHATS_LEFT_BUILT_YES=$_AXE_WHATS_LEFT_BUILT_YES
_AXE_STAGE2_SETUP_COMPLETE_YES=$_AXE_STAGE2_SETUP_COMPLETE_YES
_AXE_BUILD_STAGE3=\"$_AXE_BUILD_STAGE3\"
_AXE_STAGE3_SETUP_COMPLETE_YES=$_AXE_STAGE3_SETUP_COMPLETE_YES" > "$_AXE_DIR/settings"
	

	echo -e "${_AXE_BLOCK_MODE} End of save_settings${txtrst}"	
}

function stamp_pkgbuild()
{
	local VAR="_debug_stamp_pkgbuild"
	_debug_stamp_pkgbuild=0
	[[ $_debug_stamp_pkgbuild -eq 0 ]] && echo -e "${_AXE_BLOCK_MODE} Start of stamp_pkgbuild ${txtrst}"
	[[ $_debug_stamp_pkgbuild -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} DEBUG MODE Start of stamp_pkgbuild ${txtrst}"
	[[ $_debug_stamp_pkgbuild -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} ARGUMENT-1..  path to PKGBUILD = ${bldcyn} $1 ${txtrst}" && any_key
	
	#first argument is path to PKGBUILD
		#xxx/path/to/PKGBUILD
	
	local VAR="_axe_pkg_rel"
	local VAR="_axe_tag_rel"
	_axe_pkg_rel=""
	_axe_tag_rel=""
	

	_axe_pkg_rel=$(cat "$1/PKGBUILD" | grep -m 1 'pkgrel=' | sed 's/pkgrel=//')
	[[ $_debug_stamp_pkgbuild -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} PKGBUILD pkgrelrel is $_axe_pkg_rel ${txtrst}"
	if [[ ! $_axe_pkg_rel ]]; then
		echo -e "  ${_AXE_INFO_MODE} pkgrel does not exist adding fresh one ${txtrst}"
		echo "$_AXE_BASE_REL_TAG" >> "$1/PKGBUILD"
		if [[ ! $? -eq 0 ]]; then
			echo -e "  ${_AXE_FUCKUP_MODE} PKGBUILD refused to accept a modification ${txtrst}"
			[[ $_debug_stamp_pkgbuild -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} view PKGBUILD ${txtrst}" && any_key && nano "$1/PKGBUILD"
			return 1
		fi

	else
		echo -e "  ${_AXE_INFO_MODE} adding axe pkgrel changes to $1/PKGBUILD ${txtrst}"
		_axe_tag_rel="pkgrel=99.${_axe_abs_rel}axe"
		sed -i "s/pkgrel=.*/$_axe_tag_rel/" "$1/PKGBUILD"
		if [[ ! $? -eq 0 ]]; then
			echo -e "  ${_AXE_FUCKUP_MODE} PKGBUILD refused to accept a modification ${txtrst}"
			[[ $_debug_stamp_pkgbuild -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} view PKGBUILD ${txtrst}" && any_key && nano "$1/PKGBUILD"
			return 2
		fi
	fi
	
	#insert jubei as packager
	if [[ ! $(grep 'Maintainer: Jubei-Mitsuyoshi' "$1/$file_name") ]]; then
		echo -e "  ${_AXE_INFO_MODE} adding axe maintainer to $1/PKGBUILD ${txtrst}"
		sed -i '2i# Maintainer: Jubei-Mitsuyoshi <jubei.house.of.five.masters@gmail.com>' "$1/PKGBUILD"
		if [[ ! $? -eq 0 ]]; then
			echo -e "  ${_AXE_FUCKUP_MODE} PKGBUILD refused to accept a modification ${txtrst}"
			[[ $_debug_stamp_pkgbuild -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} view PKGBUILD ${txtrst}" && any_key && nano "$1/PKGBUILD"
			[[ $_debug_stamp_pkgbuild -eq 1 ]] && any_key
			return 3
		fi
	else
		echo -e "  ${_AXE_INFO_MODE} PKGBUILD already has correct maintainer ${txtrst}"
	fi
	
	#add axe groupe
	echo -e "  ${_AXE_INFO_MODE} adding axe to groupes ${txtrst}"
	if [[ $(cat "$1/PKGBUILD" | grep -m 1 'groups=') ]]; then 
		sed -i 's/groups=(/groups=(\"axis\" /' "$1/PKGBUILD"
		if [[ ! $? -eq 0 ]]; then
			echo -e "  ${_AXE_FUCKUP_MODE} PKGBUILD refused to accept a modification ${txtrst}"
			[[ $_debug_stamp_pkgbuild -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} view PKGBUILD ${txtrst}" && any_key && nano "$1/PKGBUILD"
			[[ $_debug_stamp_pkgbuild -eq 1 ]] && any_key
			return 4
		fi
	else
		sed -i "/license=.*/agroups=(\"axis\")" "$1/PKGBUILD"
		if [[ ! $? -eq 0 ]]; then
			echo -e "  ${_AXE_FUCKUP_MODE} PKGBUILD refused to accept a modification ${txtrst}"
			[[ $_debug_stamp_pkgbuild -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} view PKGBUILD ${txtrst}" && any_key && nano "$1/PKGBUILD"
			[[ $_debug_stamp_pkgbuild -eq 1 ]] && any_key
			return 5
		fi
	fi
	
	for file_name in $(ls -A $1);do
		if [[ ! $file_name == "PKGBUILD" ]]; then 
			if [[ $(grep -m 1 'stat_busy' "$1/$file_name") || $(grep -m 1 'stat_fail' "$1/$file_name") || $(grep -m 1 'stat_done' "$1/$file_name") || $(grep -m 1 'add_daemon' "$1/$file_name") || $(grep -m 1 'ck_daemon' "$1/$file_name") || $(grep -m 1 'have_daemon' "$1/$file_name") || $(grep -m 1 'rm_daemon' "$1/$file_name") || $(grep -m 1 'status' "$1/$file_name") ]]; then
			
				echo -e "  ${_AXE_INFO_MODE} applying rc.d modifications to file $1/$file_name ${txtrst}"
				echo "#----------------axe warning------------------ $1/$file_name altered for rc.d changes" >> "$1/PKGBUILD"
				sed -i \
					-e 's|stat_busy|msg_busy|g' \
					-e 's|stat_fail|msg_fail|g' \
					-e 's|stat_done|msg_ok|g' \
					-e 's|add_daemon|dmn_add|g' \
					-e 's|ck_daemon|dmn_running|g' \
					-e 's|have_daemon|dmn_exists|g' \
					-e 's|rm_daemon|dmn_rm|g' \
					-e 's|status|exec_cmd|g' \
					"$1/$file_name"
					
					# new md5/sha sums for the modified files
	
					cd "$1"
					
					
	
	awk -v newsums="$(makepkg --asroot -g)" '
BEGIN {
  if (!newsums) exit 1
}

/^[[:blank:]]*(md|sha)[[:digit:]]+sums=/,/\)[[:blank:]]*$/ {
  if (!i) print newsums; i++
  next
}

1
' PKGBUILD > PKGBUILD.new && mv PKGBUILD{.new,}

			cd /root/
	
			#warn of systemd refs in $1/$file_name
	
			[[ $(cat "$1/$file_name" | grep 'systemd') ]] && echo "#----------------axe warning------------------ syetemd detected in file $1/$file_name aswell" >> "$1/PKGBUILD"
	
	
			fi
		fi
    done
	
	
	
	
	#warn of systemd refs in PKGBUILD
	
	[[ $(cat "$1/PKGBUILD" | grep 'systemd') ]] && echo '#----------------axe warning------------------ syetemd detected' >> "$1/PKGBUILD"
	

	echo -e "${_AXE_BLOCK_MODE} End of stamp_pkgbuild ${txtrst}"
	return 0
}

function stage2_pkgrel()
{
	local VAR="_debug_stage2_pkgrel"
	_debug_stage2_pkgrel=0
	[[ $_debug_stage2_pkgrel -eq 0 ]] && echo -e "${_AXE_BLOCK_MODE} Start of stage2_pkgrel ${txtrst}"
	[[ $_debug_stage2_pkgrel -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} DEBUG MODE Start of stage2_pkgrel ${txtrst}"
	[[ $_debug_stage2_pkgrel -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} ARGUMENT-1.. path to target folder = ${bldcyn} $1 ${txtrst}" && any_key
	
	#argument 1 path to target folder
		# xxx /path/to/folder
	
	
	cd "$1"
	find * -prune -type d > "$_AXE_DIR/stage2_pkgrel_working.list"
	if [[ -s "$_AXE_DIR/stage2_setup_working.list" ]]; then
		[[ $_debug_stage2_pkgrel -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} this is the list of package folders in $1 ${txtrst}" && any_key && nano "$_AXE_DIR/stage2_setup_working.list"
		for pkgname in $(cat "$_AXE_DIR/stage2_pkgrel_working.list"); do
			if [[ -s "$1/$pkgname/PKGBUILD" ]]; then
				cd "$1/$pkgname"
				sed -i "s/pkgrel=99/pkgrel=999/" PKGBUILD
				if [[ ! $? -eq 0 ]]; then
					echo -e "  ${_AXE_FUCKUP_MODE} for some reason $1/$pkgname/PKGBUILD failed to take the new pkgrel ${txtrst}"
					any_key
					return 3
				fi
			else
				echo -e "  ${_AXE_FUCKUP_MODE} $1/$pkgname/PKGBUILD does not exist skipping ${txtrst}"
				return 2
			fi
		done
	else
		echo -e "  ${_AXE_INFO_MODE} $1 appears to be empty skipping ${txtrst}"
		return 1
	fi

	echo -e "${_AXE_BLOCK_MODE} End of stage2_pkgrel ${txtrst}"
	return 0
}

function reboot_with_questions()
{
	echo -e "${_AXE_BLOCK_MODE} Start of reboot_with_questions ${txtrst}"	
	#we need to reeboot the pc

	if [[ $_AXE_XORG == "no" ]]; then
		# write restsrt command to /etc/profile
		echo "axe" >> /etc/profile
		shutdown -r now
	else
		echo -e "  ${_AXE_INFO_MODE} ok i now need to reboot your pc since you are running in an xwindows environment you need to do this yourself ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} so press any key, wait for your pc to reboot etc, then run me again ${txtrst}"
		any_key
		echo -e "${_AXE_BLOCK_MODE} End of reboot_with_questions ${txtrst}"	
		shutdown -r now
	fi

}

function toolchain_tag_check()
{
	echo -e "${_AXE_BLOCK_MODE} Start of toolchain_tag_check ${txtrst}"
	if [[ "$_AXE_TOOLCHAIN_STAGE" -eq 1 ]]; then
	
	
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_START" | sed 's/ .*//' | grep -Fx "gcc$_AXE_MULTILIB_SUFFIX" > "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_START" | sed 's/ .*//' | grep -Fx "gcc-ada$_AXE_MULTILIB_SUFFIX" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_START" | sed 's/ .*//' | grep -Fx "gcc-fortran$_AXE_MULTILIB_SUFFIX" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_START" | sed 's/ .*//' | grep -Fx "gcc-go$_AXE_MULTILIB_SUFFIX" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_START" | sed 's/ .*//' | grep -Fx "gcc-obj$_AXE_MULTILIB_SUFFIX" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_START" | sed 's/ .*//' | grep -Fx 'glibc' >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_START" | sed 's/ .*//' | grep -Fx 'libltdl' >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_START" | sed 's/ .*//' | grep -Fx "libtool$_AXE_MULTILIB_SUFFIX" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_START" | sed 's/ .*//' | grep -Fx "gcc-libs$_AXE_MULTILIB_SUFFIX" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_START" | sed 's/ .*//' | grep -Fx "binutils$_AXE_MULTILIB_SUFFIX" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_START" | sed 's/ .*//' | grep -Fx 'linux-api-headers' >> "$_AXE_DIR/scratch"
		

		if [[ "$_AXE_MULTILIB_SUFFIX" == "-multilib" ]]; then
		
			expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_START" | sed 's/ .*//' | grep -Fx 'lib32-glibc' >> "$_AXE_DIR/scratch"
			expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_START" | sed 's/ .*//' | grep -Fx 'lib32-libltdl' >> "$_AXE_DIR/scratch"
			expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_START" | sed 's/ .*//' | grep -Fx 'lib32-libltdl' >> "$_AXE_DIR/scratch"
		
		fi
		
		
	else
	
	
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_FINAL" | sed 's/ .*//' | grep -Fx "gcc$_AXE_MULTILIB_SUFFIX" > "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_FINAL" | sed 's/ .*//' | grep -Fx "gcc-ada$_AXE_MULTILIB_SUFFIX" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_FINAL" | sed 's/ .*//' | grep -Fx "gcc-fortran$_AXE_MULTILIB_SUFFIX" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_FINAL" | sed 's/ .*//' | grep -Fx "gcc-go$_AXE_MULTILIB_SUFFIX" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_FINAL" | sed 's/ .*//' | grep -Fx "gcc-obj$_AXE_MULTILIB_SUFFIX" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_FINAL" | sed 's/ .*//' | grep -Fx 'glibc' >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_FINAL" | sed 's/ .*//' | grep -Fx 'libltdl' >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_FINAL" | sed 's/ .*//' | grep -Fx "libtool$_AXE_MULTILIB_SUFFIX" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_FINAL" | sed 's/ .*//' | grep -Fx "gcc-libs$_AXE_MULTILIB_SUFFIX" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_FINAL" | sed 's/ .*//' | grep -Fx "binutils$_AXE_MULTILIB_SUFFIX" >> "$_AXE_DIR/scratch"
		expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_FINAL" | sed 's/ .*//' | grep -Fx 'linux-api-headers' >> "$_AXE_DIR/scratch"
		
		
		if [[ "$_AXE_MULTILIB_SUFFIX" == "-multilib" ]]; then
		
			expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_FINAL" | sed 's/ .*//' | grep -Fx 'lib32-glibc' >> "$_AXE_DIR/scratch"
			expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_FINAL" | sed 's/ .*//' | grep -Fx 'lib32-libltdl' >> "$_AXE_DIR/scratch"
			expac "%n %p" | grep -v "$_AXE_PACKAGER_NAME_FINAL" | sed 's/ .*//' | grep -Fx 'lib32-libltdl' >> "$_AXE_DIR/scratch"
		
		fi
		
		
	fi
	

	if [[ -s "$_AXE_DIR/scratch" ]]; then
		echo -e "  ${_AXE_INFO_MODE} ok detected that \n"
		cat "$_AXE_DIR/scratch"
		echo -e "  ${_AXE_INFO_MODE} has been updated or somehow lacks the $_AXE_PACKAGER_NAME tag ${txtrst}"
		echo -e "${_AXE_BLOCK_MODE} End of check that your toolchain has the correct tag ${txtrst}"
		return 1
	fi
	
	echo -e "${_AXE_BLOCK_MODE} End of toolchain_tag_check ${txtrst}"
	return 0
	
	#returns
	#0 has the tag---is an i7 toolchain
	#1 does NOT have the i7 tag ---is NOT an i7 toolchain
	
}

function mod_axe_repo_entries()
{
	local VAR="_debug_mod_axe_repo_entries"
	_debug_mod_axe_repo_entries=0
	[[ $_debug_mod_axe_repo_entries -eq 0 ]] && echo -e "${_AXE_BLOCK_MODE} Start of mod_axe_repo_entries ${txtrst}"
	[[ $_debug_mod_axe_repo_entries -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} DEBUG MODE Start of mod_axe_repo_entries ${txtrst}"
	[[ $_debug_mod_axe_repo_entries -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} ARGUMENT-1..repo location to switch to = ${bldcyn} $1 ${txtrst}" && any_key
	#first argument is repo location to switch to
		#--local .. switch to entry for locally hdd repo directory
		#--remote .. switch to entry for remote github repo
		#--st2 .. switch entry to stage 2 binaries
		#--st3 .. switch entry to stage 3 binaries
		#--rem .. just delete all the entries

	#delete them all
		#delete all [axe] entries
		sed -i ":\[axe.*:d" /etc/pacman.conf
		#delete remote entry
		sed -i ':https\:\/\/github.com\/Jubei-Mitsuyoshi:d' /etc/pacman.conf
		#delete local entries
		sed -i ':Server = file\:\/\/:d' /etc/pacman.conf
	[[ $_debug_mod_axe_repo_entries -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} show /etc/pacman.conf check repo axe entries deleted ${txtrst}" && any_key && nano /etc/pacman.conf
	#write the chosen one

	case $1 in
		--remote) sed -i "/#\[testing\]/i# AXE-REMOTE-GIT axe remote git\\
[axegithub]\\
$_AXE_REMOTE_GIT_REPO_ENTRY\\
" /etc/pacman.conf ;;
	--local) sed -i "/#\[testing\]/i# AXE-LOCAL axe local repo filled from usb stick\\
[axelocal]\\
Server = file://$_AXE_LOCAL_BINARY_REPO_DIR\\
" /etc/pacman.conf ;;
	--st2) sed -i "/#\[testing\]/i# AXE-STAGE2-BINARIES filled as part of full rebuild\\
[axest2bin]\\
Server = file://$_AXE_STAGE2_BINARY_REPO_DIR\\
" /etc/pacman.conf ;;
	--st3) sed -i "/#\[testing\]/i# AXE-STAGE3-BINARIES filled at the end of full rebuild\\
[axest3bin]\\
Server = file://$_AXE_STAGE3_BINARY_REPO_DIR\\
" /etc/pacman.conf ;;
	esac
	[[ $_debug_mod_axe_repo_entries -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} show /etc/pacman.conf check repo axe entries added ${txtrst}" && any_key && nano /etc/pacman.conf
	
echo -e "${_AXE_BLOCK_MODE} End mod_axe_repo_entries ${txtrst}"
}

function update_repo_database()
{

	local VAR="_debug_update_repo_database"	
	_debug_update_repo_database=0
	[[ $_debug_update_repo_database -eq 0 ]] && echo -e "${_AXE_BLOCK_MODE} Start of update_repo_database ${txtrst}"
	[[ $_debug_update_repo_database -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} DEBUG MODE Start of update_repo_database ${txtrst}"
	[[ $_debug_update_repo_database -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} ARGUMENT-1.. repo path = ${bldcyn} $1 ${txtrst} \n ARGUMENT-2..  repo name = ${bldcyn} $2 ${txtrst}" && any_key
#first argument is repo path
	#xxxxx /path/to/repo
#second argument is repo name
#	xxxx repo name

	if [[ ! -d "$1" ]]; then
		echo -e "  ${_AXE_FUCKUP_MODE} repo directory does not exist${txtrst}"
		return 1
	fi
	cd "$1"
	if [[ -s "$2" ]]; then
		[[ $_debug_update_repo_database -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} found a repo database file in $1 deleting it to write a new one ${txtrst}"
		rm -f "$2"
		if [[ ! $? -eq 0 ]]; then
			echo -e "  ${_AXE_FUCKUP_MODE} problem with deleting old database ${txtrst}" 
			return 2
		fi
		rm -f "$2.db.tar.gz"
		if [[ ! $? -eq 0 ]]; then
			echo -e "  ${_AXE_FUCKUP_MODE} problem with deleting old database ${txtrst}" 
			return 3
		fi
	fi
	
	repo-add "$2.db.tar.gz" *.pkg.tar.xz
	if [[ ! $? -eq 0 ]]; then
		echo -e "  ${_AXE_FUCKUP_MODE} problem with database creation ${txtrst}"
		return 4
	fi
	
	echo -e "${_AXE_BLOCK_MODE} End of of update_repo_database ${txtrst}"
	return 0
}

function mask_toolchain_upgrades()
{
	echo -e "${_AXE_BLOCK_MODE} Start of mask_toolchain_upgrades ${txtrst}"
	
	if [[ "$_AXE_MULTILIB_SUFFIX" == "-multilib" ]]; then
		sed -i '/options]/a# axe is controlling toolchain upgrades now with your approval obviously,these lines prevent your toolchain from being updated, \nIgnorePkg=glibc\nIgnorePkg=lib32-glibc\nIgnorePkg=libtool-multilib\nIgnorePkg=libltdl\nIgnorePkg=lib32-libltdl\nIgnorePkg=gcc-ada-multilib\nIgnorePkg=gcc-fortran-multilib\nIgnorePkg=gcc-go-multilib\nIgnorePkg=gcc-obj-multilib\nIgnorePkg=gcc-multilib\nIgnorePkg=gcc-libs-multilib\nIgnorePkg=lib32-gcc-libs\nIgnorePkg=binutils-multilib\nIgnorePkg=linux\n' /etc/pacman.conf
	else
		sed -i '/options]/a# axe is controlling toolchain upgrades now with your approval obviously,these lines prevent your toolchain from being updated, \nIgnorePkg=glibc\nIgnorePkg=libtool\nIgnorePkg=libltdl\nIgnorePkg=gcc-ada\nIgnorePkg=gcc-fortran\nIgnorePkg=gcc-go\nIgnorePkg=gcc-obj\nIgnorePkg=gcc\nIgnorePkg=gcc-libs\nIgnorePkg=binutils\nIgnorePkg=linux\n' /etc/pacman.conf
	fi
	echo -e "  ${_AXE_INFO_MODE} examine pacman.conf to make sure toolchain updates fixed ${txtrst}" && any_key && nano /etc/pacman.conf
	
	echo -e "${_AXE_BLOCK_MODE} End of mask_toolchain_upgrades ${txtrst}"
}

function export_pkgbuilds_to_usb()
{
	local VAR="_debug_export_pkgbuilds_to_usb"	
	_debug_export_pkgbuilds_to_usb=0
	[[ $_debug_export_pkgbuilds_to_usb -eq 0 ]] && echo -e "${_AXE_BLOCK_MODE} Start of export_pkgbuilds_to_usb ${txtrst}"
	[[ $_debug_export_pkgbuilds_to_usb -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} DEBUG MODE Start of export_pkgbuilds_to_usb ${txtrst}"
	[[ $_debug_export_pkgbuilds_to_usb -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} ARGUMENT-1.. input folder path = ${bldcyn} $1 ${txtrst} \n ARGUMENT-2..  usb stick folder name = ${bldcyn} $2 ${txtrst}" && any_key

	
	#argument 1 input folder path
		# xxx /path/to/folder
	#argument 2 usb stick folder name
		# xxx folder name 
	
	echo -e "  ${_AXE_INFO_MODE} mounting $_AXE_USB_STICK_DEVICE ${txtrst}"
	mount -t vfat "$_AXE_USB_STICK_DEVICE" "$_AXE_USB_STICK_MNT"
	if [[ $? -eq 0 ]]; then
		echo -e "  ${_AXE_INFO_MODE} $_AXE_USB_STICK_DEVICE sucsessfully mounted to $_AXE_USB_STICK_MNT ${txtrst}"
		
		if [[ ! -d "$_AXE_USB_STICK_MNT/$2" ]]; then
			echo -e "  ${_AXE_INFO_MODE} creating usb mount dir $_AXE_USB_STICK_MNT ${txtrst}"
			mkdir "$_AXE_USB_STICK_MNT/$2"
		fi
			
			
		echo -e "  ${_AXE_INFO_MODE} copying over PKGBUILDS from $1 to $_AXE_USB_STICK_MNT/$2 ${txtrst}"
		
		cp -fr $1/* "$_AXE_USB_STICK_MNT/$2"
		if [[ $? -eq 0 ]]; then
			wait
			echo -e "  ${_AXE_INFO_MODE} PKGBUILD dirs sucessfully copied ${txtrst}"
		else
			echo -e "  ${_AXE_FUCKUP_MODE} something is wrong did not copy anything check the code ${txtrst}"
		fi

		echo -e "  ${_AXE_INFO_MODE} UNmounting $_AXE_USB_STICK_DEVICE ${txtrst}"
		umount  "$_AXE_USB_STICK_MNT"
		if [[ $? -eq 0 ]]; then
			echo -e "  ${_AXE_INFO_MODE} $_AXE_USB_STICK_DEVICE sucsessfully UNmounted ${txtrst}"
		else
			echo -e "  ${_AXE_FUCKUP_MODE} failed in UNmounting $_AXE_USB_STICK_DEVICE which will still be active ${txtrst}"
		fi
		
	else
		echo -e "  ${_AXE_FUCKUP_MODE} failed to mount$_AXE_USB_STICK_DEVICE to $_AXE_USB_STICK_MNT ${txtrst}"
	fi

echo -e "${_AXE_BLOCK_MODE} End export_pkgbuilds_to_usb ${txtrst}"
}

function reset_toolchain()
{
	
	echo -e "${_AXE_BLOCK_MODE} Start of reset_toolchain ${txtrst}"

	echo -e "  ${_AXE_FUCKUP_MODE}well Huston we have a problem :) one of the toolchain components have bugged out during the build, this is a majour fuck up !!!${txtrst}"
	echo -e "  ${_AXE_FUCKUP_MODE}this unfortunatly is not unusuall with Arch, more and more toolchain build failiures kept emerrging, hence i can only advise you to try again${txtrst}"
	any_key
	
	
	#reset packages
	pacman -S linux-api-headers glibc libtool binutils$_AXE_MULTILIB_SUFFIX gcc$_AXE_MULTILIB_SUFFIX gcc-ada$_AXE_MULTILIB_SUFFIX 	gcc-fortran$_AXE_MULTILIB_SUFFIX gcc-go$_AXE_MULTILIB_SUFFIX gcc-libs$_AXE_MULTILIB_SUFFIX gcc-objc$_AXE_MULTILIB_SUFFIX

	#check reset sucsessfull
	toolchain_tag_check
	if [[ $? -eq 1 ]]; then
		echo -e "  ${_AXE_FUCKUP_MODE}reset procedure failed shutting down${txtrst}"
		any_key
		shutdown -h now
		sleep 10
	fi
	
	echo -e "${_AXE_BLOCK_MODE} End of reset toolchain${txtrst}"
}

function reset_init()
{
	echo -e "${_AXE_BLOCK_MODE} Start of reset_init ${txtrst}"
	
	echo -e "  ${_AXE_FUCKUP_MODE}one of our custom init components failed to build, we must now reload systemd to allow another try at another init from another location ${txtrst}"
	pacman -S systemd --noconfirm
	if [[ $? -eq 0 ]]; then
		echo -e "${_AXE_BLOCK_MODE} End of reset_init ${txtrst}"
		return 0
	fi
	echo -e "  ${_AXE_FUCKUP_MODE}reset procedure failed shutting down${txtrst}"
	any_key
	shutdown -h now
	echo -e "${_AXE_BLOCK_MODE} End of reset_init ${txtrst}"
	exit 1
	echo -e "${_AXE_BLOCK_MODE} End of reset_init ${txtrst}"
}

function unmask_toolchain_upgrades()
{
	echo -e "${_AXE_BLOCK_MODE} Start of unmask_toolchain_upgrades ${txtrst}"

	if [[ "$_AXE_MULTILIB_SUFFIX" == "-multilib" ]]; then

		sed -i '/IgnorePkg=glibc//' /etc/pacman.conf
		sed -i '/IgnorePkg=lib32-glibc//' /etc/pacman.conf
		sed -i '/IgnorePkg=libtool-multilib//' /etc/pacman.conf
		sed -i '/IgnorePkg=libltdl//' /etc/pacman.conf
		sed -i '/IgnorePkg=lib32-libltdl//' /etc/pacman.conf
		sed -i '/IgnorePkg=gcc-ada-multilib//' /etc/pacman.conf
		sed -i '/IgnorePkg=gcc-fortran-multilib//' /etc/pacman.conf
		sed -i '/IgnorePkg=gcc-go-multilib//' /etc/pacman.conf
		sed -i '/IgnorePkg=gcc-obj-multilib//' /etc/pacman.conf
		sed -i '/IgnorePkg=gcc-multilib//' /etc/pacman.conf
		sed -i '/IgnorePkg=gcc-libs-multilib//' /etc/pacman.conf
		sed -i '/IgnorePkg=lib32-gcc-libs//' /etc/pacman.conf
		sed -i '/IgnorePkg=binutils-multilib//' /etc/pacman.conf

	else

		sed -i '/IgnorePkg=glibc//' /etc/pacman.conf
		sed -i '/IgnorePkg=lib32-glibc//' /etc/pacman.conf
		sed -i '/IgnorePkg=libtool//' /etc/pacman.conf
		sed -i '/IgnorePkg=libltdl//' /etc/pacman.conf
		sed -i '/IgnorePkg=lib32-libltdl//' /etc/pacman.conf
		sed -i '/IgnorePkg=gcc-ada//' /etc/pacman.conf
		sed -i '/IgnorePkg=gcc-fortran//' /etc/pacman.conf
		sed -i '/IgnorePkg=gcc-go//' /etc/pacman.conf
		sed -i '/IgnorePkg=gcc-obj//' /etc/pacman.conf
		sed -i '/IgnorePkg=gcc//' /etc/pacman.conf
		sed -i '/IgnorePkg=gcc-libs//' /etc/pacman.conf
		sed -i '/IgnorePkg=lib32-gcc-libs//' /etc/pacman.conf
		sed -i '/IgnorePkg=binutils//' /etc/pacman.conf

	fi
	
	echo -e "  ${_AXE_INFO_MODE} show /etc/pacman.conf toolchain update unmasked ${txtrst}" && any_key && nano /etc/pacman.conf
	echo -e "${_AXE_BLOCK_MODE} End of unmask_toolchain_upgrades ${txtrst}"

}

# build functions **********************************************************************************************************************************************
#***************************************************************************************************************************************************************

function build_axe_pkgbuild()
{
	local VAR="_debug_build_axe_pkgbuild"	
	_debug_build_axe_pkgbuild=0
	[[ $_debug_build_axe_pkgbuild -eq 0 ]] && echo -e "${_AXE_BLOCK_MODE} Start of build_axe_pkgbuild ${bldcyn} >>  $1  <<  ${txtrst}"
	[[ $_debug_build_axe_pkgbuild -eq 1 ]] && echo -e "${_AXE_DEBUG_MODE} Start of build_axe_pkgbuild ${bldcyn} >>  $1  <<  ${txtrst}"
	[[ $_debug_build_axe_pkgbuild -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} ARGUMENT-1.. package name = ${bldcyn} $1 ${txtrst}
ARGUMENT-2..  what kind of install = ${bldcyn} $2 ${txtrst}
ARGUMENT-3..  user intervention is needed = ${bldcyn} $3 ${txtrst}
ARGUMENT-4..  skip the packeger check = ${bldcyn} $4 ${txtrst}
ARGUMENT-5..  force -o3 build as preferance = ${bldcyn} $5 ${txtrst}
ARGUMENT-6..  ( optionall ) passthrough for check_pkg_tag --fail = ${bldcyn} $6 ${txtrst}
ARGUMENT-7..  ( optionall ) passthrough for check_pkg_tag --suc = ${bldcyn} $7 ${txtrst}
ARGUMENT-8..  ( optionall ) passthrough for check_pkg_tag --tag = ${bldcyn} $8 ${txtrst}
ARGUMENT-9..  ( optionall ) ( optionall ) passthrough for copy_pkgbuild overide fetch path = ${bldcyn} $9 ${txtrst}" && any_key
	
	
	local VAR="_axe_tmp_error_state"
	local VAR="_axe_fail"
	local VAR="_axe_suc"
	local VAR="_axe_tag"
	local VAR="_axe_input_path"
	_axe_input_path=""
	_axe_fail='--nofail'
	_axe_suc='--nosuc'
	_axe_tag='--tag'
	_axe_tmp_error_state=0

	#first argument is pkg name
		#xxxx ..package name
	#second argument is what kind of install
		#--install ..build package and install
		#--noinstall .. build package, export complete binary to repo, but do not install
		#--install-force .. build package and install usinf force flag
	#third argument weather user intervention is needed
		#--nocon ..user needs to press buttons
		#--con ..no interventin necessary
	#fourth argument wether to skip the packeger check
		#--force ..do not check for packager variable before building,
		#--noforce ..check for packager variable before building 
	#fith argument force -o3 build as preferance
		#--o3
		#--o2
	#sith argument ( optionall ) passthrough for check_pkg_tag --fail
		# --nofail
		# --fail
	#seventh argument ( optionall ) passthrough for check_pkg_tag --suc
		# --nosuc
		# --suc
	#eightth argument ( optionall ) passthrough for check_pkg_tag --tag
		# --notag
		# --tag
	#ninth and last argument ( optionall ) passthrough for copy_pkgbuild overide fetch path
		# xxx .. /path/to/input/dir

	
		
	[[ $6 ]] && _axe_fail="$6"
	[[ $7 ]] && _axe_suc="$7"
	[[ $8 ]] && _axe_tag="$8"
	[[ $9 ]] && _axe_input_path="$9"
	
	#check the package packager variable , if its mine skip the build
	if [[ ! $4 == "--force" ]]; then
		check_pkg_tag "$1" "$_axe_fail" "$_axe_suc" "$_axe_tag"
		if [[ $? -gt 0 ]]; then
			return 7
		fi
	fi


	if [[ $5 == "--o3" ]]; then
	
		[[ $_debug_build_axe_pkgbuild -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE}  -O3 has been chosen as default for this package ${txtrst}" && any_key
		
		# ram with -O3*********************************************************************************************************
	
		# switch to -O3
		sed -i 's/-O2/-O3/' /etc/makepkg.conf
		
		copy_pkgbuild "$1" "$_AXE_RAM_BUILD_DIR" "$9"
		cd "$_AXE_RAM_BUILD_DIR/$1"
		
		[[ $1 == "linux" && $_AXE_LINUX_MENU_YES -eq 1 ]] && sed -i 's/#make nconfig/make nconfig/' "$_AXE_RAM_BUILD_DIR/linux/PKGBUILD"
			
		
		_axe_tmp_error_state=0
		_axe_tmp_error_state=0
		if [[ $3 == "--nocon" ]]; then
			makepkg --asroot --noconfirm -csf
			if [[ ! $? -eq 0 ]]; then
				_axe_tmp_error_state=1
			fi
		fi
		if [[ $3 == "--con" ]]; then
			makepkg --asroot -csf
			if [[ ! $? -eq 0 ]]; then
				_axe_tmp_error_state=1
			fi
		fi
			
		if [[ $_axe_tmp_error_state -eq 0 ]]; then
			if [[ $2 == "--install" && $3 == "--nocon" ]]; then
				pacman -U --noconfirm *.pkg.tar.xz
				if [[ ! $? -eq 0 ]]; then
					echo -e "${_AXE_FUCKUP_MODE} $1 FAILED to install even when asked to ${txtrst}"
					echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"					
					echo -e "${_AXE_BLOCK_MODE} End of build_axe_pkgbuild ${txtblu} >>  $1  <<  ${txtrst}"
					[[ $_debug_build_axe_pkgbuild -eq 1 ]] && any_key					
					return 6
				fi
			fi
			if [[ $2 == "--install" && $3 == "--con" ]]; then
				pacman -U *.pkg.tar.xz
				if [[ ! $? -eq 0 ]]; then
					echo -e "${_AXE_FUCKUP_MODE} $1 FAILED to install even when asked to ${txtrst}"
					echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"					
					echo -e "${_AXE_BLOCK_MODE} End of build_axe_pkgbuild ${txtblu} >>  $1  <<  ${txtrst}"
					[[ $_debug_build_axe_pkgbuild -eq 1 ]] && any_key					
					return 6
				fi
			fi
			if [[ $2 == "--install-force" ]]; then
				pacman -Uf *.pkg.tar.xz
				if [[ ! $? -eq 0 ]]; then
					echo -e "${_AXE_FUCKUP_MODE} $1 FAILED to install even when asked to ${txtrst}"
					echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"					
					echo -e "${_AXE_BLOCK_MODE} End of build_axe_pkgbuild ${txtblu} >>  $1  <<  ${txtrst}"
					[[ $_debug_build_axe_pkgbuild -eq 1 ]] && any_key					
					return 6
				fi
			fi
			
			cp -pf  $_AXE_RAM_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
			echo "date stamp for this build is $(date) for PKGBUILD $1 " > "$_AXE_BINARY_EXPORT_DIR/$1-$(date).datestamp"
			echo -e "  ${_AXE_INFO_MODE} $1 built and copied to $_AXE_BINARY_EXPORT_DIR with -O3 from $_AXE_RAM_BUILD_DIR $(date)${txtrst}"
			echo "$1 " >> "$_AXE_DIR/build_sucsess.list"
	
			cd /root/
			rm -fr "$_AXE_RAM_BUILD_DIR/$1"
			# switch to -O2
			sed -i 's/-O3/-O2/' /etc/makepkg.conf
			echo -e "${_AXE_BLOCK_MODE} End of build_axe_pkgbuild ${txtblu} >>  $1  <<  ${txtrst}"
			return 0
		else
			cd /root/
			echo -e "${_AXE_FUCKUP_MODE} $1 FAILED to build with -O3 from $_AXE_RAM_BUILD_DIR $(date)${txtrst}"
			rm -fr "$_AXE_RAM_BUILD_DIR/$1"
		fi
		
		
		
		
		# hdd with -O3********************************************************************************************************
		
		
		copy_pkgbuild "$1" "$_AXE_HDD_BUILD_DIR" "$9"
		cd "$_AXE_HDD_BUILD_DIR/$1"
		
		_axe_tmp_error_state=0
		if [[ $3 == "--nocon" ]]; then
			makepkg --asroot --noconfirm -csf
			if [[ ! $? -eq 0 ]]; then
				_axe_tmp_error_state=1
			fi
		fi
		if [[ $3 == "--con" ]]; then
			makepkg --asroot -csf
			if [[ ! $? -eq 0 ]]; then
				_axe_tmp_error_state=1
			fi
		fi
			
		if [[ $_axe_tmp_error_state -eq 0 ]]; then
			if [[ $2 == "--install" && $3 == "--nocon" ]]; then
				pacman -U --noconfirm *.pkg.tar.xz
				if [[ ! $? -eq 0 ]]; then
					echo -e "${_AXE_FUCKUP_MODE} $1 FAILED to install even when asked to ${txtrst}"
					echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"					
					echo -e "${_AXE_BLOCK_MODE} End of build_axe_pkgbuild ${txtblu} >>  $1  <<  ${txtrst}"
					[[ $_debug_build_axe_pkgbuild -eq 1 ]] && any_key					
					return 6
				fi
			fi
			if [[ $2 == "--install" && $3 == "--con" ]]; then
				pacman -U *.pkg.tar.xz
				if [[ ! $? -eq 0 ]]; then
					echo -e "${_AXE_FUCKUP_MODE} $1 FAILED to install even when asked to ${txtrst}"
					echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"					
					echo -e "${_AXE_BLOCK_MODE} End of build_axe_pkgbuild ${txtblu} >>  $1  <<  ${txtrst}"
					[[ $_debug_build_axe_pkgbuild -eq 1 ]] && any_key					
					return 6
				fi
			fi
			if [[ $2 == "--install-force" ]]; then
				pacman -Uf *.pkg.tar.xz
				if [[ ! $? -eq 0 ]]; then
					echo -e "${_AXE_FUCKUP_MODE} $1 FAILED to install even when asked to ${txtrst}"
					echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"					
					echo -e "${_AXE_BLOCK_MODE} End of build_axe_pkgbuild ${txtblu} >>  $1  <<  ${txtrst}"
					[[ $_debug_build_axe_pkgbuild -eq 1 ]] && any_key					
					return 6
				fi
			fi
			
			cp -pf  $_AXE_HDD_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
			echo "date stamp for this build is $(date) for PKGBUILD $1 " > "$_AXE_BINARY_EXPORT_DIR/$1-$(date).datestamp"
			echo -e "  ${_AXE_INFO_MODE} $1 built and copied to $_AXE_BINARY_EXPORT_DIR with -O3 from $_AXE_HDD_BUILD_DIR $(date)${txtrst}"
			echo "$1 " >> "$_AXE_DIR/build_sucsess.list"
			cd /root/
			# switch to -O2
			sed -i 's/-O3/-O2/' /etc/makepkg.conf
			rm -fr "$_AXE_HDD_BUILD_DIR/$1"
			echo -e "${_AXE_BLOCK_MODE} End of build_axe_pkgbuild ${txtblu} >>  $1  <<  ${txtrst}"
			return 1
		else
			echo -e "${_AXE_FUCKUP_MODE} $1 FAILED to build with -O3 from $_AXE_HDD_BUILD_DIR $(date)${txtrst}"
			cd /root/
			rm -fr "$_AXE_HDD_BUILD_DIR/$1"
		fi
		
		
		
	fi

	[[ $_debug_build_axe_pkgbuild -eq 1 && ! $5 == "--o2" ]] && echo -e "  ${_AXE_DEBUG_MODE}  -O2 has been chosen as default for this package ${txtrst}" && any_key


	# ram with -O2*********************************************************************************************************

	# switch to -O2
	sed -i 's/-O3/-O2/' /etc/makepkg.conf
	
	copy_pkgbuild "$1" "$_AXE_RAM_BUILD_DIR" "$9"
	cd "$_AXE_RAM_BUILD_DIR/$1"
	
	if [[ $1 == "linux" && $_AXE_LINUX_MENU_YES -eq 1 ]]; then
		#alter linux PKGINFO
		sed -i 's/#make nconfig/make nconfig/' "$_AXE_RAM_BUILD_DIR/linux/PKGBUILD"	
	fi
	
	_axe_tmp_error_state=0
	if [[ $3 == "--nocon" ]]; then
		makepkg --asroot --noconfirm -csf
		if [[ ! $? -eq 0 ]]; then
			_axe_tmp_error_state=1
		fi
	fi
	if [[ $3 == "--con" ]]; then
		makepkg --asroot -csf
		if [[ ! $? -eq 0 ]]; then
			_axe_tmp_error_state=1
		fi
	fi
		
	if [[ $_axe_tmp_error_state -eq 0 ]]; then
		if [[ $2 == "--install" && $3 == "--nocon" ]]; then
			pacman -U --noconfirm *.pkg.tar.xz
			if [[ ! $? -eq 0 ]]; then
				echo -e "${_AXE_FUCKUP_MODE} $1 FAILED to install even when asked to ${txtrst}"
				echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"					
				echo -e "${_AXE_BLOCK_MODE} End of build_axe_pkgbuild ${txtblu} >>  $1  <<  ${txtrst}"
				[[ $_debug_build_axe_pkgbuild -eq 1 ]] && any_key					
				return 6
			fi
		fi
		if [[ $2 == "--install" && $3 == "--con" ]]; then
			pacman -U *.pkg.tar.xz
			if [[ ! $? -eq 0 ]]; then
				echo -e "${_AXE_FUCKUP_MODE} $1 FAILED to install even when asked to ${txtrst}"
				echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"					
				echo -e "${_AXE_BLOCK_MODE} End of build_axe_pkgbuild ${txtblu} >>  $1  <<  ${txtrst}"
				[[ $_debug_build_axe_pkgbuild -eq 1 ]] && any_key					
				return 6
			fi
		fi
		if [[ $2 == "--install-force" ]]; then
			pacman -Uf *.pkg.tar.xz
			if [[ ! $? -eq 0 ]]; then
				echo -e "${_AXE_FUCKUP_MODE} $1 FAILED to install even when asked to ${txtrst}"
				echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"					
				echo -e "${_AXE_BLOCK_MODE} End of build_axe_pkgbuild ${txtblu} >>  $1  <<  ${txtrst}"
				[[ $_debug_build_axe_pkgbuild -eq 1 ]] && any_key					
				return 6
			fi
		fi
		
		cp -pf  $_AXE_RAM_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
		echo "date stamp for this build is $(date) for PKGBUILD $1 " > "$_AXE_BINARY_EXPORT_DIR/$1-$(date).datestamp"
		echo -e "  ${_AXE_INFO_MODE} $1 built and copied to $_AXE_BINARY_EXPORT_DIR with -O2 from $_AXE_RAM_BUILD_DIR $(date)${txtrst}"
		echo "$1 " >> "$_AXE_DIR/build_sucsess.list"
		cd /root/
		rm -fr "$_AXE_RAM_BUILD_DIR/$1"
		echo -e "${_AXE_BLOCK_MODE} End of build_axe_pkgbuild ${txtblu} >>  $1  <<  ${txtrst}"
		return 2
	else
		cd /root/
		echo -e "${_AXE_FUCKUP_MODE} $1 FAILED to build with -O2 from $_AXE_RAM_BUILD_DIR $(date)${txtrst}"
		rm -fr "$_AXE_RAM_BUILD_DIR/$1"
	fi


	# hdd with -O2********************************************************************************************************

	
	copy_pkgbuild "$1" "$_AXE_HDD_BUILD_DIR" "$9"
	cd "$_AXE_HDD_BUILD_DIR/$1"
	
	_axe_tmp_error_state=0
	if [[ $3 == "--nocon" ]]; then
		makepkg --asroot --noconfirm -csf
		if [[ ! $? -eq 0 ]]; then
			_axe_tmp_error_state=1
		fi
	fi
	if [[ $3 == "--con" ]]; then
		makepkg --asroot -csf
		if [[ ! $? -eq 0 ]]; then
			_axe_tmp_error_state=1
		fi
	fi
		
	if [[ $_axe_tmp_error_state -eq 0 ]]; then
		if [[ $2 == "--install" && $3 == "--nocon" ]]; then
			pacman -U --noconfirm *.pkg.tar.xz
			if [[ ! $? -eq 0 ]]; then
				echo -e "${_AXE_FUCKUP_MODE} $1 FAILED to install even when asked to ${txtrst}"
				echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"					
				echo -e "${_AXE_BLOCK_MODE} End of build_axe_pkgbuild ${txtblu} >>  $1  <<  ${txtrst}"
				[[ $_debug_build_axe_pkgbuild -eq 1 ]] && any_key					
				return 6
			fi
		fi
		if [[ $2 == "--install" && $3 == "--con" ]]; then
			pacman -U *.pkg.tar.xz
			if [[ ! $? -eq 0 ]]; then
				echo -e "${_AXE_FUCKUP_MODE} $1 FAILED to install even when asked to ${txtrst}"
				echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"					
				echo -e "${_AXE_BLOCK_MODE} End of build_axe_pkgbuild ${txtblu} >>  $1  <<  ${txtrst}"
				[[ $_debug_build_axe_pkgbuild -eq 1 ]] && any_key					
				return 6
			fi
		fi
		if [[ $2 == "--install-force" ]]; then
			pacman -Uf *.pkg.tar.xz
			if [[ ! $? -eq 0 ]]; then
				echo -e "${_AXE_FUCKUP_MODE} $1 FAILED to install even when asked to ${txtrst}"
				echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"					
				echo -e "${_AXE_BLOCK_MODE} End of build_axe_pkgbuild ${txtblu} >>  $1  <<  ${txtrst}"
				[[ $_debug_build_axe_pkgbuild -eq 1 ]] && any_key					
				return 6
			fi
		fi
		
		cp -pf  $_AXE_HDD_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"
		echo "date stamp for this build is $(date) for PKGBUILD $1 " > "$_AXE_BINARY_EXPORT_DIR/$1-$(date).datestamp"
		echo -e "  ${_AXE_INFO_MODE}$1 built and copied to $_AXE_BINARY_EXPORT_DIR with -O2 from $_AXE_HDD_BUILD_DIR $(date)${txtrst}"
		echo "$1 " >> "$_AXE_DIR/build_sucsess.list"
		cd /root/
		echo -e "${_AXE_BLOCK_MODE} End of build_axe_pkgbuild ${txtblu} >>  $1  <<  ${txtrst}"
		return 3
	else
		echo -e "${_AXE_FUCKUP_MODE} $1 FAILED to build with -O2 from $_AXE_HDD_BUILD_DIR $(date)${txtrst}"
		cd /root/
		rm -fr "$_AXE_HDD_BUILD_DIR/$1"

	fi



	# hdd -02 with jopts off ***********************************************************************************************

	#comment out makeopts
	sed -i 's/MAKEFLAGS/#MAKEFLAGS/' /etc/makepkg.conf

	copy_pkgbuild "$1" "$_AXE_HDD_BUILD_DIR" "$9"
	cd "$_AXE_HDD_BUILD_DIR/$1"
	
	_axe_tmp_error_state=0
	if [[ $3 == "--nocon" ]]; then
		makepkg --asroot --noconfirm -csf
		if [[ ! $? -eq 0 ]]; then
			_axe_tmp_error_state=1
		fi
	fi
	if [[ $3 == "--con" ]]; then
		makepkg --asroot -csf
		if [[ ! $? -eq 0 ]]; then
			_axe_tmp_error_state=1
		fi
	fi
		
	if [[ $_axe_tmp_error_state -eq 0 ]]; then
		if [[ $2 == "--install" && $3 == "--nocon" ]]; then
			pacman -U --noconfirm *.pkg.tar.xz
			if [[ ! $? -eq 0 ]]; then
				echo -e "${_AXE_FUCKUP_MODE} $1 FAILED to install even when asked to ${txtrst}"
				echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"					
				echo -e "${_AXE_BLOCK_MODE} End of build_axe_pkgbuild ${txtblu} >>  $1  <<  ${txtrst}"
				[[ $_debug_build_axe_pkgbuild -eq 1 ]] && any_key					
				return 6
			fi
		fi
		if [[ $2 == "--install" && $3 == "--con" ]]; then
			pacman -U *.pkg.tar.xz
			if [[ ! $? -eq 0 ]]; then
				echo -e "${_AXE_FUCKUP_MODE} $1 FAILED to install even when asked to ${txtrst}"
				echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"					
				echo -e "${_AXE_BLOCK_MODE} End of build_axe_pkgbuild ${txtblu} >>  $1  <<  ${txtrst}"
				[[ $_debug_build_axe_pkgbuild -eq 1 ]] && any_key					
				return 6
			fi
		fi
		if [[ $2 == "--install-force" ]]; then
			pacman -Uf *.pkg.tar.xz
			if [[ ! $? -eq 0 ]]; then
				echo -e "${_AXE_FUCKUP_MODE} $1 FAILED to install even when asked to ${txtrst}"
				echo "$1" >> "$_AXE_DIR/build_fail_to_install.list"					
				echo -e "${_AXE_BLOCK_MODE} End of build_axe_pkgbuild ${txtblu} >>  $1  <<  ${txtrst}"
				[[ $_debug_build_axe_pkgbuild -eq 1 ]] && any_key					
				return 6
			fi
		fi
		
		cp -pf  $_AXE_HDD_BUILD_DIR/$1/*.pkg.tar.xz "$_AXE_BINARY_EXPORT_DIR"

		echo "date stamp for this build is $(date) for PKGBUILD $1 " > "$_AXE_BINARY_EXPORT_DIR/$1-$(date).datestamp"
		echo -e "  ${_AXE_INFO_MODE} $1 built and copied to $_AXE_BINARY_EXPORT_DIR with -O2 from hdd with MAKEOPTS commented out $(date)${txtrst}"
		echo "$1 " >> "$_AXE_DIR/build_sucsess.list"
		cd /root/
		rm -fr "$_AXE_HDD_BUILD_DIR/$1"
		#uncomment MAKEFLAGS
		sed -i 's/#MAKEFLAGS/MAKEFLAGS/' /etc/makepkg.conf
		echo -e "${_AXE_BLOCK_MODE} End of build_axe_pkgbuild ${txtblu} >>  $1  <<  ${txtrst}"
		return 4
	else
		cd /root/
		#lets log this build fail
		mkdir -pv "$_AXE_FAIL_BUILD_LOGS_DIR/$1/"
		cp -p $_AXE_HDD_BUILD_DIR/$1/*.log "$_AXE_FAIL_BUILD_LOGS_DIR/$1/"
		rm -fr "$_AXE_HDD_BUILD_DIR/$1"
		echo -e "${_AXE_FUCKUP_MODE} $1 failed to build with -O2 -O3 from both ram and $_AXE_HDD_BUILD_DIR AND even failed the hdd,-O2,no MAKEFLAGS build $(date)${txtrst}"
		echo "$1" >> "$_AXE_DIR/build_fail.list"
		#uncomment MAKEFLAGS
		sed -i 's/#MAKEFLAGS/MAKEFLAGS/' /etc/makepkg.conf
		
	fi
	
	
	
		#Returns
			#0-4 good builds
			#0 o3 ram
			#1 o3hd
			#2 o2ram
			#3 o2hdd
			#4 o2jopts-off
			#5 failed to build
			#6 failed to install
			#7 package was excluded because of check_pkg_tag check
			
			
	return 5
	echo -e "${_AXE_BLOCK_MODE} End of build_axe_pkgbuild ${txtblu} >>  $1  <<  ${txtrst}"
}

# toolchain build functions ***********************************************************************************************************************************
#***************************************************************************************************************************************************************

function build_gcc()
{
	echo -e "${_AXE_BLOCK_MODE} Start of build gcc$_AXE_MULTILIB_SUFFIX pass$_AXE_GCC_REP ${txtrst}"
	
	#build gcc,  will try it from the hdd only since it never builds from ram
	
	#first input argument type of install action
		#export ... do not install packages, copy them to local repo and export entire pkgbuild dir
		#install ... do not export packages just install them
		#install-export ..... both export the packages and install them	

		
		
		
	copy_pkgbuild "gcc$_AXE_MULTILIB_SUFFIX" "$_AXE_HDD_BUILD_DIR"
	
	
	cd "$_AXE_HDD_BUILD_DIR/gcc$_AXE_MULTILIB_SUFFIX"
	makepkg --asroot --noconfirm -csf
	if [[ $? -eq 0 ]]; then

		case $1 in
			"install") pacman -U --noconfirm *.pkg.tar.xz 
						if [[ ! $? -eq 0 ]]; then
							_AXE_BUILD_PROBLEM_TOOLCHAIN_YES=1
							echo -e "${_AXE_FUCKUP_MODE} gcc$_AXE_MULTILIB_SUFFIX FAILED to install even when asked to ${txtrst}"
							echo "gcc$_AXE_MULTILIB_SUFFIX or one of the split packages failed to install" >> "$_AXE_DIR/build_fail_to_install.list"					
							return 11
						fi ;;
			"export") cp -pf  $_AXE_HDD_BUILD_DIR/gcc$_AXE_MULTILIB_SUFFIX/*.pkg.tar.xz "$_AXE_OPTIMISED_TOOLCHAIN_DIR"
						echo "date stamp for this build is $(date) for PKGBUILD gcc$_AXE_MULTILIB_SUFFIX" > "$_AXE_OPTIMISED_TOOLCHAIN_DIR/gcc$_AXE_MULTILIB_SUFFIX-$(date).datestamp" ;;
			"install-export") pacman -U --noconfirm *.pkg.tar.xz
						if [[ $? -eq 0 ]]; then 
							cp -pf  $_AXE_HDD_BUILD_DIR/gcc$_AXE_MULTILIB_SUFFIX/*.pkg.tar.xz "$_AXE_OPTIMISED_TOOLCHAIN_DIR"
							echo "date stamp for this build is $(date) for PKGBUILD gcc$_AXE_MULTILIB_SUFFIX" > "$_AXE_OPTIMISED_TOOLCHAIN_DIR/gcc$_AXE_MULTILIB_SUFFIX-$(date).datestamp" 
						else
							_AXE_BUILD_PROBLEM_TOOLCHAIN_YES=1
							echo -e "${_AXE_FUCKUP_MODE} gcc$_AXE_MULTILIB_SUFFIX FAILED to install even when asked to ${txtrst}"
							echo "gcc$_AXE_MULTILIB_SUFFIX or one of the split packages failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
							return 11
						fi ;;
		esac
		
		echo "sucsessfully built gcc$_AXE_MULTILIB_SUFFIX pass$_AXE_GCC_REP $(date) suceeded from $_AXE_HDD_BUILD_DIR" >> "$_AXE_LOGS_DIR/toolchain_build_log"
		cd /root/
		echo -e "${_AXE_BLOCK_MODE} End of build gcc$_AXE_MULTILIB_SUFFIX pass$_AXE_GCC_REP${txtrst}"
		let _AXE_GCC_REP=$_AXE_GCC_REP+1
		return 0
	else
		echo "!!!!!!!!!!!build fails gcc$_AXE_MULTILIB_SUFFIX pass$_AXE_GCC_REP $(date) am trying it with makeopts commented out " >> "$_AXE_LOGS_DIR/toolchain_build_log"
		cd /root/
		rm -rf "$_AXE_HDD_BUILD_DIR/gcc$_AXE_MULTILIB_SUFFIX"
	fi

	echo -e "  ${_AXE_INFO_MODE} ahhh shit there is a build problem gcc, going to try a non-paralell build${txtrst}"

	#lets try that again with etc/makepkg.conf
	#comment out MAKEFLAGS
	sed -i 's/MAKEFLAGS/#MAKEFLAGS/' /etc/makepkg.conf

	copy_pkgbuild "gcc$_AXE_MULTILIB_SUFFIX" "$_AXE_HDD_BUILD_DIR"
	
	cd "$_AXE_HDD_BUILD_DIR/gcc$_AXE_MULTILIB_SUFFIX"
	makepkg --asroot --noconfirm --log -csf
	if [[ $? -eq 0 ]]; then
		case $1 in
			"install") pacman -U --noconfirm *.pkg.tar.xz 
						if [[ ! $? -eq 0 ]]; then
							_AXE_BUILD_PROBLEM_TOOLCHAIN_YES=1
							echo -e "${_AXE_FUCKUP_MODE} gcc$_AXE_MULTILIB_SUFFIX FAILED to install even when asked to ${txtrst}"
							echo "gcc$_AXE_MULTILIB_SUFFIX or one of the split packages failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
							return 11
						fi ;;
			"export") cp -pf  $_AXE_HDD_BUILD_DIR/gcc$_AXE_MULTILIB_SUFFIX/*.pkg.tar.xz "$_AXE_OPTIMISED_TOOLCHAIN_DIR"
						echo "date stamp for this build is $(date) for PKGBUILD gcc$_AXE_MULTILIB_SUFFIX" > "$_AXE_OPTIMISED_TOOLCHAIN_DIR/gcc$_AXE_MULTILIB_SUFFIX-$(date).datestamp" ;;
			"install-export") pacman -U --noconfirm *.pkg.tar.xz
						if [[ $? -eq 0 ]]; then 
							cp -pf  $_AXE_HDD_BUILD_DIR/gcc$_AXE_MULTILIB_SUFFIX/*.pkg.tar.xz "$_AXE_OPTIMISED_TOOLCHAIN_DIR"
							echo "date stamp for this build is $(date) for PKGBUILD gcc$_AXE_MULTILIB_SUFFIX" > "$_AXE_OPTIMISED_TOOLCHAIN_DIR/gcc$_AXE_MULTILIB_SUFFIX-$(date).datestamp" 
						else
							_AXE_BUILD_PROBLEM_TOOLCHAIN_YES=1
							echo -e "${_AXE_FUCKUP_MODE} gcc$_AXE_MULTILIB_SUFFIX FAILED to install even when asked to ${txtrst}"
							echo "gcc$_AXE_MULTILIB_SUFFIX or one of the split packages failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
							return 11
						fi ;;
		esac

		echo "sucsessfully built gcc$_AXE_MULTILIB_SUFFIX pass$_AXE_GCC_REP $(date) from $_AXE_HDD_BUILD_DIR with MAKEFLAGS commented out" >> "$_AXE_LOGS_DIR/toolchain_build_log"
		cd /root/
		rm -rf "$_AXE_HDD_BUILD_DIR/gcc$_AXE_MULTILIB_SUFFIX"
		#uncomment MAKEFLAGS
		sed -i 's/#MAKEFLAGS/MAKEFLAGS/' /etc/makepkg.conf
		echo -e "${_AXE_BLOCK_MODE} End of build gcc$_AXE_MULTILIB_SUFFIX pass$_AXE_GCC_REP${txtrst}"
		let _AXE_GCC_REP=$_AXE_GCC_REP+1
		return 1
	else
		mkdir -pv "$_AXE_FAIL_BUILD_LOGS_DIR/gcc$_AXE_MULTILIB_SUFFIX"
		cp -p $_AXE_HDD_BUILD_DIR/gcc$_AXE_MULTILIB_SUFFIX/*.log "$_AXE_FAIL_BUILD_LOGS_DIR/gcc$_AXE_MULTILIB_SUFFIX"
		echo "!!!!!!!!!!!build fails gcc$_AXE_MULTILIB_SUFFIX pass$_AXE_GCC_REP also failed same build with MAKEFLAGS commented out $(date)" >> "$_AXE_LOGS_DIR/toolchain_build_log"
		cd /root/
		rm -rf "$_AXE_HDD_BUILD_DIR/gcc$_AXE_MULTILIB_SUFFIX"
		#uncomment MAKEFLAGS
		sed -i 's/#MAKEFLAGS/MAKEFLAGS/' /etc/makepkg.conf
		echo -e "${_AXE_BLOCK_MODE} End of build gcc$_AXE_MULTILIB_SUFFIX pass$_AXE_GCC_REP${txtrst}"
	fi
	
	
	_AXE_BUILD_PROBLEM_TOOLCHAIN_YES=1
	#Returns
			#0 good build
			#1 built on second or susiquent try
			#10 failed to build
	echo -e "${_AXE_BLOCK_MODE} End of build gcc$_AXE_MULTILIB_SUFFIX pass$_AXE_GCC_REP ${txtrst}"
	return 10
	
}

function build_libtool()
{
	echo -e "${_AXE_BLOCK_MODE} Start of build libtool$_AXE_MULTILIB_SUFFIX pass $_AXE_LIBTOOL_REP  ${txtrst}"

	#first input argument
		#export ... do not install packages, copy them to local repo and export entire pkgbuild dir
		#install ... do not export packages just install them
		#install-export ..... both export the packages and install them
		
	#build libtool, from tmp dir never had any problem building  from ram
	
	copy_pkgbuild "libtool$_AXE_MULTILIB_SUFFIX" "$_AXE_RAM_BUILD_DIR"
	
	
	cd "$_AXE_RAM_BUILD_DIR/libtool$_AXE_MULTILIB_SUFFIX"
	makepkg --asroot --noconfirm --log -csf
	if [[ $? -eq 0 ]]; then
			
		case $1 in
			"install") pacman -U --noconfirm *.pkg.tar.xz 
						if [[ ! $? -eq 0 ]]; then
							_AXE_BUILD_PROBLEM_TOOLCHAIN_YES=1
							echo -e "${_AXE_FUCKUP_MODE} libtool$_AXE_MULTILIB_SUFFIX FAILED to install even when asked to ${txtrst}"
							echo "libtool$_AXE_MULTILIB_SUFFIX or one of the split packages failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
							return 11
						fi ;;
			"export") cp -pf  $$_AXE_RAM_BUILD_DIR/libtool$_AXE_MULTILIB_SUFFIX/*.pkg.tar.xz "$_AXE_OPTIMISED_TOOLCHAIN_DIR"
						echo "date stamp for this build is $(date) for PKGBUILD libtool$_AXE_MULTILIB_SUFFIX" > "$_AXE_OPTIMISED_TOOLCHAIN_DIR/libtool$_AXE_MULTILIB_SUFFIX-$(date).datestamp" ;;
			"install-export") pacman -U --noconfirm *.pkg.tar.xz
						if [[ $? -eq 0 ]]; then 
							cp -pf  $_AXE_RAM_BUILD_DIR/libtool$_AXE_MULTILIB_SUFFIX/*.pkg.tar.xz "$_AXE_OPTIMISED_TOOLCHAIN_DIR"
							echo "date stamp for this build is $(date) for PKGBUILD libtool$_AXE_MULTILIB_SUFFIX" > "$_AXE_OPTIMISED_TOOLCHAIN_DIR/libtool$_AXE_MULTILIB_SUFFIX-$(date).datestamp"
						else
							_AXE_BUILD_PROBLEM_TOOLCHAIN_YES=1
							echo -e "${_AXE_FUCKUP_MODE} libtool$_AXE_MULTILIB_SUFFIX FAILED to install even when asked to ${txtrst}"
							echo "libtool$_AXE_MULTILIB_SUFFIX or one of the split packages failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
							return 11
						fi ;;
		esac
			
		echo "sucsessfully built libtool$_AXE_MULTILIB_SUFFIX pass$_AXE_LIBTOOL_REP $(date)" >> "$_AXE_LOGS_DIR/toolchain_build_log"
		cd /root/
		echo -e "${_AXE_BLOCK_MODE} End of build libtool$_AXE_MULTILIB_SUFFIX pass$_AXE_LIBTOOL_REP${txtrst}"
		let _AXE_LIBTOOL_REP=$_AXE_LIBTOOL_REP+1
		return 0
	else
		echo "!!!!!!!!!!!build fails libtool$_AXE_MULTILIB_SUFFIX pass$_AXE_LIBTOOL_REP $(date)" >> "$_AXE_LOGS_DIR/toolchain_build_log"
		mkdir -pv "$_AXE_FAIL_BUILD_LOGS_DIR/libtool$_AXE_MULTILIB_SUFFIX"
		cp -p $_AXE_RAM_BUILD_DIR/libtool$_AXE_MULTILIB_SUFFIX/*.log "$_AXE_FAIL_BUILD_LOGS_DIR/libtool$_AXE_MULTILIB_SUFFIX"
		rm -rf "$_AXE_RAM_BUILD_DIR/libtool$_AXE_MULTILIB_SUFFIX"
		echo -e "${_AXE_BLOCK_MODE} END of build libtool$_AXE_MULTILIB_SUFFIX ${txtrst}"
		
	fi
	
	
		#Returns
			#0 good build
			#10 failed to build
	echo -e "${_AXE_BLOCK_MODE} END of build libtool$_AXE_MULTILIB_SUFFIX pass $_AXE_LIBTOOL_REP ${txtrst}"
	return 10
	
}

function build_libltdl()
{
	echo -e "${_AXE_BLOCK_MODE} Start of build_libltdl pass $_AXE_LIBLTDL_REP ${txtrst}"
	
	copy_pkgbuild "libtool" "$_AXE_RAM_BUILD_DIR"
	
	cd "$_AXE_RAM_BUILD_DIR/libtool"
	makepkg --asroot --noconfirm --log -csf
	if [[ $? -eq 0 ]]; then
		cp -fp  libltdl*.pkg.tar.xz "$_AXE_OPTIMISED_TOOLCHAIN_DIR"
		pacman -U --noconfirm libltdl*.pkg.tar.xz
		if [[ ! $? -eq 0 ]]; then
				_AXE_BUILD_PROBLEM_TOOLCHAIN_YES=1
				echo -e "${_AXE_FUCKUP_MODE} libltdl FAILED to install even when asked to ${txtrst}"
				echo "libltdl or one of the split packages failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
				return 11
		fi
		echo "sucsessfully built libltdl pass$_AXE_LIBLTDL_REP and installed it seperate from libtool for the libtool-multilib toolchain $(date)" >> "$_AXE_LOGS_DIR/toolchain_build_log"
		cd /root/
		let _AXE_LIBLTDL_REP=$_AXE_LIBLTDL_REP+1
		echo "date stamp for this build is $(date) for PKGBUILD libltdl" > "$_AXE_OPTIMISED_TOOLCHAIN_DIR/libltdl-$(date).datestamp"
		return 0
	else
		echo "!!!!!!!!!!!build fails libltdl pass$_AXE_LIBLTDL_REP $(date)" >> "$_AXE_LOGS_DIR/toolchain_build_log"
		mkdir -pv "$_AXE_FAIL_BUILD_LOGS_DIR/libltdl"
		cp -p $_AXE_RAM_BUILD_DIR/libtool/*.log "$_AXE_FAIL_BUILD_LOGS_DIR/libltdl"
		rm -rf "$_AXE_RAM_BUILD_DIR/libtool"
		echo -e "${_AXE_BLOCK_MODE} End of build libltdl${txtrst}"
	fi

	echo -e "${_AXE_BLOCK_MODE} END of build_libltdl pass $_AXE_LIBLTDL_REP ${txtrst}"
	return 10
	
}

function build_binutils()
{
	echo -e "${_AXE_BLOCK_MODE} Start of build_binutils$_AXE_MULTILIB_SUFFIX pass${txtrst} ${txtrst}"
	
	#first input argument
		#export ... do not install packages, copy them to local repo and export entire pkgbuild dir
		#install ... do not export packages just install them
		#install-export ..... both export the packages and install them
		
	#build binutils$_AXE_MULTILIB_SUFFIX, from tmp dir if fails will try this one from hdd to since i have had issues with it in ram
	
	copy_pkgbuild "binutils$_AXE_MULTILIB_SUFFIX" "$_AXE_RAM_BUILD_DIR"

	cd "$_AXE_RAM_BUILD_DIR/binutils$_AXE_MULTILIB_SUFFIX"
	makepkg --asroot --noconfirm -csf
	if [[ $? -eq 0 ]]; then

		case $1 in
			"install") pacman -U --noconfirm *.pkg.tar.xz 
						if [[ ! $? -eq 0 ]]; then
							_AXE_BUILD_PROBLEM_TOOLCHAIN_YES=1
							echo -e "${_AXE_FUCKUP_MODE} binutils$_AXE_MULTILIB_SUFFIX FAILED to install even when asked to ${txtrst}"
							echo "binutils$_AXE_MULTILIB_SUFFIX or one of the split packages failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
							return 11
						fi ;;
			"export") cp -pf $_AXE_RAM_BUILD_DIR/binutils$_AXE_MULTILIB_SUFFIX/*.pkg.tar.xz "$_AXE_OPTIMISED_TOOLCHAIN_DIR"
						echo "date stamp for this build is $(date) for PKGBUILD binutils$_AXE_MULTILIB_SUFFIX" > "$_AXE_OPTIMISED_TOOLCHAIN_DIR/binutils$_AXE_MULTILIB_SUFFIX-$(date).datestamp" ;;
			"install-export") pacman -U --noconfirm *.pkg.tar.xz
						if [[ $? -eq 0 ]]; then 
							cp -pf  $_AXE_RAM_BUILD_DIR/binutils$_AXE_MULTILIB_SUFFIX/*.pkg.tar.xz "$_AXE_OPTIMISED_TOOLCHAIN_DIR"
							echo "date stamp for this build is $(date) for PKGBUILD binutils$_AXE_MULTILIB_SUFFIX" > "$_AXE_OPTIMISED_TOOLCHAIN_DIR/binutils$_AXE_MULTILIB_SUFFIX-$(date).datestamp"
						else
							_AXE_BUILD_PROBLEM_TOOLCHAIN_YES=1
							echo -e "${_AXE_FUCKUP_MODE} binutils$_AXE_MULTILIB_SUFFIX FAILED to install even when asked to ${txtrst}"
							echo "binutils$_AXE_MULTILIB_SUFFIX or one of the split packages failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
							return 11
						fi ;;
		esac
		
		echo "sucsessfully built binutils$_AXE_MULTILIB_SUFFIX pass$_AXE_BINUTILS_REP $(date)" >> "$_AXE_LOGS_DIR/toolchain_build_log"
		cd /root/
		echo -e "${_AXE_BLOCK_MODE} End of build binutils$_AXE_MULTILIB_SUFFIX pass$_AXE_GLIBC_REP ${txtrst}"
		let _AXE_BINUTILS_REP=$_AXE_BINUTILS_REP+1
		return 0
	else
		cd /root/
		rm -rf "$_AXE_RAM_BUILD_DIR/binutils$_AXE_MULTILIB_SUFFIX"
	fi


	#ok build failed in ram lets try it on hdd
	echo -e "  ${_AXE_INFO_MODE} ahhh shit binutils$_AXE_MULTILIB_SUFFIX failed in ram, not necessarily disasterous could be your swap, going to build it on the HDD to make sure${txtrst}"
	
	copy_pkgbuild "binutils$_AXE_MULTILIB_SUFFIX" "$_AXE_HDD_BUILD_DIR"
	
	cd "$_AXE_HDD_BUILD_DIR/binutils$_AXE_MULTILIB_SUFFIX"
	makepkg --asroot --noconfirm -csf
	if [[ $? -eq 0 ]]; then
		case $1 in
			"install") pacman -U --noconfirm *.pkg.tar.xz 
						if [[ ! $? -eq 0 ]]; then
							_AXE_BUILD_PROBLEM_TOOLCHAIN_YES=1
							echo -e "${_AXE_FUCKUP_MODE} binutils$_AXE_MULTILIB_SUFFIX FAILED to install even when asked to ${txtrst}"
							echo "binutils$_AXE_MULTILIB_SUFFIX or one of the split packages failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
							return 11
						fi ;;
			"export") cp -pf  $_AXE_HDD_BUILD_DIR/binutils$_AXE_MULTILIB_SUFFIX/*.pkg.tar.xz "$_AXE_OPTIMISED_TOOLCHAIN_DIR"
						echo "date stamp for this build is $(date) for PKGBUILD binutils$_AXE_MULTILIB_SUFFIX" > "$_AXE_OPTIMISED_TOOLCHAIN_DIR/binutils$_AXE_MULTILIB_SUFFIX-$(date).datestamp" ;;
			"install-export") pacman -U --noconfirm *.pkg.tar.xz
						if [[ $? -eq 0 ]]; then 
							cp -pf  $_AXE_HDD_BUILD_DIR/binutils$_AXE_MULTILIB_SUFFIX*.pkg.tar.xz "$_AXE_OPTIMISED_TOOLCHAIN_DIR"
							echo "date stamp for this build is $(date) for PKGBUILD binutils$_AXE_MULTILIB_SUFFIX" > "$_AXE_OPTIMISED_TOOLCHAIN_DIR/binutils$_AXE_MULTILIB_SUFFIX-$(date).datestamp"
						else
							_AXE_BUILD_PROBLEM_TOOLCHAIN_YES=1
							echo -e "${_AXE_FUCKUP_MODE} binutils$_AXE_MULTILIB_SUFFIX FAILED to install even when asked to ${txtrst}"
							echo "binutils$_AXE_MULTILIB_SUFFIX or one of the split packages failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
							return 11
						fi ;;
		esac
		echo "sucsessfully built binutils$_AXE_MULTILIB_SUFFIX pass$_AXE_BINUTILS_REP $(date) failed in /tmp/ suceeded from $_AXE_HDD_BUILD_DIR" >> "$_AXE_LOGS_DIR/toolchain_build_log"
		cd /root/
		echo -e "${_AXE_BLOCK_MODE} End of build binutils$_AXE_MULTILIB_SUFFIX pass$_AXE_GLIBC_REP ${txtrst}"
		let _AXE_BINUTILS_REP=$_AXE_BINUTILS_REP+1
		return 1
	else
		cd /root/
		echo "!!!!!!!!!!!build fails binutils$_AXE_MULTILIB_SUFFIX pass$_AXE_BINUTILS_REP $(date) failed from both ram and hdd" >> "$_AXE_LOGS_DIR/toolchain_build_log"
		rm -rf "$_AXE_HDD_BUILD_DIR/binutils$_AXE_MULTILIB_SUFFIX/"
	fi
	
	#lets try that again with MAKEFLAGS commented out
	#comment out MAKEFLAGS
	sed -i 's/MAKEFLAGS/#MAKEFLAGS/' /etc/makepkg.conf
	

	copy_pkgbuild "binutils$_AXE_MULTILIB_SUFFIX" "$_AXE_HDD_BUILD_DIR"

	cd "$_AXE_HDD_BUILD_DIR/binutils$_AXE_MULTILIB_SUFFIX"
	makepkg --asroot --noconfirm --log -csf
	if [[ $? -eq 0 ]]; then
		case $1 in
			"install") pacman -U --noconfirm *.pkg.tar.xz 
						if [[ ! $? -eq 0 ]]; then
							_AXE_BUILD_PROBLEM_TOOLCHAIN_YES=1
							echo -e "${_AXE_FUCKUP_MODE} binutils$_AXE_MULTILIB_SUFFIX FAILED to install even when asked to ${txtrst}"
							echo "binutils$_AXE_MULTILIB_SUFFIX or one of the split packages failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
							return 11
						fi ;;
			"export") cp -pf  $_AXE_HDD_BUILD_DIR/binutils$_AXE_MULTILIB_SUFFIX/*.pkg.tar.xz "$_AXE_OPTIMISED_TOOLCHAIN_DIR"
						echo "date stamp for this build is $(date) for PKGBUILD binutils$_AXE_MULTILIB_SUFFIX" > "$_AXE_OPTIMISED_TOOLCHAIN_DIR/binutils$_AXE_MULTILIB_SUFFIX-$(date).datestamp" ;;
			"install-export") pacman -U --noconfirm *.pkg.tar.xz
						if [[ $? -eq 0 ]]; then 
							cp -pf  $_AXE_HDD_BUILD_DIR/binutils$_AXE_MULTILIB_SUFFIX*.pkg.tar.xz "$_AXE_OPTIMISED_TOOLCHAIN_DIR"
							echo "date stamp for this build is $(date) for PKGBUILD binutils$_AXE_MULTILIB_SUFFIX" > "$_AXE_OPTIMISED_TOOLCHAIN_DIR/binutils$_AXE_MULTILIB_SUFFIX-$(date).datestamp"
						else
							_AXE_BUILD_PROBLEM_TOOLCHAIN_YES=1
							echo -e "${_AXE_FUCKUP_MODE} binutils$_AXE_MULTILIB_SUFFIX FAILED to install even when asked to ${txtrst}"
							echo "binutils$_AXE_MULTILIB_SUFFIX or one of the split packages failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
							return 11
						fi ;;
		esac
		echo "sucsessfully built binutils$_AXE_MULTILIB_SUFFIX pass$_AXE_BINUTILS_REP $(date) from $_AXE_HDD_BUILD_DIR with MAKEFLAGS commented out" >> "$_AXE_LOGS_DIR/toolchain_build_log"
		cd /root/
		#uncomment MAKEFLAGS
		sed -i 's/#MAKEFLAGS/MAKEFLAGS/' /etc/makepkg.conf
		echo -e "${_AXE_BLOCK_MODE} End of build binutils$_AXE_MULTILIB_SUFFIX pass$_AXE_GLIBC_REP ${txtrst}"
		let _AXE_BINUTILS_REP=$_AXE_BINUTILS_REP+1
		return 2
	else
		echo "!!!!!!!!!!!build fails binutils$_AXE_MULTILIB_SUFFIX pass$_AXE_BINUTILS_REP $(date) failed from both ram and hdd and with MAKEFLAGS commented out" >> "$_AXE_LOGS_DIR/toolchain_build_log"
		mkdir -pv "$_AXE_FAIL_BUILD_LOGS_DIR/binutils$_AXE_MULTILIB_SUFFIX"
		cp -p $_AXE_HDD_BUILD_DIR/binutils$_AXE_MULTILIB_SUFFIX/*.log "$_AXE_FAIL_BUILD_LOGS_DIR/binutils$_AXE_MULTILIB_SUFFIX"
		rm -rf "$_AXE_HDD_BUILD_DIR/binutils$_AXE_MULTILIB_SUFFIX/"
		#uncomment MAKEFLAGS
		sed -i 's/#MAKEFLAGS/MAKEFLAGS/' /etc/makepkg.conf
	fi
	
	_AXE_BUILD_PROBLEM_TOOLCHAIN_YES=1
	
		#Returns
			#0 good build
			#1 built on second or susiquent try
			#10 failed to build
			#11 failed to install
			
	echo -e "${_AXE_BLOCK_MODE} END of build_binutils$_AXE_MULTILIB_SUFFIX pass${txtrst}"
	return 10
}

function build_glibc()
{
	echo -e "${_AXE_BLOCK_MODE} Start of glibc pass $_AXE_GLIBC_REP ${txtrst}"

	#first input argument
		#export ... do not install packages, copy them to local repo and export entire pkgbuild dir
		#install ... do not export packages just install them
		#install-export ..... both export the packages and install them
		
		
	#build glibc, from tmp dir if fails will try this one from hdd to since i have had issues with it in ram
	
	copy_pkgbuild "glibc" "$_AXE_RAM_BUILD_DIR"
	
	cd "$_AXE_RAM_BUILD_DIR/glibc"
	makepkg --asroot --noconfirm -csf
	if [[ $? -eq 0 ]]; then	
		case $1 in
			"install") pacman -U --noconfirm *.pkg.tar.xz 
						if [[ ! $? -eq 0 ]]; then
							_AXE_BUILD_PROBLEM_TOOLCHAIN_YES=1
							echo -e "${_AXE_FUCKUP_MODE} glibc FAILED to install even when asked to ${txtrst}"
							echo "glibc failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
							return 11
						fi ;;
			"export") cp -pf  $_AXE_RAM_BUILD_DIR/glibc/*.pkg.tar.xz "$_AXE_OPTIMISED_TOOLCHAIN_DIR"
						echo "date stamp for this build is $(date) for PKGBUILD glibc" > "$_AXE_OPTIMISED_TOOLCHAIN_DIR/glibc-$(date).datestamp" ;;
			"install-export") pacman -U --noconfirm *.pkg.tar.xz
						if [[ $? -eq 0 ]]; then 
							cp -pf  $_AXE_RAM_BUILD_DIR/glibc/*.pkg.tar.xz "$_AXE_OPTIMISED_TOOLCHAIN_DIR"
							echo "date stamp for this build is $(date) for PKGBUILD glibc" > "$_AXE_OPTIMISED_TOOLCHAIN_DIR/glibc-$(date).datestamp"
						else
							_AXE_BUILD_PROBLEM_TOOLCHAIN_YES=1
							echo -e "${_AXE_FUCKUP_MODE} glibc FAILED to install even when asked to ${txtrst}"
							echo "glibc failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
							return 11
						fi ;;
		esac
		
		echo "sucsessfully built glibc pass$_AXE_GLIBC_REP $(date)" >> $_AXE_LOGS_DIR/toolchain_build_log
		cd /root/
		echo -e "${_AXE_BLOCK_MODE} End of build glibc pass$_AXE_GLIBC_REP ${txtrst}"
		let _AXE_GLIBC_REP=$_AXE_GLIBC_REP+1
		return 0
	else
		rm -rf "$_AXE_RAM_BUILD_DIR/glibc"
	fi
	
	
	#ok build failed in ram lets try it on hdd
	_AXE_BUILD_PROBLEM_TOOLCHAIN_YES=1
	echo -e "  ${_AXE_INFO_MODE} ahhh shit glibc failed in ram, not necessarily disasterous could be your swap, going to build it on the HDD to make sure${txtrst}"
	
	copy_pkgbuild "glibc" "$_AXE_HDD_BUILD_DIR"

	cd "$_AXE_HDD_BUILD_DIR/glibc"
	makepkg --asroot --noconfirm -csf
	if [[ $? -eq 0 ]]; then
		case $1 in
			"install") pacman -U --noconfirm *.pkg.tar.xz 
						if [[ ! $? -eq 0 ]]; then
							_AXE_BUILD_PROBLEM_TOOLCHAIN_YES=1
							echo -e "${_AXE_FUCKUP_MODE} glibc FAILED to install even when asked to ${txtrst}"
							echo "glibc failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
							return 11
						fi ;;
			"export") cp -pf  $_AXE_HDD_BUILD_DIR/glibc/*.pkg.tar.xz "$_AXE_OPTIMISED_TOOLCHAIN_DIR"
						echo "date stamp for this build is $(date) for PKGBUILD glibc" > "$_AXE_OPTIMISED_TOOLCHAIN_DIR/glibc-$(date).datestamp" ;;
			"install-export") pacman -U --noconfirm *.pkg.tar.xz
						if [[ $? -eq 0 ]]; then 
							cp -pf  $_AXE_HDD_BUILD_DIR/glibc/*.pkg.tar.xz "$_AXE_OPTIMISED_TOOLCHAIN_DIR"
							echo "date stamp for this build is $(date) for PKGBUILD glibc" > "$_AXE_OPTIMISED_TOOLCHAIN_DIR/glibc-$(date).datestamp"
						else
							_AXE_BUILD_PROBLEM_TOOLCHAIN_YES=1
							echo -e "${_AXE_FUCKUP_MODE} glibc FAILED to install even when asked to ${txtrst}"
							echo "glibc failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
							return 11
						fi ;;
		esac
		echo "sucsessfully built glibc pass$_AXE_GLIBC_REP $(date) failed in /tmp/ suceeded from $_AXE_HDD_BUILD_DIR" >> $_AXE_LOGS_DIR/toolchain_build_log
		cd /root/
		echo -e "${_AXE_BLOCK_MODE} End of build glibc pass$_AXE_GLIBC_REP ${txtrst}"
		let _AXE_GLIBC_REP=$_AXE_GLIBC_REP+1
		return 1
	else
		echo "!!!!!!!!!!!build fails glibc pass$_AXE_GLIBC_REP $(date) failed from both ram and hdd" >> "$_AXE_LOGS_DIR/toolchain_build_log"
		rm -rf "$_AXE_HDD_BUILD_DIR/glibc/"
	fi


	#ok lets try that again with MAKEOPTS  commented out
	#comment out MAKEFLAGS
	sed -i 's/MAKEFLAGS/#MAKEFLAGS/' /etc/makepkg.conf
	
	copy_pkgbuild "glibc" "$_AXE_HDD_BUILD_DIR"

	cd "$_AXE_HDD_BUILD_DIR/glibc"
	makepkg --asroot --noconfirm --log -csf
	if [[ $? -eq 0 ]]; then
		case $1 in
			"install") pacman -U --noconfirm *.pkg.tar.xz 
						if [[ ! $? -eq 0 ]]; then
							_AXE_BUILD_PROBLEM_TOOLCHAIN_YES=1
							echo -e "${_AXE_FUCKUP_MODE} glibc FAILED to install even when asked to ${txtrst}"
							echo "glibc failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
							return 11
						fi ;;
			"export") cp -pf  $_AXE_HDD_BUILD_DIR/glibc/*.pkg.tar.xz "$_AXE_OPTIMISED_TOOLCHAIN_DIR"
						echo "date stamp for this build is $(date) for PKGBUILD glibc" > "$_AXE_OPTIMISED_TOOLCHAIN_DIR/glibc-$(date).datestamp" ;;
			"install-export") pacman -U --noconfirm *.pkg.tar.xz
						if [[ $? -eq 0 ]]; then 
							cp -pf  $_AXE_HDD_BUILD_DIR/glibc/*.pkg.tar.xz "$_AXE_OPTIMISED_TOOLCHAIN_DIR"
							echo "date stamp for this build is $(date) for PKGBUILD glibc" > "$_AXE_OPTIMISED_TOOLCHAIN_DIR/glibc-$(date).datestamp"
						else
							_AXE_BUILD_PROBLEM_TOOLCHAIN_YES=1
							echo -e "${_AXE_FUCKUP_MODE} glibc FAILED to install even when asked to ${txtrst}"
							echo "glibc failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
							return 11
						fi ;;
		esac
		echo "sucsessfully built glibc pass$_AXE_GLIBC_REP $(date) failed in /tmp/ suceeded from $_AXE_HDD_BUILD_DIR with MAKEFLAGS commented out" >> $_AXE_LOGS_DIR/toolchain_build_log
		cd /root/
		#uncomment MAKEFLAGS
		sed -i 's/#MAKEFLAGS/MAKEFLAGS/' /etc/makepkg.conf
		let _AXE_GLIBC_REP=$_AXE_GLIBC_REP+1
		echo -e "${_AXE_BLOCK_MODE} End of build glibc pass$_AXE_GLIBC_REP ${txtrst}"
		return 2
	else
		echo "!!!!!!!!!!!build fails glibc pass$_AXE_GLIBC_REP $(date) failed from both ram and hdd and with MAKEFLAGS commented out" >> "$_AXE_LOGS_DIR/toolchain_build_log"
		mkdir -pv "$_AXE_FAIL_BUILD_LOGS_DIR/glibc/"
		cp -p $_AXE_HDD_BUILD_DIR/glibc/*.log "$_AXE_FAIL_BUILD_LOGS_DIR/glibc/"
		rm -rf "$_AXE_HDD_BUILD_DIR/glibc/"
		#uncomment MAKEFLAGS
		sed -i 's/#MAKEFLAGS/MAKEFLAGS/' /etc/makepkg.conf
		echo -e "${_AXE_BLOCK_MODE} End of build glibc pass$_AXE_GLIBC_REP ${txtrst}"
	fi

		#Returns
			#0 good build
			#1 built on second or susiquent try
			#2 built on second or susiquent try
			#10 failed to build

	echo -e "${_AXE_BLOCK_MODE} End of build glibc pass$_AXE_GLIBC_REP ${txtrst}"
	return 10
}

function build_linux_api_headers()
{
	echo -e "${_AXE_BLOCK_MODE} Start of build_linux_api_headers ${txtrst}"
	
		
	#first input argument
		#export ... do not install packages, copy them to local repo and export entire pkgbuild dir
		#install ... do not export packages just install them
		#install-export ..... both export the packages and install them
		
		
	#build 	linux-api-headers, from tmp dir
	
	copy_pkgbuild "linux-api-headers" "$_AXE_RAM_BUILD_DIR"
	
	cd "$_AXE_RAM_BUILD_DIR/linux-api-headers"
	makepkg --asroot --noconfirm --log -cs
	if [[ $? -eq 0 ]]; then
	
		case $1 in
			"install") pacman -U --noconfirm *.pkg.tar.xz 
						if [[ ! $? -eq 0 ]]; then
							_AXE_BUILD_PROBLEM_TOOLCHAIN_YES=1
							echo -e "${_AXE_FUCKUP_MODE} linux-api-headers FAILED to install even when asked to ${txtrst}"
							echo "linux-api-headers failed to install" >> "$_AXE_DIR/build_fail_to_install.list"
							return 11
						fi ;;
			"export") cp -pf  $_AXE_RAM_BUILD_DIR/linux-api-headers/*.pkg.tar.xz "$_AXE_OPTIMISED_TOOLCHAIN_DIR"
						echo "date stamp for this build is $(date) for PKGBUILD linux-api-headers" > "$_AXE_OPTIMISED_TOOLCHAIN_DIR/linux-api-headers-$(date).datestamp" ;;
			"install-export") pacman -U --noconfirm *.pkg.tar.xz
						if [[ $? -eq 0 ]]; then 
							cp -pf  $_AXE_RAM_BUILD_DIR/linux-api-headers/*.pkg.tar.xz "$_AXE_OPTIMISED_TOOLCHAIN_DIR"
							echo "date stamp for this build is $(date) for PKGBUILD linux-api-headers" > "$_AXE_OPTIMISED_TOOLCHAIN_DIR/linux-api-headers-$(date).datestamp"
						else
							_AXE_BUILD_PROBLEM_TOOLCHAIN_YES=1
							echo -e "${_AXE_FUCKUP_MODE} linux-api-headers FAILED to install even when asked to ${txtrst}"
							echo "linux-api-headers" >> "$_AXE_DIR/build_fail_to_install.list"
							return 11
						fi ;;
		esac
		
		echo "sucsessfully built linux-api-headers $(date)" >> "$_AXE_LOGS_DIR/toolchain_build_log"
		cd /root/
		echo -e "${_AXE_BLOCK_MODE} End of build linux api headers${txtrst}"
		return 0
	else
		echo "!!!!!!!!!!!build fails linux-api-headers pass1 $(date)" >> "$_AXE_LOGS_DIR/toolchain_build_log"
		mkdir -pv "$_AXE_FAIL_BUILD_LOGS_DIR/linux-api-headers/"
		cp -p $_AXE_RAM_BUILD_DIR/linux-api-headers/*.log "$_AXE_FAIL_BUILD_LOGS_DIR/linux-api-headers/"
		echo -e "${_AXE_BLOCK_MODE} End of build linux api headers${txtrst}"
		
	fi

			#Returns
			#0 good build
			#10 failed to build
			
	echo -e "${_AXE_BLOCK_MODE} end of build_linux_api_headers${txtrst}"
	return 10
}

# higher build functions ****(**********************************************************************************************************************************
#***************************************************************************************************************************************************************

function build_toolchain()
{
	echo -e "${_AXE_BLOCK_MODE} Start of build_toolchain ${txtrst}"
	
	
	
	toolchain_tag_check > /dev/null
	if [[ $? -eq 1 ]]; then
		echo -e "  ${_AXE_INFO_MODE} ok about to build the toolchain ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} linux-api-headers -> glibc -> binutils$_AXE_MULTILIB_SUFFIX -> gcc$_AXE_MULTILIB_SUFFIX ->libtool$_AXE_MULTILIB_SUFFIX -> binutils$_AXE_MULTILIB_SUFFIX -> glibc -> gcc$_AXE_MULTILIB_SUFFIX -> libtool$_AXE_MULTILIB_SUFFIX ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} this is a fucking long build so piss off, get a coffe, roll a spliff and check on me in a couple of hours ${txtrst}"
		
		abs
		echo "starting toolchain build $(date)" >> "$_AXE_LOGS_DIR/toolchain_build_log"
		
		build_linux_api_headers "install-export"
		if [[ $? -eq 10 ]]; then
			reset_toolchain
			return 1
		fi
		
		build_glibc "install"
		if [[ $? -eq 10 ]]; then
			reset_toolchain
			return 1
		fi
		
		build_binutils "install"
		if [[ $? -eq 10 ]]; then
			reset_toolchain
			return 1
		fi
		
		build_gcc "install"
		if [[ $? -eq 10 ]]; then
			reset_toolchain
			return 1
		fi
		
		build_libtool "install"
		if [[ $? -eq 10 ]]; then
			reset_toolchain
			return 1
		fi
		
		if [[ "$_AXE_MULTILIB_SUFFIX" ]]; then
			build_libltdl "install"
			if [[ $? -eq 10 ]]; then
				reset_toolchain
				return 1
			fi
		fi
		
		build_binutils "install-export"
		if [[ $? -eq 10 ]]; then
			reset_toolchain
			return 1
		fi
		
		build_glibc "install-export"
		if [[ $? -eq 10 ]]; then
			reset_toolchain
			return 1
		fi
		
		build_axe_pkgbuild "zlib" "--install" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
		if [[ $? -eq 5 || $? -eq 6 ]]; then
			reset_toolchain
			return 1
		fi
		
		build_axe_pkgbuild "file" "--install" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
		if [[ $? -eq 5 || $? -eq 6 ]]; then
			reset_toolchain
			return 1
		fi
		
		build_axe_pkgbuild "gmp" "--install" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
		if [[ $? -eq 5 || $? -eq 6 ]]; then
			reset_toolchain
			return 1
		fi
		
		build_axe_pkgbuild "mpfr" "--install" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
		if [[ $? -eq 5 || $? -eq 6 ]]; then
			reset_toolchain
			return 1
		fi
		
		build_axe_pkgbuild "libmpc" "--install" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
		if [[ $? -eq 5 || $? -eq 6 ]]; then
			reset_toolchain
			return 1
		fi
		
		build_axe_pkgbuild "attr" "--install" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
		if [[ $? -eq 5 || $? -eq 6 ]]; then
			reset_toolchain
			return 1
		fi
		
		build_axe_pkgbuild "acl" "--install" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
		if [[ $? -eq 5 || $? -eq 6 ]]; then
			reset_toolchain
			return 1
		fi
		
		build_axe_pkgbuild "isl" "--install" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
		if [[ $? -eq 5 || $? -eq 6 ]]; then
			reset_toolchain
			return 1
		fi
		
		build_axe_pkgbuild "cloog" "--install" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
		if [[ $? -eq 5 || $? -eq 6 ]]; then
			reset_toolchain
			return 1
		fi
		
		build_axe_pkgbuild "ppl" "--install" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
		if [[ $? -eq 5 || $? -eq 6 ]]; then
			reset_toolchain
			return 1
		fi
		
		build_gcc "install-export"
		if [[ $? -eq 10 ]]; then
			reset_toolchain
			return 1
		fi
		
		build_libtool "install-export"
		if [[ $? -eq 10 ]]; then
			reset_toolchain
			return 1
		fi
		
		if [[ "$_AXE_MULTILIB_SUFFIX" ]]; then
			build_libltdl "install"
			if [[ $? -eq 10 ]]; then
				reset_toolchain
				return 1
			fi
		fi
	
		fix_updates


	else
	
		echo -e "  ${_AXE_INFO_MODE} toolchain already built skipping ${txtrst}"
		return 2
	fi
	
	echo -e "${_AXE_BLOCK_MODE} End of build_toolchain ${txtrst}"
	return 0
}

function build_udev()
{
	echo -e "${_AXE_BLOCK_MODE} Start of build_udev ${txtrst}"

	
	build_axe_pkgbuild "mkinitcpio" "--install" "--nocon" "--force" "$_AXE_OPT_TYPE"
	case $?	in
			5)  return 1 ;;
			6)  return 2 ;;
	esac
	
	build_axe_pkgbuild "dbus-core" "--install" "--con" "--force" "$_AXE_OPT_TYPE"
			case $?	in
			5)  return 1 ;;
			6)  return 2 ;;
	esac
	
	build_axe_pkgbuild "udev-axe" "--install" "--con" "--force" "$_AXE_OPT_TYPE"
			case $?	in
			5)  return 1 ;;
			6)  return 2 ;;
	esac
	
	build_axe_pkgbuild "libgusb" "--install" "--nocon" "--force" "$_AXE_OPT_TYPE"
			case $?	in
			5)  return 1 ;;
			6)  return 2 ;;
	esac
	
	build_axe_pkgbuild "pyudev" "--install" "--nocon" "--force" "$_AXE_OPT_TYPE"
			case $?	in
			5)  return 1 ;;
			6)  return 2 ;;
	esac
	
	build_axe_pkgbuild "libatasmart" "--install" "--nocon" "--force" "$_AXE_OPT_TYPE"
			case $?	in
			5)  return 1 ;;
			6)  return 2 ;;
	esac
	
	build_axe_pkgbuild "lockdev" "--install" "--nocon" "--force" "$_AXE_OPT_TYPE"
			case $?	in
			5)  return 1 ;;
			6)  return 2 ;;
	esac
#arch build fail which may never get fixed		
#		build_axe_pkgbuild "libcec" "--install" "--nocon" "--force" "$_AXE_OPT_TYPE"
		
	build_axe_pkgbuild "syslog-ng" "--install" "--nocon" "--force" "$_AXE_OPT_TYPE"
			case $?	in
			5)  return 1 ;;
			6)  return 2 ;;
	esac
	
	build_axe_pkgbuild "mkinitcpio-busybox" "--install" "--nocon" "--force" "$_AXE_OPT_TYPE"
			case $?	in
			5)  return 1 ;;
			6)  return 2 ;;
	esac
	
	build_axe_pkgbuild "mkinitcpio" "--install" "--nocon" "--force" "$_AXE_OPT_TYPE"
			case $?	in
			5)  return 1 ;;
			6)  return 2 ;;
	esac
	
	build_axe_pkgbuild "dbus-core" "--install" "--nocon" "--force" "$_AXE_OPT_TYPE"
			case $?	in
			5)  return 1 ;;
			6)  return 2 ;;
	esac
	
	build_axe_pkgbuild "lvm2" "--install" "--nocon" "--force" "$_AXE_OPT_TYPE"
			case $?	in
			5)  return 1 ;;
			6)  return 2 ;;
	esac
	
	build_axe_pkgbuild "dmraid" "--install" "--nocon" "--force" "$_AXE_OPT_TYPE"
			case $?	in
			5)  return 1 ;;
			6)  return 2 ;;
	esac
	
	build_axe_pkgbuild "pcmciautils" "--install" "--nocon" "--force" "$_AXE_OPT_TYPE"
			case $?	in
			5)  return 1 ;;
			6)  return 2 ;;
	esac
	
	build_axe_pkgbuild "crda" "--install" "--nocon" "--force" "$_AXE_OPT_TYPE"
			case $?	in
			5)  return 1 ;;
			6)  return 2 ;;
	esac
	
	build_axe_pkgbuild "mtdev" "--install" "--nocon" "--force" "$_AXE_OPT_TYPE"
			case $?	in
			5)  return 1 ;;
			6)  return 2 ;;
	esac
	
	build_axe_pkgbuild "xf86-input-evdev" "--install" "--nocon" "--force" "$_AXE_OPT_TYPE"
			case $?	in
			5)  return 1 ;;
			6)  return 2 ;;
	esac
		
	echo -e "${_AXE_BLOCK_MODE} End of build_udev ${txtrst}"
	return 0
	
}

function build_list()
{
	local VAR="_debug_build_list"
	_debug_build_list=0
	[[ $_debug_build_list -eq 0 ]] && echo -e "${_AXE_BLOCK_MODE} Start of  build_list ${txtrst}"
	[[ $_debug_build_list -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} DEBUG MODE Start of  build_list ${txtrst}"
	[[ $_debug_build_list -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} ARGUMENT-1.. /path/to/xxx.list = ${bldcyn} $1 ${txtrst}" && any_key
	
# first argument
	#list to work on
	#xxxx   /path/to/xxx.list

	echo -e "${_AXE_BLOCK_MODE} Start of build $1  ${txtrst}"
	
	local VAR="_axe_build_overide"
	local VAR="_axe_build_problem"
	local VAR="_axe_install_problem"
	local VAR="_axe_local_return"
	_axe_build_problem=0
	_axe_install_problem=0
	_axe_local_return=0

	echo -e "  ${_AXE_INFO_MODE} ok about to build list $1 ${txtrst}"
	echo -e "  ${_AXE_INFO_MODE} this is a fucking long build so piss off, get a coffe, roll a spliff and check on me in a couple of hours ${txtrst}"

	abs

	
	#clean list
	# delete comments | delete emty lines | delete everything after first space > to file
	sed '/^\#/d' "$1" | grep -v "^$" | sed 's/ .*//' > "$_AXE_DIR/working_on.list"
	
	
	for pkgname in $(cat "$_AXE_DIR/working_on.list"); do
	
		_axe_build_overide=""
	
		_axe_build_overide=$(sed '/^\#/d' "$1" | grep -Fx "$pkgname" | sed "s/$pkgname//")
		[[ $_debug_build_list -eq 1 ]] && echo -e "overide array is $_axe_build_overide" && any_key

		if [[ $_axe_build_overide ]]; then
			echo -e "  ${_AXE_INFO_MODE} building $pkgname in overide mode with the following flag array $_axe_build_overide ${txtrst}"
			[[ $_debug_build_list -eq 1 ]] && any_key
			build_axe_pkgbuild "$pkgname""$_axe_build_overide"
			_axe_local_return=$?
			[[ $_axe_local_return -eq 5 ]] && echo -e "  ${_AXE_FUCKUP_MODE} $1 compile failed check logs ${txtrst}" && $_axe_build_problem=1
			[[ $_axe_local_return -eq 6 ]] && echo -e "  ${_AXE_FUCKUP_MODE} $1 install failed check logs ${txtrst}" && $_axe_install_problem=1
			[[ ($_axe_local_return -eq 5 || $_axe_local_return -eq 6) && $_debug_build_list -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} $1 did not build or install first time round ${txtrst}" && any_key
		else
			build_axe_pkgbuild "$pkgname" "--noinstall" "--nocon" "--noforce" "$_AXE_OPT_TYPE"  "--fail" "--suc" "--notag"
			_axe_local_return=$?
			[[ $_axe_local_return -eq 5 ]] && echo -e "  ${_AXE_FUCKUP_MODE} $1 compile failed check logs ${txtrst}" && $_axe_build_problem=1
			[[ $_axe_local_return -eq 6 ]] && echo -e "  ${_AXE_FUCKUP_MODE} $1 install failed check logs ${txtrst}" && $_axe_install_problem=1
			[[ ($_axe_local_return -eq 5 || $_axe_local_return -eq 6) && $_debug_build_list -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} $1 did not build or install first time round ${txtrst}" && any_key
		fi

		
	done
	
	rm -f $_AXE_DIR/working_on.list

	
	[[ $_axe_build_problem -eq 1 ]] && echo -e "${_AXE_FUCKUP_MODE} End of of build $1 ${txtrst}" && return 1
	[[ $_axe_install_problem -eq 1 ]] && echo -e "${_AXE_FUCKUP_MODE} End of of build $1 ${txtrst}" && return 2

	
	echo -e "${_AXE_BLOCK_MODE} End of of build $1 ${txtrst}"
	return 0

}

function build_whats_left()
{
	local VAR="_debug_build_whats_left"
	_debug_build_whats_left=0
	[[ $_debug_build_whats_left -eq 0 ]] && echo -e "${_AXE_BLOCK_MODE} Start of  build_whats_left ${txtrst}"
	[[ $_debug_build_whats_left -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} DEBUG MODE Start of  build_whats_left ${txtrst}"
	
	
	local VAR="_axe_build_problem"
	local VAR="_axe_install_problem"
	local VAR="_axe_local_return"
	_axe_build_problem=0
	_axe_install_problem=0
	_axe_local_return=0
	
	
	
	
	if [[ $_AXE_WHATS_LEFT_BUILT_YES -eq 0 ]]; then

		#lets look at what we did not cover
		expac "%n %p %a" | grep -v "$_AXE_PACKAGER_NAME" | grep -v "any"  | grep -v "lib32.*" | sed 's/ .*//' > "$_AXE_DIR/whats_left_to_build_after_stage1.list"
		[[ $_debug_build_whats_left -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} examine $_AXE_DIR/whats_left_to_build_after_stage1.list ${txtrst}" && any_key && nano "$_AXE_DIR/whats_left_to_build_after_stage1.list"
		
		diff <(cat $_AXE_DIR/whats_left_to_build_after_stage1.list | sort) <(cat $_AXE_DIR/build_sucess.list | sort) | grep \<|cut -f2 -d' ' > "$_AXE_DIR/whats_left_targets.list"
		
		echo -e "  ${_AXE_INFO_MODE} these are the packages left not build by me at this stage ${txtrst}"
		any_key
		nano "$_AXE_DIR/whats_left_targets.list"
		
		echo -e "  ${_AXE_INFO_MODE} do you want to build any packages on the list ( i will not install them there is no need at this stage, but they will be used in strage 2 ? ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} ${_AXE_Y} if you want to buils some or all of these packages  ${_AXE_ANY_OTHER_KEY} if not, ${txtrst}"
		read -n1 _AXE_TMP_CHAR
		echo -e "\n"
		if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
		
			for pkgname in $(cat "$_AXE_DIR/whats_left_targets.list"); do
			
				echo -e "  ${_AXE_INFO_MODE} ${_AXE_Y} if you want to build   $pkgname   ${_AXE_ANY_OTHER_KEY} if not, ${txtrst}"
				read -n1 _AXE_TMP_CHAR
				echo -e "\n"
				if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
					build_axe_pkgbuild "$pkgname" "--noinstall" "--con" "--noforce" "$_AXE_OPT_TYPE" "--fail" "--suc" "--notag"
					_axe_local_return=$?
					[[ $_axe_local_return -eq 5 ]] && echo -e "  ${_AXE_FUCKUP_MODE} $1 compile failed check logs ${txtrst}" && $_axe_build_problem=1
					[[ $_axe_local_return -eq 6 ]] && echo -e "  ${_AXE_FUCKUP_MODE} $1 install failed check logs ${txtrst}" && $_axe_install_problem=1
					[[ ($_axe_local_return -eq 5 || $_axe_local_return -eq 6) && $_debug_build_whats_left -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} $1 did not build or install first time round ${txtrst}" && any_key
				fi
					
			done
		
		fi
		
		
		
	fi
	
	[[ $_axe_build_problem -eq 1 ]] && echo -e "${_AXE_FUCKUP_MODE} End of of build $1 ${txtrst}" && return 1
	[[ $_axe_install_problem -eq 1 ]] && echo -e "${_AXE_FUCKUP_MODE} End of of build $1 ${txtrst}" && return 2
	
	_AXE_WHATS_LEFT_BUILT_YES=1
	save_settings
	
	echo -e "${_AXE_BLOCK_MODE} End of  build_whats_left ${txtrst}"
}

# main menu functions *******************************************************************************************************************************************
#***************************************************************************************************************************************************************

function get_pkgbuild_git()
{
	local VAR="_debug_get_pkgbuild_git"
	_debug_get_pkgbuild_git=0
	[[ $_debug_get_pkgbuild_git -eq 0 ]] && echo -e "${_AXE_BLOCK_MODE} Start of get_pkgbuild_git ${txtrst}"
	[[ $_debug_get_pkgbuild_git -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} DEBUG MODE Start of get_pkgbuild_git ${txtrst}"
	[[ $ -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} ARGUMENT-1.. path to copy pkgbuilds from = ${bldcyn} $1 ${txtrst} \n ARGUMENT-2..  path to copy pkgbuilds to = ${bldcyn} $2 ${txtrst} \n ARGUMENT-3..  git url = ${bldcyn} $3 ${txtrst}" && any_key
	

	#argument 1 path to copy pkgbuilds from
		# xxx $_AXE_GIT_DIR/xxx
	#argument 2 path to copy pkgbuilds to
		# xxx /path/to/copy/to
	#argument 3 git url
		# xxx git : giturl

	
	if [[ ! -d $1 ]]; then
		
		echo -e "  ${_AXE_INFO_MODE} fetching git please wait this is a long download${txtrst}"
		git clone "$3" "$_AXE_GIT_DIR"
		if [[ $? -eq 0 ]]; then
		
			[[ $(ls -A $2) ]] && rm -fr $2/*
			if [[ ! $? -eq 0 ]]; then
				echo -e "  ${_AXE_FUCKUP_MODE} failed to remove existing pkgbuilds from $2 ${txtrst}"
				return 2
			fi
			cp -fr $1/* "$2"
			if [[ ! $? -eq 0 ]]; then
				[[ $_debug_get_pkgbuild_git -eq 1 ]] && dir $1 && echo -e "  ${_AXE_DEBUG_MODE} contents of $1 ${txtrst}" && any_key
				[[ $_debug_get_pkgbuild_git -eq 1 ]] && dir $2 && echo -e "  ${_AXE_DEBUG_MODE} contents of $2 ${txtrst}" && any_key
				echo -e "  ${_AXE_FUCKUP_MODE} failed to copy pkgbuilds from $1 to $2 ${txtrst}"
				return 3
			fi

				
		else
			echo -e "  ${_AXE_FUCKUP_MODE} git has failed to download please check the code,your internet connection, or try again ${txtrst}"
			echo -e "${_AXE_BLOCK_MODE} End of get_pkgbuild_git${txtrst}"
			[[ $_debug_get_pkgbuild_git -eq 1 ]] && any_key
			return 1
		fi

	
	else
		echo -e "  ${_AXE_INFO_MODE} git already downloaded you need to refresh instead ${txtrst}"
		echo -e "${_AXE_BLOCK_MODE} End of get_pkgbuild_git${txtrst}"
		[[ $_debug_get_pkgbuild_git -eq 1 ]] && any_key
		return 4
	fi
	
 	echo -e "${_AXE_BLOCK_MODE} End of get_pkgbuild_git${txtrst}"
	return 0
}

function refresh_pkgbuild_git()
{
	local VAR="_debug_refresh_pkgbuild_git"
	_debug_refresh_pkgbuild_git=0
	[[ $_debug_refresh_pkgbuild_git -eq 0 ]] && echo -e "${_AXE_BLOCK_MODE} Start of refresh_pkgbuild_git ${txtrst}"
	[[ $_debug_refresh_pkgbuild_git -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} DEBUG MODE Start of refresh_pkgbuild_git ${txtrst}"
	[[ $_debug_refresh_pkgbuild_git -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} ARGUMENT-1.. path to copy pkgbuilds from = ${bldcyn} $1 ${txtrst} \n ARGUMENT-2..  path to copy pkgbuilds to = ${bldcyn} $2 ${txtrst}" && any_key
	

	#argument 1 path to copy pkgbuilds from
		# xxx /path/frm/gitdir
	#argument 2 path to copy pkgbuilds to
		# xxx /path/to/copy/to
	
	if [[ -d $1 ]]; then
		cd "$1"
		echo -e "  ${_AXE_INFO_MODE} updating git please wait ${txtrst}"
		git pull origin
		if [[ $? -eq 0 ]]; then
		
			[[ $(ls -A $2) ]] && rm -fr $2/*
			if [[ ! $? -eq 0 ]]; then
				echo -e "  ${_AXE_FUCKUP_MODE} failed to remove existing pkgbuilds from $2 ${txtrst}"
				return 2
			fi
			cp -fr $1/* "$2"
			if [[ ! $? -eq 0 ]]; then
				[[ $_debug_refresh_pkgbuild_git -eq 1 ]] && dir $1 && echo -e "  ${_AXE_DEBUG_MODE} contents of $1 ${txtrst}" && any_key
				[[ $_debug_refresh_pkgbuild_git -eq 1 ]] && dir $2 && echo -e "  ${_AXE_DEBUG_MODE} contents of $2 ${txtrst}" && any_key
				echo -e "  ${_AXE_FUCKUP_MODE} failed to copy pkgbuilds from $1 to $2 ${txtrst}"
				return 3
			fi
			

				
		else
			echo -e "  ${_AXE_FUCKUP_MODE} git has failed to update please check the code, your internet connection or try again ${txtrst}"
			echo -e "${_AXE_BLOCK_MODE} End of refresh_pkgbuild_git ${txtrst}"
			[[ $_debug_refresh_pkgbuild_git -eq 1 ]] && any_key
			return 1
		fi

	else
		echo -e "  ${_AXE_INFO_MODE} git has not yet been downloaded please download before updating ${txtrst}"
		echo -e "${_AXE_BLOCK_MODE} End of refresh_pkgbuild_git ${txtrst}"
		[[ $_debug_refresh_pkgbuild_git -eq 1 ]] && any_key
		return 4
	fi
	
 	echo -e "${_AXE_BLOCK_MODE} End of refresh_pkgbuild_git ${txtrst}"
	return 0
}

function fill_pkgbuild_dir_from_usb()
{
	echo -e "${_AXE_BLOCK_MODE} Start of fill_pkgbuild_dir_from_usb ${txtrst}"
	
	#argument 1 path to copy pkgbuilds to
		# xxx /path/to/copy/to
	
	echo -e "  ${_AXE_INFO_MODE} about to copy files from your usb stick, i expect to find the files in ${txtrst}"
	echo -e "  ${_AXE_INFO_MODE} $_AXE_USB_STICK_MNT/pkgbuilds/<pkgbuild directories> for pkgbuild files and ${txtrst}"
	echo -e "  ${_AXE_INFO_MODE} if the paths are different on your machine you need to ${_AXE_CTRLC} and either modify your machine or just modify my code ${txtrst}"
	echo -e "  ${_AXE_INFO_MODE} my path is in the variables right at the top of my code listing , you cant miss it! ${txtrst}"
	any_key
	
	
	if [[ ! -d "$_AXE_USB_STICK_MNT" ]]; then
		echo -e "  ${_AXE_INFO_MODE} creating usb mount dir $_AXE_USB_STICK_MNT ${txtrst}"
		mkdir "$_AXE_USB_STICK_MNT"
	fi
	
	echo -e "  ${_AXE_INFO_MODE} mounting $_AXE_USB_STICK_DEVICE ${txtrst}"
	mount -t vfat "$_AXE_USB_STICK_DEVICE" "$_AXE_USB_STICK_MNT"
	if [[ $? -eq 0 ]]; then
		echo -e "  ${_AXE_INFO_MODE} $_AXE_USB_STICK_DEVICE sucsessfully mounted to $_AXE_USB_STICK_MNT ${txtrst}"
		
		if [[ -d "$_AXE_USB_STICK_MNT/$_AXE_USB_DEV_PKGBUILD_DIR" ]]; then
			echo -e "  ${_AXE_INFO_MODE} copying over DEV PKGBUILDS from $_AXE_USB_STICK_MNT/$_AXE_USB_DEV_PKGBUILD_DIR to $1 ${txtrst}"
			rm -fr $1/*
			cp -pfr $_AXE_USB_STICK_MNT/$_AXE_USB_DEV_PKGBUILD_DIR/* "$1"
			if [[ $? -eq 0 ]]; then
				wait
				echo -e "  ${_AXE_INFO_MODE} PKGBUILD dirs sucessfully copied ${txtrst}"
				_AXE_PKGBUILD_DIR_FILLED_YES=1
				save_settings
			else
				echo -e "  ${_AXE_FUCKUP_MODE} something is wrong did not copy anything check sources in $_AXE_USB_STICK_MNT/$_AXE_USB_DEV_PKGBUILD_DIR ${txtrst}"
			fi
		else
			echo -e "  ${_AXE_FUCKUP_MODE} $_AXE_USB_STICK_MNT/$_AXE_USB_DEV_PKGBUILD_DIR does not exist aborting ${txtrst}"
		fi
		echo -e "  ${_AXE_INFO_MODE} UNmounting $_AXE_USB_STICK_DEVICE ${txtrst}"
		umount  "$_AXE_USB_STICK_MNT"
		if [[ $? -eq 0 ]]; then
			echo -e "  ${_AXE_INFO_MODE} $_AXE_USB_STICK_DEVICE sucsessfully UNmounted ${txtrst}"
		else
			echo -e "  ${_AXE_FUCKUP_MODE} failed in UNmounting $_AXE_USB_STICK_DEVICE which will still be active ${txtrst}"
		fi
		
	else
		echo -e "  ${_AXE_FUCKUP_MODE} failed to mount$_AXE_USB_STICK_DEVICE to $_AXE_USB_STICK_MNT ${txtrst}"
	fi

	echo -e "${_AXE_BLOCK_MODE} End of fill_pkgbuild_dir_from_usb ${txtrst}"
	return 0
}

function maintain_pkgbuild_dir()
{
	local VAR="_debug_maintain_pkgbuild_dir"
	_debug_maintain_pkgbuild_dir=1
	[[ $_debug_maintain_pkgbuild_dir -eq 0 ]] && echo -e "${_AXE_BLOCK_MODE} Start of maintain_pkgbuild_dir ${txtrst}"
	[[ $_debug_maintain_pkgbuild_dir -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} DEBUG MODE Start of maintain_pkgbuild_dir ${txtrst}"
	[[ $_debug_maintain_pkgbuild_dir -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} ARGUMENT-1.. is path to folder to check = ${bldcyn} $1 ${txtrst} \n ARGUMENT-2..  type of opperation = ${bldcyn} $2 ${txtrst}" && any_key

	#first argument is path to folder to check
	#xxx /path/to/folder
	#second argument is type of opperation
	# --ver ... version check
	# --update .. rebuild new version
	
	#reset list so we dont get confused over runs
	echo "" > "$_AXE_DIR/maintain_problems.list"

	local VAR="_axe_find_problem"
	local VAR="_axe_version_problem"
	local VAR="_axe_rebuild_problem"
	local VAR="_axe_abs_ver"
	local VAR="_axe_abs_rel"
	local VAR="_axe_aur_ver"
	local VAR="_axe_aur_rel"
	local VAR="_axe_dir_ver"
	local VAR="_axe_older"
	local VAR="_axe_abs_location"
	local VAR="_axe_vercmp_return"
	local VAR="_axe_tag_rel"
	
	_axe_version_problem=0
	_axe_find_problem=0
	_axe_rebuild_problem=0
	_axe_abs_ver=""
	_axe_aur_ver=""
	_axe_dir_ver=""
	_axe_older=0
	_axe_abs_location=" "
	_axe_vercmp_return=0
	_axe_tag_rel=""
	
	abs
	
	cd $1
	
	find * -prune -type d > "$_AXE_DIR/maintain_pkgbuild_dir_working.list"
	
	cd /root/
	
	for pkgname in $(cat "$_AXE_DIR/maintain_pkgbuild_dir_working.list"); do
	
		[[ $_debug_maintain_pkgbuild_dir -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} package name working on $pkgname ${txtrst}"
		
		_axe_abs_location=$(find "/var/abs" -type d -name "$pkgname")
	
		[[ $_debug_maintain_pkgbuild_dir -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} abs location for  $pkgname is $_axe_abs_location ${txtrst}"
	
		if [[ $_axe_abs_location ]]; then
		
			echo -e "  ${_AXE_INFO_MODE}  $pkgname found in ABS ${txtrst}"

			_axe_abs_ver=""
			_axe_abs_rel=""
			_axe_dir_ver=""
			_axe_dir_rel=""
			

			_axe_abs_ver=$(cat "$_axe_abs_location/PKGBUILD" | grep -m 1 'pkgver=' | sed 's/pkgver=//')
			_axe_abs_rel=$(cat "$_axe_abs_location/PKGBUILD" | grep -m 1 'pkgrel=' | sed 's/pkgrel=//')
			_axe_dir_ver=$(cat "$1/$pkgname/PKGBUILD" | grep -m 1 'pkgver=' | sed 's/pkgver=//')
			_axe_dir_rel=$(cat "$1/$pkgname/PKGBUILD" | grep -m 1 'pkgrel=' | sed 's/pkgrel=//' | sed 's/99.//' | sed 's/axe//')
			
			#pkgrel=99.1axe
			
			if [[ $_axe_abs_ver && $_axe_dir_ver ]]; then
			
				echo -e "  ${_AXE_INFO_MODE}  $pkgname version from ABS is ${bldcyn} $_axe_abs_ver-$_axe_abs_rel ${txtrst}" 
				echo -e "  ${_AXE_INFO_MODE}  $pkgname version from $1 is ${bldcyn} $_axe_dir_ver-$_axe_dir_rel ${txtrst}" 
				
				_axe_vercmp_return=$(vercmp "$_axe_abs_ver-$_axe_abs_rel" "$_axe_dir_ver-$_axe_dir_rel")
				
				[[ $_debug_maintain_pkgbuild_dir -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} vercmp return is $_axe_vercmp_return ${txtrst}"
				
				[[ $_axe_vercmp_return -eq 0 ]] && echo -e "  ${_AXE_INFO_MODE}  versions are the same ${bldcyn} no action taken ${txtrst}" 
				[[ $_axe_vercmp_return -lt 0 ]] && echo -e "  ${_AXE_INFO_MODE}  $1 version is greater than ABS version ${bldcyn} no action taken ${txtrst}" 
				if [[ $_axe_vercmp_return -gt 0 && $2 == "--ver" ]]; then
					echo -e "  ${_AXE_FUCKUP_MODE}  $pkgname is out of date ${txtrst}" 
					echo "$pkgname from $1  is older than the ABS ABS VER=$_axe_abs_ver-$_axe_abs_rel DEV VER=$_axe_dir_ver-$_axe_dir_rel" >> "$_AXE_DIR/maintain_problems.list"
					find /var/abs -type d -name "$pkgname" -exec cp -rpf {} "$_AXE_DEV_UPDATE_EXPORT_DIR" \; 2> /dev/null
					if [[ -d "$_AXE_DEV_UPDATE_EXPORT_DIR/$pkgname" ]]; then 
						stamp_pkgbuild "$_AXE_DEV_UPDATE_EXPORT_DIR/$pkgname"
						if [[ ! $? -eq 0 ]]; then 
							echo "$pkgname from $1  failed to accept axe pkgrel tag" >> "$_AXE_DIR/maintain_problems.list"
							echo -e "  ${_AXE_FUCKUP_MODE} refused to accept axe pkgrel tag please check why  ${txtrst}" && any_key
						fi
					else
						echo -e "  ${_AXE_FUCKUP_MODE} failed to find and copy  $pkgname from the ABS ( which by the way is impossible ${txtrst}"
						any_key
					fi
					_axe_version_problem=1
				fi	
				if [[ $_axe_vercmp_return -gt 0 && $2 == "--update" ]]; then
					rm -f "$1/$pkgname"
					find /var/abs -type d -name "$pkgname" -exec cp -rpf {} "$1" \; 2> /dev/null
					if [[ -d "$1/$pkgname" ]]; then
						stamp_pkgbuild "$1/$pkgname"
						if [[ $? -eq 0 ]]; then 
							build_axe_pkgbuild "$pkgname" "--noinstall" "--nocon" "--force" "$_AXE_OPT_TYPE" "--nofail" "--nosuc" "--tag" "$1"
							if [[ $? -eq 5 || $? -eq 6 ]]; then
								echo -e "  ${_AXE_FUCKUP_MODE}  $pkgname failed to rebuild  check build log ${txtrst}"
								echo "$pkgname from $1  failed rebuild check build log" >> "$_AXE_DIR/maintain_problems.list"
								_axe_rebuild_problem=1
								[[ $_debug_maintain_pkgbuild_dir -eq 1 ]] && any_key
							fi
						else
							echo "$pkgname from $1  failed to accept axe pkgrel tag" >> "$_AXE_DIR/maintain_problems.list"
							echo -e "  ${_AXE_FUCKUP_MODE}  $pkgname refused  to accept axe pkgtag aborting rebuild ${txtrst}"
							[[ $_debug_maintain_pkgbuild_dir -eq 1 ]] && any_key
						fi
					else
						echo -e "  ${_AXE_FUCKUP_MODE} failed to find and copy  $pkgname from the ABS to $1 ( which by the way is impossible) ${txtrst}"
						any_key
					fi	
				fi
				
			else
				[[ ! $_axe_abs_ver ]] && echo -e "  ${_AXE_FUCKUP_MODE}  canot obtain a version for $pkgname from $_axe_abs_location/PKGBUILD ${txtrst}"  && echo "could not obtain a version from $pkgname from ABS " >> "$_AXE_DIR/maintain_problems.list"
				[[ ! $_axe_dir_ver ]] && echo -e "  ${_AXE_FUCKUP_MODE}  canot obtain a version for $pkgname from $1/$pkgname/PKGBUILD ${txtrst}" && echo "could not obtain a version from $pkgname from $1 " >> "$_AXE_DIR/maintain_problems.list"
				any_key
			fi
			
			
			
		else
			[[ $_debug_maintain_pkgbuild_dir -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} package name working on is $pkgname looking for it in the AUR ${txtrst}"
			echo -e "  ${_AXE_INFO_MODE}  $pkgname not found in the ABS looking for it from AUR ${txtrst}" 
			cd "$_AXE_RAM_BUILD_DIR"
			yaourt -G --noconfirm "$pkgname"
			cd /root/
			if [[ -d "$_AXE_RAM_BUILD_DIR/$pkgname" ]]; then
				
				echo -e "  ${_AXE_INFO_MODE}  $pkgname found in AUR ${txtrst}" 
				
				_axe_aur_ver=""
				_axe_aur_rel=""
				_axe_dir_ver=""
				_axe_dir_rel=""
				
				_axe_dir_ver=$(cat "$1/$pkgname/PKGBUILD" | grep -m 1 'pkgver=' | sed 's/pkgver=//')
				_axe_dir_rel=$(cat "$1/$pkgname/PKGBUILD" | grep -m 1 'pkgrel=' | sed 's/pkgrel=//' | sed 's/99.//' | sed 's/axe//')
				_axe_aur_ver=$(cat "$_AXE_RAM_BUILD_DIR/$pkgname/PKGBUILD" | grep -m 1 'pkgver=' | sed 's/pkgver=//')
				_axe_aur_rel=$(cat "$_AXE_RAM_BUILD_DIR/$pkgname/PKGBUILD" | grep -m 1 'pkgrel=' | sed 's/pkgrel=//')
				
				
				if [[ $_axe_aur_ver && $_axe_dir_ver ]]; then
				
					echo -e "  ${_AXE_INFO_MODE}  $pkgname version from $1 is ${bldcyn} $_axe_dir_ver-$_axe_dir_rel ${txtrst}" 
					echo -e "  ${_AXE_INFO_MODE}  $pkgname version from AUR is ${bldcyn} $_axe_aur_ver-$_axe_aur_rel ${txtrst}" 
					
					_axe_vercmp_return=$(vercmp "$_axe_aur_ver-$_axe_aur_rel" "$_axe_dir_ver-$_axe_dir_rel")
					
					[[ $_axe_vercmp_return -eq 0 ]] && echo -e "  ${_AXE_INFO_MODE}  versions are the same ${bldcyn} no action taken ${txtrst}" 
					[[ $_axe_vercmp_return -lt 0 ]] && echo -e "  ${_AXE_INFO_MODE}  $1 version is greater than AUR version ${bldcyn} no action taken ${txtrst}" 
					if [[ $_axe_vercmp_return -gt 0 && $2 == "--ver" ]]; then
						echo -e "  ${_AXE_FUCKUP_MODE}  $pkgname is out of date ${txtrst}" 
						echo "$pkgname from $1  is older than the AUR AUR VER=$_axe_aur_ver-$_axe_aur_rel DEV VER=$_axe_dir_ver-$_axe_dir_rel" >> "$_AXE_DIR/maintain_problems.list"
						#apply axe tag 
						stamp_pkgbuild "$_AXE_RAM_BUILD_DIR/$pkgname"
						if [[ $? -eq 0 ]]; then 
							cp -fpr "$_AXE_RAM_BUILD_DIR/$pkgname" "$_AXE_DEV_UPDATE_EXPORT_DIR"
							if [[ $? -eq 0 ]]; then 
								echo -e "  ${_AXE_INFO_MODE}  $pkgname tagged and exported to $_AXE_DEV_UPDATE_EXPORT_DIR ${txtrst}"
								rm -f "$_AXE_RAM_BUILD_DIR/$pkgname"
							else
								echo -e "  ${_AXE_FUCKUP_MODE}  $pkgname failed to move to $_AXE_DEV_UPDATE_EXPORT_DIR please check why ! ${txtrst}" && any_key
								rm -f "$_AXE_RAM_BUILD_DIR/$pkgname"
							fi
						else
							echo "$pkgname from $_AXE_RAM_BUILD_DIR/$pkgname failed to accept axe pkgrel tag" >> "$_AXE_DIR/maintain_problems.list"
							echo -e "  ${_AXE_FUCKUP_MODE}  $pkgname from $_AXE_RAM_BUILD_DIR/$pkgname failed to accept axe pkgrel tag please check why ! ${txtrst}" && any_key
						fi
						_axe_version_problem=1
					fi
					if [[ $_axe_vercmp_return -gt 0 && $2 == "--update" ]]; then
						stamp_pkgbuild "$_AXE_RAM_BUILD_DIR/$pkgname"
						if [[ $? -eq 0 ]]; then
							cp -fpr "$_AXE_RAM_BUILD_DIR/$pkgname" "$1/$pkgname"
							build_axe_pkgbuild "$pkgname" "--noinstall" "--nocon" "--noforce" "$_AXE_OPT_TYPE" "--nofail" "--nosuc" "--tag" "$1"
							if [[ $? -eq 5 || $? -eq 6 ]]; then
								echo -e "  ${_AXE_FUCKUP_MODE}  $pkgname failed to rebuild  check build log ${txtrst}"
								echo "$pkgname from AUR  failed rebuild check build log" >> "$_AXE_DIR/maintain_problems.list"
								_axe_rebuild_problem=1
								[[ $_debug_maintain_pkgbuild_dir -eq 1 ]] && any_key
							else
								rm -f "$_AXE_RAM_BUILD_DIR/$pkgname"
							fi
						else
							echo "$pkgname from $_AXE_RAM_BUILD_DIR/$pkgname failed to accept axe pkgrel tag" >> "$_AXE_DIR/maintain_problems.list"
							echo -e "  ${_AXE_FUCKUP_MODE}  $pkgname from $_AXE_RAM_BUILD_DIR/$pkgname failed to accept axe pkgrel tag please check why ! ${txtrst}"
						fi
					fi
					
				else
					[[ ! $_axe_aur_ver ]] && echo -e "  ${_AXE_FUCKUP_MODE}  canot obtain a version for $pkgname from AUR pkgbuild version is $_axe_aur_ver ${txtrst}" && echo "could not obtain a version for $pkgname from AUR pkgbuild " >> "$_AXE_DIR/maintain_problems.list"
					[[ ! $_axe_dir_ver ]] && echo -e "  ${_AXE_FUCKUP_MODE}  canot obtain a version for $pkgname from $1/$pkgname/PKGBUILD version is $_axe_dir_ver ${txtrst}"&& echo "could not obtain a version for $pkgname from $1/$pkgname/PKGBUILD " >> "$_AXE_DIR/maintain_problems.list"
					any_key
				fi
				
			else
			
				echo -e "  ${_AXE_FUCKUP_MODE}  $pkgname does not exist in AUR assuming its an AXE native package ${txtrst}" 
				echo "$pkgname was not found in the ABS to make a version check, ignore this if  axe only or AUR package" >> "$_AXE_DIR/maintain_problems.list"
				_axe_find_problem=1
			fi
			
		
		
		
		fi
	done
	
	
	if [[ "$_axe_rebuild_problem" -eq 1 || "$_axe_version_problem" -eq 1 || "$_axe_find_problem" -eq 1 ]]; then
		echo -e "${_AXE_BLOCK_MODE} End of maintain_pkgbuild_dir ${txtrst}"
		return 1
		echo -e "${_AXE_BLOCK_MODE} End of maintain_pkgbuild_dir ${txtrst}"
	fi
		

	echo -e "${_AXE_BLOCK_MODE} End of maintain_pkgbuild_dir ${txtrst}"
	return 0
}

function fetch_sources()
{
	local VAR="_debug_fetch_sources"
	_debug_fetch_sources=0
	[[ $_debug_fetch_sources -eq 0 ]] && echo -e "${_AXE_BLOCK_MODE} Start of fetch_sources ${txtrst}"
	[[ $_debug_fetch_sources -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} DEBUG MODE Start of fetch_sources ${txtrst}"
	[[ $_debug_fetch_sources -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} ARGUMENT-1.. path to destination dir = ${bldcyn} $1 ${txtrst} \n ARGUMENT-2..  path to list to use including listname = ${bldcyn} $2 ${txtrst}" && any_key
	
	#argument 1 path to destination dir
		# xxx /path/to/destination/dir
	#argument  path to list to use including listname
		# xxx /path/to/list.list
	
	local VAR="_axe_nmcap_outout"
	local VAR="_axe_fetch_problem"
	local VAR="_axe_tag_problem"
	local VAR="_axe_makepkg_problem"
	local VAR="_axe_extract_problem"
	local VAR="_axe_copy_problem"
	local VAR="_axe_pkgbuild_return"
	local VAR="_axe_makepkg_return"
	
	
	_axe_makepkg_return=0
	_axe_tag_problem=0
	_axe_copy_problem=0
	_axe_fetch_problem=0
	_axe_extract_problem=0
	_axe_makepkg_problem=0
	_axe_nmcap_outout=""
	_axe_pkgbuild_return=0
	
	#reset list so we dont get confused over runs
	echo "" > "$_AXE_DIR/src_fetch_errors.list"

	for pkgname in $(cat "$2"); do
		#checkif package already feched and decompressed 
		if [[ ! -d "$1"/"$pkgname" ]]; then
	
			copy_pkgbuild  "$pkgname" "$_AXE_RAM_BUILD_DIR" "$_AXE_INPUT_PKGBUILD_DIR"
			_axe_pkgbuild_return=$?
			if [[ ! $_axe_pkgbuild_return -eq 6 ]]; then
			
				#apply the axe rel only to non maintained packages
				if [[ $_axe_pkgbuild_return -eq 4 || $_axe_pkgbuild_return -eq 5 ]]; then
					stamp_pkgbuild "$_AXE_RAM_BUILD_DIR/$pkgname"
					if [[ $? -eq 0 ]]; then
						echo -e "  ${_AXE_INFO_MODE}checking $pkgname PKGBUILD in $_AXE_RAM_BUILD_DIR/$pkgname ${txtrst}"
						cd "$_AXE_RAM_BUILD_DIR/$pkgname"
						_axe_nmcap_outout=$(namcap PKGBUILD)
						if [[ "$_axe_nmcap_outout" ]]; then
							echo -e "$_axe_nmcap_outout"
							echo -e "  ${_AXE_FUCKUP_MODE}nmcap is saying something about $pkgname please check the output ${txtrst}"
							echo "$pkgname generated the following warning $_axe_nmcap_outout" >> "$_AXE_DIR/src_fetch_errors.list"
							[[ $_debug_fetch_sources -eq 1 ]] && any_key
						fi
					else	
						echo -e "  ${_AXE_FUCKUP_MODE}  tag application problem !!!!!!! am logging it !! ${txtrst}"
						echo "$pkgname did not accept the axe modifications" >> "$_AXE_DIR/src_fetch_errors.list"
						any_key
						_axe_tag_problem=1
					fi
				else

					cd "$_AXE_RAM_BUILD_DIR/$pkgname"
					_axe_nmcap_outout=$(namcap PKGBUILD)
					if [[ "$_axe_nmcap_outout" ]]; then
						echo -e "$_axe_nmcap_outout"
						echo -e "  ${_AXE_FUCKUP_MODE}nmcap is saying something about $pkgname please check the output ${txtrst}"
						echo "$pkgname generated the following warning $_axe_nmcap_outout" >> "$_AXE_DIR/src_fetch_errors.list"
						[[ $_debug_fetch_sources -eq 1 ]] && any_key
					fi
				fi
	
				cd "$_AXE_RAM_BUILD_DIR/$pkgname"
				
				if [[ ! $_axe_pkgbuild_return -eq 5 ]]; then
					makepkg --asroot --allsource --noconfirm
					_axe_makepkg_return=$?
				else
					makepkg --asroot --allsource --noconfirm -s
					_axe_makepkg_return=$?
				fi
				
				
				if [[ $_axe_makepkg_return -eq 0 ]]; then
					cp -pf  $_AXE_RAM_BUILD_DIR/$pkgname/*.src.tar.gz "$1"
					if [[ ! $? -eq 0 ]]; then
						_axe_copy_problem=1
						echo "$pkgname did not copy to $1 " >> "$_AXE_DIR/src_fetch_errors.list"
					fi
					cp -pf  $_AXE_RAM_BUILD_DIR/$pkgname/*.src.tar.gz "$_AXE_SRC_EXPORT_DIR"
					if [[ ! $? -eq 0 ]]; then 
						_axe_copy_problem=1 
						echo "$pkgname did not copy to $_AXE_SRC_EXPORT_DIR " >> "$_AXE_DIR/src_fetch_errors.list"
					fi
					cd "$1"
					for filename in *.src.tar.gz 
						do
							tar -xzf "$filename"
							if [[ ! $? -eq 0 ]]; then
								echo -e "  ${_AXE_FUCKUP_MODE}  wow extraction problem !!!!!!! am logging it !! ${txtrst}"
								echo "$pkgname did not extract propperly" >> "$_AXE_DIR/src_fetch_errors.list"		
								[[ $_debug_fetch_sources -eq 1 ]] && any_key
								_axe_extract_problem=1
							fi
						done
					rm -f *.src.tar.gz
					cd /root/
					rm -fr "$_AXE_RAM_BUILD_DIR/$pkgname"
				else
					cd /root/
					rm -fr "$_AXE_RAM_BUILD_DIR/$pkgname"
					echo "$pkgname validity or download problem" >> "$_AXE_DIR/src-fail.list"
					_axe_makepkg_problem=1
				fi
				
			else
				echo -e "  ${_AXE_FUCKUP_MODE}  package not found  ${txtrst}"
				_axe_fetch_problem=1
			fi			
			
		else
			echo -e "  ${_AXE_INFO_MODE} package already collected skipping ${txtrst}"
		fi

		
	done	
		

	if [[  $_axe_fetch_problem -eq 1 ]]; then
		return 1
	fi
	
	if [[  $_axe_tag_problem -eq 1 ]]; then
		return 4
	fi

	if [[  $_axe_makepkg_problem -eq 1 ]]; then
		return 2
	fi
	
	if [[  $_axe_extract_problem -eq 1 ]]; then
		return 3
	fi
		
	echo -e "${_AXE_BLOCK_MODE} End of fetch_sources ${txtrst}"
	return 0
}

function load_toolchain()
{
	echo -e "${_AXE_BLOCK_MODE} Start of load_toolchain ${txtrst}"
	
	
	toolchain_tag_check > /dev/null
	if [[ $? -eq 0 ]]; then
		echo -e "  ${_AXE_INFO_MODE} toolchain already has the axe packeger tag skipping ${txtrst}" 
		return 1
	fi
	
	echo -e "  ${_AXE_INFO_MODE} ${_AXE_U} to use usb stick as source ${txtrst}"
	[[ $_AXE_GIT_FETCHED_YES -eq 1 ]] && echo -e "  ${_AXE_INFO_MODE} ${_AXE_G} to use git as source ${txtrst}"
	[[ $_AXE_GIT_FETCHED_YES -eq 0 ]] && echo -e "  ${_AXE_INFO_MODE} you need to download git before you can load your init from git ${txtrst}"
	echo -e "  ${_AXE_INFO_MODE} ${_AXE_ANY_OTHER_KEY} to quit back to the previous menu ${txtrst}"
	read -n1 _AXE_TMP_CHAR
	echo -e "\n"
	[[ "$_AXE_TMP_CHAR" == "g" && $_AXE_GIT_FETCHED_YES -eq 0 ]] && echo -e "  ${_AXE_INFO_MODE} you need to fetch git before you can load your init from git ${txtrst}" && return 1
	
	if [[ "$_AXE_TMP_CHAR" == "g" && $_AXE_GIT_FETCHED_YES -eq 1 ]]; then
	
		cd "$_AXE_GIT_BIN_TOOLCHAIN_DIR"
		pacman -U  *.pkg.tar.xz
		if [[ $? -eq 0 ]]; then
			cd /root/
			toolchain_tag_check
			if [[ $? -eq 0 ]]; then
				echo -e "  ${_AXE_INFO_MODE} toolchain sucsessfully loaded ${txtrst}"
				return 0
			fi
		else
			echo -e "  ${_AXE_FUCKUP_MODE} something is wrong pacman did not install toolchain packages ${txtrst}"
			return 2
		fi
	
	
	fi
	
	if [[ "$_AXE_TMP_CHAR" == "u" ]]; then
	
		echo -e "  ${_AXE_INFO_MODE} about to copy files from your usb stick, i expect to find the files in ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} $_AXE_USB_STICK_MNT/$_AXE_USB_I7_TOOLCHAIN_BIN_DIR/<toolchain binaries> for optimised toolchain binary files and ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} if the paths are different on your machine you need to ${_AXE_CTRLC} and either modify your machine or just modify my code ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} my path is in the variables right at the top of my code listing , you cant miss it! ${txtrst}"
		any_key
		
		if [[ ! -d "$_AXE_USB_STICK_MNT" ]]; then
			echo -e "  ${_AXE_INFO_MODE} creating usb mount dir $_AXE_USB_STICK_MNT ${txtrst}"
			mkdir "$_AXE_USB_STICK_MNT"
		fi
		
		echo -e "  ${_AXE_INFO_MODE} mounting $_AXE_USB_STICK_DEVICE ${txtrst}"
		mount -t vfat "$_AXE_USB_STICK_DEVICE" "$_AXE_USB_STICK_MNT"
		if [[ $? -eq 0 ]]; then
			echo -e "  ${_AXE_INFO_MODE} $_AXE_USB_STICK_DEVICE sucsessfully mounted to $_AXE_USB_STICK_MNT ${txtrst}"
			
			if [[ -d "$_AXE_USB_STICK_MNT/$_AXE_USB_I7_TOOLCHAIN_BIN_DIR" ]]; then
				echo -e "  ${_AXE_INFO_MODE} copying over toolchain from $_AXE_USB_STICK_MNT/$_AXE_USB_I7_TOOLCHAIN_BIN_DIR to $_AXE_RAM_BUILD_DIR ${txtrst}"
				cp -pfr $_AXE_USB_STICK_MNT/$_AXE_USB_I7_TOOLCHAIN_BIN_DIR/* "$_AXE_RAM_BUILD_DIR"
				if [[ $? -eq 0 ]]; then
					cd "$_AXE_RAM_BUILD_DIR"
					pacman -U  *.pkg.tar.xz
					if [[ $? -eq 0 ]]; then
						cd /root/
						toolchain_tag_check
						if [[ $? -eq 0 ]]; then
							echo -e "  ${_AXE_INFO_MODE} toolchain sucsessfully loaded ${txtrst}"
						fi
					else
						echo -e "  ${_AXE_FUCKUP_MODE} something is wrong pacman did not install toolchain packages ${txtrst}"
					fi
				else
					echo -e "  ${_AXE_FUCKUP_MODE} something is wrong did not copy anything check sources in correct directory ${txtrst}"
				fi
			else
				echo -e "  ${_AXE_FUCKUP_MODE} $_AXE_USB_STICK_MNT/$_AXE_USB_I7_TOOLCHAIN_BIN_DIR does not exist aborting ${txtrst}"
			fi
			echo -e "  ${_AXE_INFO_MODE} UNmounting $_AXE_USB_STICK_DEVICE ${txtrst}"
			umount  "$_AXE_USB_STICK_MNT"
			if [[ $? -eq 0 ]]; then
				echo -e "  ${_AXE_INFO_MODE} $_AXE_USB_STICK_DEVICE sucsessfully UNmounted ${txtrst}"
			else
				echo -e "  ${_AXE_FUCKUP_MODE} failed in UNmounting $_AXE_USB_STICK_DEVICE which will still be active ${txtrst}"
			fi
			
		else
			echo -e "  ${_AXE_FUCKUP_MODE} failed to mount$_AXE_USB_STICK_DEVICE to $_AXE_USB_STICK_MNT ${txtrst}"
		fi
		return 0
	fi

	echo -e "${_AXE_BLOCK_MODE} End of load_toolchain ${txtrst}"
}

function load_init()
{
	echo -e "${_AXE_BLOCK_MODE} Start of load_init ${txtrst}"
	
	#choices are masked by state of repos etc
	echo -e "  ${_AXE_INFO_MODE} ${_AXE_U} to use usb stick as source, this only supports the runit based scheme and is all binary so no building required ${txtrst}"
	[[ $_AXE_GIT_FETCHED_YES -eq 1 ]] && echo -e "  ${_AXE_INFO_MODE} ${_AXE_G} to use git as source ${txtrst}"
	[[ $_AXE_GIT_FETCHED_YES -eq 0 ]] && echo -e "  ${_AXE_INFO_MODE} you need to download git before you can load your init from git ${txtrst}"
	echo -e "  ${_AXE_INFO_MODE} ${_AXE_ANY_OTHER_KEY} to quit back to the previous menu ${txtrst}"
	read -n1 _AXE_TMP_CHAR
	echo -e "\n"
	[[ "$_AXE_TMP_CHAR" == "g" && $_AXE_GIT_FETCHED_YES -eq 0 ]] && echo -e "  ${_AXE_INFO_MODE} you need to fetch git before you can load your init from git ${txtrst}" && return 1
	
	if [[ "$_AXE_TMP_CHAR" == "g" && $_AXE_SOURCES_FETCHED_YES -eq 1 ]]; then
		echo -e "  ${_AXE_INFO_MODE} currently i have 2 different inits on offer ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} ${_AXE_R} to load and build the runit based init from git  ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} ${_AXE_I} to build the LSD init scheme from git ${txtrst}"
		read -n1 _AXE_TMP_CHAR
		echo -e "\n"
		if [[ "$_AXE_TMP_CHAR" == "r" ]]; then
			echo -e "  ${_AXE_INFO_MODE} building RUNIT init ${txtrst}"
			pacman -Rsn systemd-sysvcompat
			cd "$_AXE_GIT_DIR/RUNIT-BIN/"
			pacman -U  *.pkg.tar.xz
			if [[ $? -eq 0 ]]; then
				cd /root/
				build_axe_pkgbuild "ignite-git" "--install" "--con" "--force"
				if [[ $? -eq 5 || $? -eq 6 ]]; then
					reset_init
					return 2
				fi
				echo -e "  ${_AXE_INFO_MODE} configuring /etc/rc.conf ${txtrst}"
				[[ -s "/etc/rc.conf" ]] && sed -i "/DAEMONS=/d" "/etc/rc.conf"
				echo "HARDWARECLOCK=\"$_AXE_HARDWARECLOCK\"
TIMEZONE=\"$_AXE_TIMEZONE\"
KEYMAP=\"$_AXE_KEYMAP\"
CONSOLEFONT=\"$_AXE_CONSOLEFONT\"
CONSOLEMAP=\"$_AXE_CONSOLEMAP\"
DAEMONS=($_AXE_DAEMON_ARRAY)" >> "/etc/rc.conf"
				echo -e "  ${_AXE_INFO_MODE}please check /etc/rc.conf press ${_AXE_ANY_KEY} to continue ${txtrst}"
				read -n1 -s
				nano /etc/rc.conf
				any_key
				return 0
			else
				reset_init && return 3
			fi
			
		else
			echo -e	"  ${_AXE_FUCKUP_MODE} pacman failed to install the init, please panic  ${txtrst}"
		fi
		
		if [[ "$_AXE_TMP_CHAR" == "I" ]]; then
			echo -e "  ${_AXE_INFO_MODE} building LSD init ${txtrst}"
			pacman -Rsn systemd-sysvcompat
			if [[ ! $? -eq 0 ]]; then
				reset_init
				return 1
			fi
			build_axe_pkgbuild "filesystem" "--install" "--con" "--noforce" "$_AXE_OPT_TYPE"
			if [[ $? -eq 5 || $? -eq 6 ]]; then
				reset_init 
				return 1
			fi
			build_axe_pkgbuild "dhcpcd" "--install" "--con" "--noforce" "$_AXE_OPT_TYPE"
			if [[ $? -eq 5 || $? -eq 6 ]]; then
				reset_init 
				return 1
			fi
			build_axe_pkgbuild "sysvinit" "--install" "--con" "--noforce" "$_AXE_OPT_TYPE"
			if [[ $? -eq 5 || $? -eq 6 ]]; then
				reset_init 
				return 1
			fi
			build_axe_pkgbuild "initscripts-git" "--install-force" "--con" "--noforce" "$_AXE_OPT_TYPE"
			if [[ $? -eq 5 || $? -eq 6 ]]; then
				reset_init 
				return 1
			fi
			
			echo -e "  ${_AXE_INFO_MODE} now you need to configure rc.conf ${txtrst}"
			echo -e "  ${_AXE_INFO_MODE} press ${_AXE_ANY_KEY} to continue ${txtrst}"
			read -n1 -s
			nano /etc/rc.conf
			return 0
		fi

	else
		echo -e "  ${_AXE_INFO_MODE} you need to have fetched your sources before doing any building ${txtrst}"
	
	fi

	if [[ "$_AXE_TMP_CHAR" == "u" ]]; then
	
		echo -e "  ${_AXE_INFO_MODE} currently only the RUNIT based init scheme is supported from USB  ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} about to copy files from your usb stick, i expect to find the files in ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} $_AXE_USB_STICK_MNT/$_AXE_INIT_BIN_DIR/<runit binaries> for the runit-based init ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} if the paths are different on your machine you need to ${_AXE_CTRLC} and either modify your machine or just modify my code ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} my path is in the variables right at the top of my code listing , you cant miss it! ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} press ${_AXE_ANY_KEY} to continue ${txtrst}"
		read -n1 -s
		
		if [[ ! -d "$_AXE_USB_STICK_MNT" ]]; then
			echo -e "  ${_AXE_INFO_MODE} creating usb mount dir $_AXE_USB_STICK_MNT ${txtrst}"
			mkdir "$_AXE_USB_STICK_MNT"
		fi
		
		echo -e "  ${_AXE_INFO_MODE} mounting usb device ${txtrst}"
		mount -t vfat "$_AXE_USB_STICK_DEVICE" "$_AXE_USB_STICK_MNT"
		if [[ $? -eq 0 ]]; then
			echo -e "  ${_AXE_INFO_MODE} $_AXE_USB_STICK_DEVICE sucsessfully mounted to $_AXE_USB_STICK_MNT ${txtrst}"
			
			if [[ -d "$_AXE_USB_STICK_MNT/$_AXE_INIT_BIN_DIR" ]]; then
				echo -e "  ${_AXE_INFO_MODE} copying over init and components from $_AXE_USB_STICK_MNT/$_AXE_INIT_BIN_DIR to $_AXE_RAM_BUILD_DIR ${txtrst}"
				cp -pfr $_AXE_USB_STICK_MNT/$_AXE_INIT_BIN_DIR/* "$_AXE_RAM_BUILD_DIR"
				if [[ $? -eq 0 ]]; then
					pacman -Rsn systemd-sysvcompat
					cd "$_AXE_RAM_BUILD_DIR"
					pacman -U  *.pkg.tar.xz
					if [[ $? -eq 0 ]]; then
						cd /root/
						echo -e "  ${_AXE_INFO_MODE} configuring /etc/rc.conf ${txtrst}"
						[[ -s "/etc/rc.conf" ]] && sed -i "/DAEMONS=/d" "/etc/rc.conf"
						echo "HARDWARECLOCK=\"$_AXE_HARDWARECLOCK\"
TIMEZONE=\"$_AXE_TIMEZONE\"
KEYMAP=\"$_AXE_KEYMAP\"
CONSOLEFONT=\"$_AXE_CONSOLEFONT\"
CONSOLEMAP=\"$_AXE_CONSOLEMAP\"
DAEMONS=($_AXE_DAEMON_ARRAY)" >> "/etc/rc.conf"
						echo -e "  ${_AXE_INFO_MODE}please check /etc/rc.conf press ${_AXE_ANY_KEY} to continue ${txtrst}"
						read -n1 -s
						nano /etc/rc.conf
						echo -e "  ${_AXE_INFO_MODE}was everything ok ? ${_AXE_ANY_KEY} to continue or ${_AXE_CTRLC} to quit${txtrst}"
						read -n1 -s
						_AXE_INIT_REPLACED_YES=1
						save_settings
						reboot_with_questions
					else
						echo -e	"  ${_AXE_FUCKUP_MODE} pacman failed to install the init, please panic  ${txtrst}"
					fi
				else
					echo -e	"  ${_AXE_FUCKUP_MODE} something is wrong did not copy anything check sources in correct directory ${txtrst}"
				fi
			else
				echo -e	"  ${_AXE_FUCKUP_MODE} $_AXE_USB_STICK_MNT/$_AXE_INIT_BIN_DIR does not exist aborting ${txtrst}"
			fi
			echo -e	"  ${_AXE_INFO_MODE} UNmounting $_AXE_USB_STICK_DEVICE ${txtrst}"
			umount  "$_AXE_USB_STICK_MNT"
			if [[ $? -eq 0 ]]; then
				echo -e	"  ${_AXE_INFO_MODE} $_AXE_USB_STICK_DEVICE sucsessfully UNmounted ${txtrst}"
			else
				echo -e	"  ${_AXE_FUCKUP_MODE} failed in UNmounting $_AXE_USB_STICK_DEVICE which will still be active ${txtrst}"
			fi
			
		else
			echo -e "  ${_AXE_FUCKUP_MODE} failed to mount$_AXE_USB_STICK_DEVICE to $_AXE_USB_STICK_MNT ${txtrst}"
		fi
		return 0
	fi
	
	
	echo -e "${_AXE_BLOCK_MODE} End of load_init ${txtrst}"
}

function main_menu()
{
	echo -e "${_AXE_BLOCK_MODE} Start of main_menu ${txtrst}"
	
	
	local VAR="_axe_build_problem"
	_axe_build_problem=0
	

	
	while [[ ! "$_AXE_TMP_CHAR" == q ]]; do
	
		echo -e "  ${_AXE_INFO_MODE} many time options ${txtrst}"
		
		if [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 1 ]]; then
			echo -e "  ${_AXE_INFO_MODE} ${_AXE_G} to update your input PKGBUILD repo from git ${txtrst}"
			echo -e "  ${_AXE_INFO_MODE} ${_AXE_U} to update your input PKGBUILD repo from USB ${txtrst}"
		else
			echo -e "  ${_AXE_INFO_MODE} ${_AXE_G} to load your input PKGBUILD repo from git ${txtrst}"
			echo -e "  ${_AXE_INFO_MODE} ${_AXE_U} to load your input PKGBUILD repo from USB ${txtrst}"
		fi
		
		if [[ $_AXE_SOURCES_FETCHED_YES -eq 1 ]]; then
			echo -e "  ${_AXE_INFO_MODE} ${_AXE_F} to update your sources by re-downloading everything ${txtrst}"
		else
			echo -e "  ${_AXE_INFO_MODE} ${_AXE_F} to fetch your sources ${txtrst}"
		fi
		
		[[ $_AXE_VERSIONS_CHECKED_YES -eq 0 ]] && echo -e "  ${_AXE_INFO_MODE} ${_AXE_V} to run a version check on your PKGBUILD repo, note you need to pass this before i will let you move on ${txtrst}"
		
		[[ ! $_AXE_STAGE -eq 1 ]] && echo -e "  ${_AXE_INFO_MODE} ${_AXE_M} to maintain your pkgbuid dir ${txtrst}"
		
		echo -e "  ${_AXE_INFO_MODE} one time options ${txtrst}"
		
		[[ $_AXE_INIT_REPLACED_YES -eq 0 ]] && echo -e "  ${_AXE_INFO_MODE} ${_AXE_I} to load and install your new init ${txtrst}"
		
		toolchain_tag_check > /dev/null
		if [[ $? -eq 1 ]]; then
			echo -e "  ${_AXE_INFO_MODE} ${_AXE_T} to install a completed toolchain ${txtrst}"
			echo -e "  ${_AXE_INFO_MODE} ${_AXE_B} to build a optimised toolchain ${txtrst}"
		fi
		
		[[ $_AXE_STAGE -eq 1 ]] && echo -e "  ${_AXE_INFO_MODE} ${_AXE_R} to bootstrap your way to stage 3 by using the I7 repo ${txtrst}"
		
		[[ $_AXE_SOURCES_FETCHED_YES -eq 1 ]] && echo -e "  ${_AXE_INFO_MODE} ${_AXE_D} to build and install udev and its dependencies ${txtrst}"
		
		
		echo -e "  ${_AXE_INFO_MODE} ${_AXE_Q} to quit this selection screen ${txtrst}"
		
		
		read -n1 _AXE_TMP_CHAR
		echo -e "\n"
		case "$_AXE_TMP_CHAR" in
		
			"i") load_init
				if [[ ! $? -eq 0 ]]; then
					return 1
				fi
				_AXE_INIT_REPLACED_YES=1 && save_settings
				reboot_with_questions
				sleep 10 ;;
			
			"r") stage3_bootstrap ;;
			
			"b") if [[ $_AXE_SOURCES_FETCHED_YES -eq 1 ]]; then
					# contains tool tag check so wont be built needlesly
					 build_toolchain	 
				else
						echo -e "  ${_AXE_FUCKUP_MODE} you need to fetch sources before doing any building  ${txtrst}"
						any_key
				fi ;;
				
			"t") load_toolchain 
				if [[ ! $? -eq 0 ]]; then
					return 1
				fi
				reboot_with_questions
				sleep 10;;
			
			"g") if [[ $_AXE_GIT_FETCHED_YES -eq 1 ]]; then
					echo -e "  ${_AXE_INFO_MODE} git already downloaded do you want to refresh and update your input pkgbuild dir ?  i will then force you to do another version check ${txtrst}"
					echo -e "  ${_AXE_INFO_MODE} ${_AXE_Y} if you want to refresh the input pkgbuild dir from git ${_AXE_ANY_OTHER_KEY} if not, ${txtrst}"
					read -n1 _AXE_TMP_CHAR
					echo -e "\n"
					if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
						refresh_pkgbuild_git "$_AXE_GIT_MAINTAINED_PKGBUILD_DIR" "$_AXE_INPUT_PKGBUILD_DIR"
						if [[ $? -eq 0 ]]; then
							_AXE_GIT_FETCHED_YES=1
							_AXE_PKGBUILD_DIR_FILLED_YES=1
							save_settings
						fi
					fi
				else
					echo -e "  ${_AXE_INFO_MODE} Welcome , i assume you have had a look at my code ${txtrst}"
					echo -e "  ${_AXE_INFO_MODE} so first lets download the git and update your pkgbuild dir ${txtrst}"
					any_key
					get_pkgbuild_git "$_AXE_GIT_MAINTAINED_PKGBUILD_DIR" "$_AXE_INPUT_PKGBUILD_DIR" "$_AXE_GIT_URL"
					if [[ $? -eq 0 ]]; then
						_AXE_GIT_FETCHED_YES=1
						_AXE_PKGBUILD_DIR_FILLED_YES=1
						save_settings
					fi
				fi ;;
					
			"u") if [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 1 ]]; then
					echo -e "  ${_AXE_INFO_MODE} the input pkgbuild dir is already filled want to refresh it ? i will then force you to do another version check ${txtrst}"
					echo -e "  ${_AXE_INFO_MODE} ${_AXE_Y} if you want to refresh theinput pkgbuild dir from USB stick ${_AXE_ANY_OTHER_KEY} if not, ${txtrst}"
					read -n1 _AXE_TMP_CHAR
					echo -e "\n"
					if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
						fill_pkgbuild_dir_from_usb "$_AXE_INPUT_PKGBUILD_DIR"
						_AXE_PKGBUILD_DIR_FILLED_YES=1 && save_settings
					fi
				else
					echo -e "  ${_AXE_INFO_MODE} Welcome  i assume you have had a look at my code ${txtrst}"
					echo -e "  ${_AXE_INFO_MODE} so first lets copy over you input pkgbuild dir from USB stick for me to process ${txtrst}"
					any_key
					fill_pkgbuild_dir_from_usb "$_AXE_INPUT_PKGBUILD_DIR"
					_AXE_PKGBUILD_DIR_FILLED_YES=1 && save_settings
				fi ;;
					
			"v") if [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 1 ]]; then
					if [[ $_AXE_VERSIONS_CHECKED_YES -eq 1 ]]; then
						echo -e "  ${_AXE_INFO_MODE} versions already checked want to do it again ? ${txtrst}"
						echo -e "  ${_AXE_INFO_MODE} ${_AXE_Y} if you want to recheck the versions in the devmode repo ${_AXE_ANY_OTHER_KEY} if not, ${txtrst}"
						read -n1 _AXE_TMP_CHAR
						echo -e "\n"
						if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
							maintain_pkgbuild_dir "$_AXE_INPUT_PKGBUILD_DIR" --ver
							if [[ ! $? -eq 0 ]]; then
								echo -e "  ${_AXE_FUCKUP_MODE} the following PKGBUILDS have some issues ${txtrst}"
								echo -e "  ${_AXE_FUCKUP_MODE} rectify the situation then re-run, also available in $_AXE_DIR/maintain_problems.list ${txtrst}"
								cat "$_AXE_DIR/maintain_problems.list"
								echo -e "  ${_AXE_INFO_MODE} ${_AXE_Y} if you want to export the updateable pkgbuilds to USB stick ${_AXE_ANY_OTHER_KEY} if not, ${txtrst}"
								read -n1 _AXE_TMP_CHAR
								echo -e "\n"
								[[ "$_AXE_TMP_CHAR" == "y" ]] && export_pkgbuilds_to_usb
								return 1
							else
								_AXE_VERSIONS_CHECKED_YES=1 && save_settings
							fi
						fi
					else
						echo -e "  ${_AXE_INFO_MODE} Welcome dev, inassume you have had a look at my code ${txtrst}"
						echo -e "  ${_AXE_INFO_MODE} lets check your dev repo versions ${txtrst}"
						any_key
						maintain_pkgbuild_dir "$_AXE_INPUT_PKGBUILD_DIR" --ver
						if [[ ! $? -eq 0 ]]; then
							echo -e "  ${_AXE_FUCKUP_MODE} the following PKGBUILDS have some issues ${txtrst}"
							echo -e "  ${_AXE_FUCKUP_MODE} rectify the situation then re-run, also available in $_AXE_DIR/maintain_problems.list ${txtrst}"
							cat "$_AXE_DIR/maintain_problems.list"
							echo -e "  ${_AXE_INFO_MODE} ${_AXE_Y} if you want to export the updateable pkgbuilds to USB stick ${_AXE_ANY_OTHER_KEY} if not, ${txtrst}"
							read -n1 _AXE_TMP_CHAR
							echo -e "\n"
							[[ "$_AXE_TMP_CHAR" == "y" ]] && export_pkgbuilds_to_usb
							return 1
						else
							_AXE_VERSIONS_CHECKED_YES=1 && save_settings
						fi
					fi 
				else	
					echo -e "  ${_AXE_FUCKUP_MODE} you need to fetch a pkgbuild repo either from git or usb first ${txtrst}"
				fi ;;
			
			"m") if [[ $_AXE_SOURCES_FETCHED_YES -eq 1 && ! $_AXE_STAGE -eq 1 ]]; then
					echo -e "  ${_AXE_INFO_MODE} Welcome dev, i assume you have had a look at my code ${txtrst}"
					echo -e "  ${_AXE_INFO_MODE} lets run trhrough your pkgbuild dir and clean out any out of date pkgbuilds ${txtrst}"
					any_key
					maintain_pkgbuild_dir "$_AXE_PKGBUILD_DIR" --update
					if [[ ! $? -eq 0 ]]; then
						echo -e "  ${_AXE_FUCKUP_MODE} the following PKGBUILDS have some issues ${txtrst}"
						echo -e "  ${_AXE_FUCKUP_MODE} rectify the situation then re-run, also available in $_AXE_DIR/maintain_problems.list ${txtrst}"
						cat "$_AXE_DIR/maintain_problems.list"
						return 1
					fi
				else	
					echo -e "  ${_AXE_FUCKUP_MODE} you need fetch sources ${txtrst}"
				fi ;;

			
			"f") if [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 1 && $_AXE_VERSIONS_CHECKED_YES -eq 1 ]]; then
					if [[ $_AXE_SOURCES_FETCHED_YES -eq 1 ]]; then
							echo -e "  ${_AXE_INFO_MODE} sources already fetched but do ypo want to do it again ?? ( most unlikly i would immagine )${txtrst}"
							echo -e "  ${_AXE_INFO_MODE} ${_AXE_Y} if you want to rerun fetches  ${_AXE_ANY_OTHER_KEY} if not, ${txtrst}"
							read -n1 _AXE_TMP_CHAR
							echo -e "\n"
							if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
								create_axe_list
								fetch_sources "$_AXE_PKGBUILD_DIR" "$_AXE_DIR/axe.list"
								if [[ ! $? -eq 0 ]]; then
									echo -e "  ${_AXE_FUCKUP_MODE} the following sources failed to in some way, rectify the situation then re-run, also available in AXE_DIR/src_fetch_errors.list ${txtrst}"
									cat "$_AXE_DIR/src_fetch_errors.list"
									any_key
									return 1
								else
									_AXE_SOURCES_FETCHED_YES=1 && save_settings
								fi
							fi
					else
							echo -e "  ${_AXE_INFO_MODE} now lets do an initial run of downloading these sources you may have to ctrl c many times and fix ${txtrst}"
							echo -e "  ${_AXE_INFO_MODE} broken source url's upstream servers often take a break!! ${txtrst}"
							echo -e "  ${_AXE_INFO_MODE} press ${_AXE_ANY_KEY} to continue ${txtrst}"
							read -n1 -s
							create_axe_list
							fetch_sources "$_AXE_PKGBUILD_DIR" "$_AXE_DIR/axe.list"
							if [[ ! $? -eq 0 ]]; then
								echo -e "  ${_AXE_FUCKUP_MODE} the following sources failed to in some way, rectify the situation then re-run, also available in AXE_DIR/src_fetch_errors.list ${txtrst}"
								cat "$_AXE_DIR/src_fetch_errors.list"
								any_key
								return 1
							else
								_AXE_SOURCES_FETCHED_YES=1 && save_settings
							fi
					fi 
				else
					[[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 0 ]] && echo -e "  ${_AXE_FUCKUP_MODE} you need to fetch a pkgbuild repo either from git or usb first ${txtrst}"
					[[ $_AXE_VERSIONS_CHECKED_YES -eq 0 ]] && echo -e "  ${_AXE_FUCKUP_MODE} you need to check the pkgbuild repo versions first ${txtrst}"
				fi ;;
			"q") if [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 1 && $_AXE_VERSIONS_CHECKED_YES -eq 1 && $_AXE_SOURCES_FETCHED_YES -eq 1 && $_AXE_INIT_REPLACED_YES -eq 1 ]]; then
					return 0
				else
					if [[ $_AXE_PKGBUILD_DIR_FILLED_YES -eq 0 ]]; then
						echo -e "  ${_AXE_FUCKUP_MODE} dev PKGBUILD repo not filled"
						_AXE_TMP_CHAR="a"
					fi
					if [[ $_AXE_VERSIONS_CHECKED_YES -eq 0 ]]; then
						echo -e "  ${_AXE_FUCKUP_MODE} dev PKGBUILD versions not checked"
						_AXE_TMP_CHAR="a"
					fi
					if [[ $_AXE_SOURCES_FETCHED_YES -eq 0 ]]; then
						echo -e "  ${_AXE_FUCKUP_MODE} sources not fetched"
						_AXE_TMP_CHAR="a"
					fi
					if [[ $_AXE_INIT_REPLACED_YES -eq 0 ]]; then
						echo -e "  ${_AXE_FUCKUP_MODE} init is not axe replacement "
						_AXE_TMP_CHAR="a"
					fi
					
				fi ;;
		esac
	done

	
	
	echo -e "${_AXE_BLOCK_MODE} End of main_menu ${txtrst}"
	return 0
}

# setup functions **********************************************************************************************************************************************
#***************************************************************************************************************************************************************

function questions()
{
	echo -e "${_AXE_BLOCK_MODE} Start of questions ${txtrst}"
	
	
	if [[ ! $_AXE_NVIDIA ]]; then
		echo -e "  ${_AXE_INFO_MODE} are you running a fairly modern nvidia graphics card ? ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} if so you can take advantage of all the wonderfull cuda powered utils ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} ${_AXE_Y} if you are running a NVIDIA ${_AXE_ANY_OTHER_KEY} if running some other piece of crap ${txtrst}"
		read -n1 _AXE_TMP_CHAR
		echo -e "\n"
		if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
			_AXE_NVIDIA="yes"
			save_settings
		else
			_AXE_NVIDIA="no"
			save_settings
		fi
	fi
	
	
	

	if [[ ! $_AXE_OPT_TYPE ]]; then
		echo -e "  ${_AXE_INFO_MODE} are you a brave person? would you like to build all your packages with -O3 as stndard, or you a bit yellow and prefer -O2 ? ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} ${_AXE_Y} to build all the packages with -O3 as standard, ${_AXE_ANY_OTHER_KEY} to build with -O2 ${txtrst}"
		read -n1 _AXE_TMP_CHAR
		echo -e "\n"
		if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
			_AXE_OPT_TYPE="--o3"
			save_settings
		else
			_AXE_OPT_TYPE="--o2"
			save_settings
		fi
		
	fi
	
	
	if [[ ! $_AXE_BUILD_STAGE3 ]]; then
		echo -e "  ${_AXE_INFO_MODE} do you want to do the final stage 3 rebuild, (when the time comes) this MAY not be strictly necessary ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} but being AXE i am giving you the choice anyway :note though that this is a really massive build taking a good 8 hours ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} ${_AXE_Y} to build all the way to stage 3 ${_AXE_ANY_OTHER_KEY} to stick at stage 2 ${txtrst}"
		read -n1 _AXE_TMP_CHAR
		echo -e "\n"
		if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
			_AXE_BUILD_STAGE3="yes"
			save_settings
		else
			_AXE_BUILD_STAGE3="no"
			save_settings
		fi
		
	fi
	
	

	#check the package packager variable , if its mine skip this selection since we are not building
	check_pkg_tag "linux" "--nofail" "--nosuc" "--tag"
	if [[ $? -eq 0 ]]; then
	

		echo -e "  ${_AXE_INFO_MODE} right ! time to make some descisions about rebuilding your kernel i will build it with full CFLAGS optimisation which should give you a bit of a performance boost ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} do you want to configure the kernel for yourself ? if you say yes i will bring up a standard kernal config menu ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} which SHOULD show your standard arch config,if unsure use the menue to load the standard arch config in  $_AXE_RAM_BUILD_DIR/linux ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} then you can make any alterations you need , save and quit, then i will finish the build ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} it is quite usefull to change processor type from generic to core2, this will gain you another 5pc boost ontop of the gains from optimisation ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} but i would not bother with much else, arch kernal configs are very good in my opinion ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} at the end of the build i will reboot your pc which could be automatic or need your assistance, if you get a build fail, follow the instructions, or your nose ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} do you want to build your kernal with a menu? this will allow you to reconfigure your kernel but can be risky if your not sure what your doing ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} press ${_AXE_Y} to build your kernel with a menu, ${_AXE_ANY_OTHER_KEY} to use default menu config as provided by Arch ${txtrst}"
		read -n1 _AXE_TMP_CHAR
		echo -e "\n"
		if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
			_AXE_LINUX_MENU_YES=1
		else
			_AXE_LINUX_MENU_YES=0
		fi
		
		
		echo -e "  ${_AXE_INFO_MODE} ok you fancy being really daring and building the kernel with -O3 ? ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} press ${_AXE_Y} to build your kernal with -O3 ${_AXE_ANY_OTHER_KEY} to build your kernal with O2 ${txtrst}"
		read -n1 _AXE_TMP_CHAR
		echo -e "\n"
		if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
			_AXE_LINUX_O2_O3="--o3"
		else
			_AXE_LINUX_O2_O3="--o2"
		fi
		
	fi
	
	if [[ ! $_AXE_XORG ]]; then
		echo -e "  ${_AXE_INFO_MODE} finally i would like to know if you are running me from a xbased system or from a bare command line ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} the reason i need to know is that i cannot restart your pc and resume from where i left of, in a xbased terminal window ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} so when it comes to kernal rebuild time and subsiquent reboot you will have to rebbot yourself and call axe resumelinux1, if you are in an xwindow environment ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} ${_AXE_Y} if you are running me from an xterminal window, ${_AXE_ANY_OTHER_KEY} if running me from a cli-bash-login environment ${txtrst}"
		read -n1 _AXE_TMP_CHAR
		echo -e "\n"
		if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
			_AXE_XORG="yes"
			save_settings
		else
			_AXE_XORG="no"
			save_settings
		fi
	fi


	echo -e "${_AXE_BLOCK_MODE} End of questions ${txtrst}"

}

function stage2_setup()
{
	local VAR="_debug_stage2_setup"
	_debug_stage2_setup=0
	[[ $_debug_stage2_setup -eq 0 ]] && echo -e "${_AXE_BLOCK_MODE} Start of stage2_setup ${txtrst}"
	[[ $_debug_stage2_setup -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} DEBUG MODE Start of stage2_setup ${txtrst}"
	
	local VAR="_axe_pkgrel_fail"
	_axe_pkgrel_fail=0
	
		if [[ $_AXE_STAGE2_SETUP_COMPLETE_YES -eq 0 ]]; then
		
			#copy what are now stage 2 binaries to their repo folder
			
			cp -pf $_AXE_BINARY_EXPORT_DIR/* "$_AXE_STAGE2_BINARY_REPO_DIR"
			if [[ $? -eq 0 ]]; then
				[[ $_debug_stage2_setup -eq 1 ]] && dir "$_AXE_STAGE2_BINARY_REPO_DIR" && echo -e "  ${_AXE_DEBUG_MODE} please check your packages have been copied ${txtrst}" && any_key
			else
				echo -e "  ${_AXE_FUCKUP_MODE} something is wrong did not copy anything we need to quit in case !${txtrst}"
				any_key
				return 1
			fi
		
			# remove everything but base packages and deps
			
			pacman -Rs $(comm -23 <(pacman -Qeq|sort) <((for i in $(pacman -Qqg base); do pactree -ul $i; done)|sort -u|cut -d ' ' -f 1))
			
			rm -f /var/cache/pacman/pkg/*
			rm -f $_AXE_PACMAN_CACHE_DIR/*
			
			update_repo_database "$_AXE_STAGE2_BINARY_REPO_DIR" "axest2bin"
			if [[ ! $? -eq 0 ]]; then
				any_key
				return 2
			fi
			mod_axe_repo_entries --st2
			if [[ ! $? -eq 0 ]]; then
				any_key
				return 3
			fi
			
			pacman -Su --needed --noconfirm
			
				
			_AXE_PACKAGER_NAME="$_AXE_PACKAGER_NAME_FINAL"
			
			#switch over the packager name
			sed -i "s/PACKAGER=\"$_AXE_PACKAGER_NAME_START\"/PACKAGER=\"$_AXE_PACKAGER_NAME_FINAL\"/" /etc/makepkg.conf
			if [[ ! $? -eq 0 ]]; then
				any_key
				return 4
			fi
			sed -i "s/PACKAGER=\"$_AXE_PACKAGER_NAME_START\"/PACKAGER=\"$_AXE_PACKAGER_NAME_FINAL\"/" "$_AXE_DIR/makepkg.conf.axemodified"
			if [[ ! $? -eq 0 ]]; then
				any_key
				return 5
			fi
			
			#change pkgrel on all packages in all folders 

			stage2_pkgrel "$_AXE_INPUT_PKGBUILD_DIR"
			if [[ ! $? -eq 0 ]]; then
				any_key
				return 6
			fi
			
			stage2_pkgrel "$_AXE_USER_OVERIDE_PKGBUILD_DIR"
			if [[ ! $? -eq 0 ]]; then
				any_key
				return 7
			fi
			
			stage2_pkgrel "$_AXE_PKGBUILD_DIR"
			if [[ ! $? -eq 0 ]]; then
				any_key
				return 8
			fi
				
			
			_AXE_STAGE=2
			_AXE_STAGE2_SETUP_COMPLETE_YES=1
			save_settings
			
		else	
			echo -e "  ${_AXE_INFO_MODE} stag2 already setup skipping ${txtrst}"
		fi

	echo -e "${_AXE_BLOCK_MODE} End of stage2_setup ${txtrst}"
	return 0

}

function stage3_setup()
{
	local VAR="_debug_stage3_setup"
	_debug_stage3_setup=0
	[[ $_debug_stage3_setup -eq 0 ]] && echo -e "${_AXE_BLOCK_MODE} Start of stage3_setup ${txtrst}"
	[[ $_debug_stage3_setup -eq 1 ]] && echo -e "  ${_AXE_DEBUG_MODE} DEBUG MODE Start of stage3_setup ${txtrst}"

		if [[ $_AXE_STAGE3_SETUP_COMPLETE_YES -eq 0 ]]; then
		
			#copy what are now stage 3 binaries to their repo folder
			
			cd "$_AXE_BINARY_EXPORT_DIR"
			
			cp -pf $_AXE_BINARY_EXPORT_DIR/* "$_AXE_STAGE3_BINARY_REPO_DIR"
			if [[ $? -eq 0 ]]; then
				[[ $_debug_stage3_setup -eq 1 ]] && dir "$_AXE_STAGE3_BINARY_REPO_DIR" && echo -e "  ${_AXE_DEBUG_MODE} please check your packages have been copied ${txtrst}" && any_key
			else
				echo -e "  ${_AXE_FUCKUP_MODE} something is wrong did not copy anything we need to quit in case !${txtrst}"
				any_key
				return 1
			fi
		
			# remove everything but base packages and deps
			
			pacman -Rs $(comm -23 <(pacman -Qeq|sort) <((for i in $(pacman -Qqg base); do pactree -ul $i; done)|sort -u|cut -d ' ' -f 1))
			
			rm -f /var/cache/pacman/pkg/*
			rm -f $_AXE_PACMAN_CACHE_DIR/*
			
			update_repo_database "$_AXE_STAGE3_BINARY_REPO_DIR" "axest3bin"
			if [[ ! $? -eq 0 ]]; then
				any_key
				return 2
			fi
			mod_axe_repo_entries --st3
			if [[ ! $? -eq 0 ]]; then
				any_key
				return 3
			fi
			
				
			pacman -Su --needed --noconfirm
			
			_AXE_STAGE=3
			AXE_STAGE3_SETUP_COMPLETE_YES=1
			save_settings
			
		else	
			echo -e "  ${_AXE_INFO_MODE} stag3 already setup skipping ${txtrst}"
			return 4
		fi

	echo -e "${_AXE_BLOCK_MODE} End of stage3_setup ${txtrst}"

}

function stage3_bootstrap()
{
	echo -e "${_AXE_BLOCK_MODE} Start of stage3_bootstrap ${txtrst}"
	


	echo -e "${_AXE_BLOCK_MODE} End of stage3_bootstrap ${txtrst}"
}

function setup_all()
{
	echo -e "${_AXE_BLOCK_MODE} Start of setup_all ${txtrst}"
	
	# check for and create all directories
	
	#make _AXE_DIR if not present
	if [[ ! -d "$_AXE_DIR" ]]; then
		echo -e "  ${_AXE_INFO_MODE} creating $_AXE_DIR${txtrst}"
		mkdir -pv $_AXE_DIR
	else
		echo -e "  ${_AXE_INFO_MODE} $_AXE_DIR already present skipping${txtrst}"
	fi

	#make _AXE_CHROOT_BUILD_DIR if not present
	if [[ ! -d "$_AXE_CHROOT_BUILD_DIR" ]]; then
		echo -e "  ${_AXE_INFO_MODE} creating $_AXE_CHROOT_BUILD_DIR${txtrst}"
		mkdir -pv $_AXE_CHROOT_BUILD_DIR
	else
		echo -e "  ${_AXE_INFO_MODE} $_AXE_CHROOT_BUILD_DIR already present skipping${txtrst}"
	fi

	
	#make _AXE_INPUT_PKGBUILD_DIR if not present
	if [[ ! -d "$_AXE_INPUT_PKGBUILD_DIR" ]]; then
		echo -e "  ${_AXE_INFO_MODE} creating $_AXE_INPUT_PKGBUILD_DIR${txtrst}"
		mkdir -pv $_AXE_INPUT_PKGBUILD_DIR
	else
		echo -e "  ${_AXE_INFO_MODE} $_AXE_INPUT_PKGBUILD_DIR already present skipping${txtrst}"
	fi
	
	#make _AXE_PKGBUILD_DIR if not present
	if [[ ! -d "$_AXE_PKGBUILD_DIR" ]]; then
		echo -e "  ${_AXE_INFO_MODE} creating $_AXE_PKGBUILD_DIR${txtrst}"
		mkdir -pv $_AXE_PKGBUILD_DIR
	else
		echo -e "  ${_AXE_INFO_MODE} $_AXE_PKGBUILD_DIR already present skipping${txtrst}"
	fi
	
	#make _AXE_USER_OVERIDE_PKGBUILD_DIR if not present
	if [[ ! -d "$_AXE_USER_OVERIDE_PKGBUILD_DIR" ]]; then
		echo -e "  ${_AXE_INFO_MODE} creating $_AXE_USER_OVERIDE_PKGBUILD_DIR${txtrst}"
		mkdir -pv $_AXE_USER_OVERIDE_PKGBUILD_DIR
	else
		echo -e "  ${_AXE_INFO_MODE} $_AXE_USER_OVERIDE_PKGBUILD_DIR already present skipping${txtrst}"
	fi
	
	#make _AXE_OPTIMISED_TOOLCHAIN_DIR if not present
	if [[ ! -d "$_AXE_OPTIMISED_TOOLCHAIN_DIR" ]]; then
		echo -e "  ${_AXE_INFO_MODE} creating $_AXE_OPTIMISED_TOOLCHAIN_DIR${txtrst}"
		mkdir -pv $_AXE_OPTIMISED_TOOLCHAIN_DIR
	else
		echo -e "  ${_AXE_INFO_MODE} $_AXE_OPTIMISED_TOOLCHAIN_DIR already present skipping${txtrst}"
	fi
	
	#make _AXE_DEV_UPDATE_EXPORT_DIR if not present
	if [[ ! -d "$_AXE_DEV_UPDATE_EXPORT_DIR" ]]; then
		echo -e "  ${_AXE_INFO_MODE} creating $_AXE_DEV_UPDATE_EXPORT_DIR${txtrst}"
		mkdir -pv $_AXE_DEV_UPDATE_EXPORT_DIR
	else
		echo -e "  ${_AXE_INFO_MODE} $_AXE_DEV_UPDATE_EXPORT_DIR already present skipping${txtrst}"
	fi
	
	
	#make _AXE_BINARY_EXPORT_DIR if not present
	if [[ ! -d "$_AXE_BINARY_EXPORT_DIR" ]]; then
		echo -e "  ${_AXE_INFO_MODE} creating $_AXE_BINARY_EXPORT_DIR${txtrst}"
		mkdir -pv $_AXE_BINARY_EXPORT_DIR
	else
		echo -e "  ${_AXE_INFO_MODE} $_AXE_BINARY_EXPORT_DIR already present skipping"
	fi
	
	
	#make _AXE_SRC_EXPORT_DIR if not present
	if [[ ! -d "$_AXE_SRC_EXPORT_DIR" ]]; then
		echo -e "  ${_AXE_INFO_MODE} creating $_AXE_SRC_EXPORT_DIR${txtrst}"
		mkdir -pv $_AXE_SRC_EXPORT_DIR
	else
		echo -e "  ${_AXE_INFO_MODE} $_AXE_SRC_EXPORT_DIR already present skipping"
	fi
	
	#make _AXE_STAGE2_BINARY_REPO_DIR if not present
	if [[ ! -d "$_AXE_STAGE2_BINARY_REPO_DIR" ]]; then
		echo -e "  ${_AXE_INFO_MODE} creating $_AXE_STAGE2_BINARY_REPO_DIR${txtrst}"
		mkdir -pv $_AXE_STAGE2_BINARY_REPO_DIR
	else
		echo -e "  ${_AXE_INFO_MODE} $_AXE_STAGE2_BINARY_REPO_DIR already present skipping"
	fi
	
	
	#make _AXE_STAGE3_BINARY_REPO_DIR if not present
	if [[ ! -d "$_AXE_STAGE3_BINARY_REPO_DIR" ]]; then
		echo -e "  ${_AXE_INFO_MODE} creating $_AXE_STAGE3_BINARY_REPO_DIR${txtrst}"
		mkdir -pv $_AXE_STAGE3_BINARY_REPO_DIR
	else
		echo -e "  ${_AXE_INFO_MODE} $_AXE_STAGE3_BINARY_REPO_DIR already present skipping"
	fi
	
	
	#make _AXE_LOCAL_BINARY_REPO_DIR if not present
	if [[ ! -d "$_AXE_LOCAL_BINARY_REPO_DIR" ]]; then
		echo -e "  ${_AXE_INFO_MODE} creating $_AXE_LOCAL_BINARY_REPO_DIR${txtrst}"
		mkdir -pv $_AXE_LOCAL_BINARY_REPO_DIR
	else
		echo -e "  ${_AXE_INFO_MODE} $_AXE_LOCAL_BINARY_REPO_DIR already present skipping"
	fi
	
	
	#make _AXE_RAM_BUILD_DIR if not present
	if [[ ! -d "$_AXE_RAM_BUILD_DIR" ]]; then
		echo -e "  ${_AXE_INFO_MODE} creating $_AXE_RAM_BUILD_DIR${txtrst}"
		mkdir -pv $_AXE_RAM_BUILD_DIR
	else
		echo -e "  ${_AXE_INFO_MODE} $_AXE_RAM_BUILD_DIR already present skipping${txtrst}"
	fi

	#make _AXE_HDD_BUILD_DIR if not present
	if [[ ! -d "$_AXE_HDD_BUILD_DIR" ]]; then
		echo -e "  ${_AXE_INFO_MODE} creating $_AXE_HDD_BUILD_DIR${txtrst}"
		mkdir -pv $_AXE_HDD_BUILD_DIR
	else
		echo -e "  ${_AXE_INFO_MODE} $_AXE_HDD_BUILD_DIR already present skipping${txtrst}"
	fi

	#make _AXE_LOGS_DIR if not present
	if [[ ! -d "$_AXE_LOGS_DIR" ]]; then
		echo -e "  ${_AXE_INFO_MODE} creating $_AXE_LOGS_DIR${txtrst}"
		mkdir -pv $_AXE_LOGS_DIR
	else
		echo -e "  ${_AXE_INFO_MODE} $_AXE_LOGS_DIR already present skipping${txtrst}"
	fi
	
	
	#make _AXE_GIT_DIR if not present
	if [[ ! -d "$_AXE_GIT_DIR" ]]; then
		echo -e "  ${_AXE_INFO_MODE} creating $_AXE_GIT_DIR${txtrst}"
		mkdir -pv $_AXE_GIT_DIR
	else
		echo -e "  ${_AXE_INFO_MODE} $_AXE_GIT_DIR already present skipping${txtrst}"
	fi
	
	#make _AXE_GIT_BIN_DIR if not present
	if [[ ! -d "$_AXE_GIT_BIN_DIR" ]]; then
		echo -e "  ${_AXE_INFO_MODE} creating $_AXE_GIT_BIN_DIR${txtrst}"
		mkdir -pv $_AXE_GIT_BIN_DIR
	else
		echo -e "  ${_AXE_INFO_MODE} $_AXE_GIT_BIN_DIR already present skipping${txtrst}"
	fi
	
	
	#make _AXE_PACMAN_CACHE_DIR if not present
	if [[ ! -d "$_AXE_PACMAN_CACHE_DIR" ]]; then
		echo -e "  ${_AXE_INFO_MODE} creating $_AXE_PACMAN_CACHE_DIR${txtrst}"
		mkdir -pv $_AXE_PACMAN_CACHE_DIR
	else
		echo -e "  ${_AXE_INFO_MODE} $_AXE_PACMAN_CACHE_DIR already present skipping${txtrst}"
	fi

	#make _AXE_FAIL_BUILD_LOGS_DIR if not present
	if [[ ! -d "$_AXE_FAIL_BUILD_LOGS_DIR" ]]; then
		echo -e "  ${_AXE_INFO_MODE} creating $_AXE_FAIL_BUILD_LOGS_DIR${txtrst}"
		mkdir -pv $_AXE_FAIL_BUILD_LOGS_DIR
	else
		echo -e "  ${_AXE_INFO_MODE} $_AXE_FAIL_BUILD_LOGS_DIR already present skipping${txtrst}"
	fi


	# resume check
	if [[ $(cat /etc/profile | grep 'axe') ]]; then
		if [[ ! -s "$_AXE_DIR/settings" ]]; then
			echo -e "  ${_AXE_FUCKUP_MODE} well fucked up dude !!! have resumed from a auto restart and my settings file, which i saved before the reboot is missing. ${txtrst}"
			echo -e "  ${_AXE_FUCKUP_MODE} thats really wierd, maybe you are multibooting and something fucked there ? anyway am going to qut cos dont know what to do from here ${txtrst}"
			any_key
			echo -e "  ${_AXE_INFO_MODE} removing my entry from /etc/profile ${txtrst}"
			sed -i 's/axe//' /etc/profile
			shutdown -h now
			sleep 10
			exit
		else
			echo -e "${_AXE_INFO_MODE} removing my entry from /etc/profile ${txtrst}"
			sed -i 's/axe//' /etc/profile
		fi
	fi	
	
	#lets write a default settings if first run and no settings file exists or has been deleted
	if [[ ! -s "$_AXE_DIR/settings" ]]; then
		echo -e "  ${_AXE_INFO_MODE} no settings file detected assuming first run and writing default values ${txtrst}"
		save_settings
	else
		source "$_AXE_DIR/settings"
	fi

	
	#stage calculations
	if [[ $_AXE_STAGE -gt 1 ]]; then
		_AXE_PACKAGER_NAME="$_AXE_PACKAGER_NAME_FINAL"
	fi
	
	
		#check for multilib toolchain
	if [[ -s "/usr/lib32" ]]; then
		echo -e "  ${_AXE_INFO_MODE} detected /usr/lib32, obviously assuming i am running on a multilib system ${txtrst}"
		_AXE_MULTILIB_SUFFIX="-multilib"
		if [[ $(cat /etc/pacman.conf | grep "#\[multilib\]") ]]; then
			echo -e "  ${_AXE_INFO_MODE} found that your multilib repo is commented out, the arch installer does this as standard, am enabling it${txtrst}"
			echo "#entry added by axe cos its too difficult to enable the entry above, you can remove this and uncomment the identical lines earlier in the file" >> /etc/pacman.conf
			echo "[multilib]" >> /etc/pacman.conf
			echo "SigLevel = PackageRequired" >> /etc/pacman.conf
			echo "Include = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
			echo "#end of axe entry" >> /etc/pacman.conf
		fi
	else
		echo -e "  ${_AXE_INFO_MODE} did not detected /usr/lib32, obviously assuming i am running on a pure x64 system ${txtrst}"
		_AXE_MULTILIB_SUFFIX=""
	fi
	
		#check for archlinux.fr and write to pacman.conf if not there
	
	
	if [[ $(cat /etc/pacman.conf | grep 'archlinuxfr') ]]; then
		echo -e "  ${_AXE_INFO_MODE} an entry for archlinuxfr already exists------skipping ${txtrst}"
	else
		echo -e "  ${_AXE_INFO_MODE} did not find an entry for archlinuxfr creating one${txtrst}"
		echo "#entry added by AXE cos you dont have it and i need yaourt for AUR" >> /etc/pacman.conf
		echo "[archlinuxfr]" >> /etc/pacman.conf
		echo 'Server = http://repo.archlinux.fr/$arch' >> /etc/pacman.conf
		echo "#end of AXE entry" >> /etc/pacman.conf
	fi
	
	if [[ $_AXE_DEPS_MET_YES -eq 0 ]]; then

		echo -e "\n"
		echo -e "  ${_AXE_INFO_MODE} ok time to fetch all the progs i need to get the job done ${txtrst}"
		any_key

		if [[ "$_AXE_MULTILIB_SUFFIX" == "-multilib" ]]; then
			pacman -Syu
			pacman -S --needed  expac yaourt abs git sed grep nano diffutils patch autoconf automake bison fakeroot flex m4 make pkg-config multilib-devel
			_AXE_DEPS_MET_YES=1
			save_settings
		else
			pacman -Syu
			pacman -S --needed expac yaourt abs git devtools sed grep nano diffutils
			_AXE_DEPS_MET_YES=1
			save_settings
		fi
		
		
		echo -e "  ${_AXE_INFO_MODE} updating ABS ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} by the way if ABS sync gets stuck at just ${_AXE_CTRLC} and i will continue, ${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} there is no harm in this and it only happend once, subsiquent times ABS uses a different sync method which does not stick, so i just check twice to make sure :) ${txtrst}"
		
		abs
		abs
	fi
	
	
	#create lists to be used by other functions
	
	create_toolchain_list
	
	create_toolchain_deps_list
	
	create_axe_list
	
	toolchain_tag_check > /dev/null
	if [[ $? -eq 1 ]]; then
		cat "$_AXE_DIR/toolchain.list" > "$_AXE_DIR/sources.list"
	else
		cat "$_AXE_DIR/toolchain_deps.list" > "$_AXE_DIR/sources.list"
	fi
	cat "$_AXE_DIR/axe.list" >> "$_AXE_DIR/sources.list"
	
	
	#make backup of originally installed packages, if not already there, we will use this later
	if [[ -s "$_AXE_DIR/original_installed_packages.list" ]]; then
		echo -e "  ${_AXE_INFO_MODE} $_AXE_DIR/original_installed_packages.list already there assuming i have been run again, skipping backup ${txtrst}"
	else
		echo -e "  ${_AXE_INFO_MODE} writing all installed packages to $_AXE_DIR/original_installed_packages.list ${txtrst}"
		expac "%n"  > "$_AXE_DIR/original_installed_packages.list"
	fi
	
	
	#backup make.conf
	if [[ -s "$_AXE_DIR/pacman.conf.original" ]]; then
		echo -e "  ${_AXE_INFO_MODE} $_AXE_DIR/pacman.conf.original already present skipping ${txtrst}"
	else
		echo -e "  ${_AXE_INFO_MODE} $_AXE_DIR/pacman.conf.original not found backing up to $_AXE_DIR/pacman.conf.original ${txtrst}"
		cp -p /etc/pacman.conf "$_AXE_DIR/pacman.conf.original"
	fi

	if [[ -s "/etc/pacman.conf.axebackup" ]]; then
		echo -e "  ${_AXE_INFO_MODE} /etc/pacman.conf.axebackup already present skipping ${txtrst}"
	else
		echo -e "  ${_AXE_INFO_MODE} /etc/pacman.conf.axebackup not found backing up to pacman.conf.axebackup ${txtrst}"
		cp -p /etc/pacman.conf /etc/pacman.conf.axebackup
	fi
	
	

	
# swap over cache dir
#	if [[ ! ${cat /etc/pacman.conf | grep "$_AXE_PACMAN_CACHE_DIR") ]]; then
#		sed -i "/#CacheDir/aCacheDir = $_AXE_PACMAN_CACHE_DIR" /etc/pacman.conf
#	fi


	echo -e "${_AXE_BLOCK_MODE} End of setup_all ${txtrst}"
}

function check_makepkg_valid()
{
	echo -e "${_AXE_BLOCK_MODE} Start of check_makepkg_valid ${txtrst}"
	
	local VAR="_axe_difference"
	_axe_difference=""
	
	#check that my tag is in makepkg and also decide who modified it me or the human
	if [[ $(cat /etc/makepkg.conf | grep '#AXE modified this file') ]]; then
		echo -e "  ${_AXE_INFO_MODE} well looking promissing i found the tag in makpkg.conf it says i modified the file, now lets check if its been altered ${txtrst}"
		cmp /etc/makepkg.conf "$_AXE_DIR/makepkg.conf.axemodified"
		if [[ $? -eq 0 ]]; then
			echo -e "  ${_AXE_INFO_MODE} good as far as i can tell you have not altered makepkg.conf since i modified makepkg.conf ${txtrst}"
		else
			echo -e "  ${_AXE_FUCKUP_MODE}HEY someone , or some other script , has altered makepkg.conf since i first modified it ${txtrst}"
			echo -e "  ${_AXE_FUCKUP_MODE}do you want me to use my original backup and continue ? i am assuming most of my system files have been untouched ${txtrst}"
			echo -e "  ${_AXE_FUCKUP_MODE}and this little hickup is due to me having been ctrlc_ed during a later compile phase where i am compiling with -O3 ${txtrst}"
			axe_difference=$(cmp /etc/makepkg.conf $_AXE_DIR/makepkg.conf.humanmodified)
			echo -e "  ${_AXE_FUCKUP_MODE} this is what the differences are $_axe_difference ${txtrst}"
			echo -e "  ${_AXE_FUCKUP_MODE} press ${_AXE_Y} to continue and use my backup or ${_AXE_ANY_KEY} to just ignore the situation ${txtrst}"
			read -n1 _AXE_TMP_CHAR
			if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
				echo -e "\n"
				cp -pf $_AXE_DIR/makepkg.conf.axemodified /etc/makepkg.conf
				if [[ ! $? -eq 0 ]]; then
					echo -e "  ${_AXE_FUCKUP_MODE} failed to recover backup ${txtrst}"
					any_key
					return 1
				fi	
			else
				echo -e "  ${_AXE_INFO_MODE} ok ignoring any makepkg.conf changes, hope you know what your doing good luck , will show you makepkg.conf so you can look for yourself ${txtrst}"
				any_key
				nano /etc/makepkg.conf
			fi
		fi
	fi

	if [[ $(cat /etc/makepkg.conf | grep '#THE HUMAN modified this file') ]]; then
		echo -e "  ${_AXE_INFO_MODE} well looking promissing i found the tag in makpkg.conf it says the human modified the file ${txtrst}"
		cmp /etc/makepkg.conf $_AXE_DIR/makepkg.conf.humanmodified
		if [[ $? -eq 0 ]]; then
			echo -e "  ${_AXE_INFO_MODE} good as far as i can tell you have not altered makepkg.conf since i setup the system ${txtrst}"
		else
			echo -e "  ${_AXE_FUCKUP_MODE}HEY someone , or some other script, has altered /etc/makepkg.conf since you first modified it ${txtrst}"
			echo -e "  ${_AXE_FUCKUP_MODE}do you want me to use my original backup of your handywork and continue ? i am assuming most of my system files have been untouched ${txtrst}"
			echo -e "  ${_AXE_FUCKUP_MODE}and this little hickup is someones brainfart, by the way this is the same makepkg.conf that you chose to modify for youself ${txtrst}"
			_axe_difference=$(cmp /etc/makepkg.conf $_AXE_DIR/makepkg.conf.humanmodified)
			echo -e "  ${_AXE_FUCKUP_MODE} this is what the differences are $_axe_difference ${txtrst}"
			echo -e "  ${_AXE_FUCKUP_MODE}press ${_AXE_Y} to continue and use my backup of the humans efforts or${_AXE_ANY_KEY} to just ignore the situation ${txtrst}"
			read -n1 _AXE_TMP_CHAR
			if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
				echo -e "\n"
				cp -pf $_AXE_DIR/makepkg.conf.humanmodified /etc/makepkg.conf
				if [[ ! $? -eq 0 ]]; then
					echo -e "  ${_AXE_FUCKUP_MODE} failed to recover backup ${txtrst}"
					any_key
					return 1
				fi
			else
				echo -e "  ${_AXE_INFO_MODE} ok ignoring any makepkg.conf changes, hope you know what your doing good luck , will show you makepkg.conf so you can look for yourself ${txtrst}"
				any_key
				nano /etc/makepkg.conf
			fi
		fi
	fi

	echo -e "${_AXE_BLOCK_MODE} End of check_makepkg_valid ${txtrst}"
	return 0

}

function intro()
{
	[[ "$_AXE_SKIP_MENU_YES" -eq 1 ]] && echo -e "  ${_AXE_INFO_MODE} respecting settings and skipping intro ${txtrst}" && return 1


	echo -e "${_AXE_INFO_MODE} Hi I am  ${_AXE_AER} 
I am a script designed to massivly rebuild a sizable part of the Archlinux distribution in a particular direction.

My Directives........
1) AXE does not like systemd..... remove systemd at root by rebuliding around udev-fork
2) AXE does not like consolekit, polkit, pulseaudio, sudo, socialweb, colord..... remove as much as possible of them at root by clever patching and recompilation
and either replace thyeir functionality or remove the need for them entirly
3) AXE likes root.... make it easy and convenient to run everything as root, AXE uses its own far more effective security model
4) AXE only supports GTK 2/3, ( at the moment )
5) AXE likes Cinnamon

Why? ........ The nature of GCC and linux as a concept allows a user to tailor their Opperating system (oS) to the exact peramiters of the hardware
and to their personal tastes, by doing so one can achieve considerable speed and stability improvements.

Why not Gentoo or any other source based distro? ..... Good question, gentoo is an excellent alternative to AXE and you should seariously consider
gentoo before trying AXE, having said that Archlinux is very very cutting edge and progressive, whereas gentoo is not, and portage is very
hard to learn and not as featurefull as pacman/makepkg.${txtrst}"

	any_key

	echo -e "
${_AXE_INFO_MODE} How is all this achieved ? ..... Obviously as a script i cannot be imparted with all the code necessary to modify Arch
so extensivly, so my creator has produced a collection of over 60 PKGBUILD's to do the job, they replace standard Arclinux packages
during the build process, these PKGBUILDS have been carefully modified to replace systemd and achieve my other goals,
they are also being maintained inline with arch packages and in some cases are better/newer ( depends on opinion ).
The github locations for the repo,s i use are

https://github.com/Jubei-Mitsuyoshi/AXE-BUILD-REPO  ....... which contains my sources
https://github.com/Jubei-Mitsuyoshi/AXE-I7-BINARY-REPO ...... which contains I7 compiled binaries (more on that later )
https://github.com/Jubei-Mitsuyoshi/AXE-MAINTAINED ..... which contains all my creators original work

all the modifications are open to public scrutiny and critisism.${txtrst}"

	any_key


	echo -e "
${_AXE_INFO_MODE} What i need........ i am designed to be run on a bare archlinux setup the following install medium have been tested

	archlinux-2012.08.04-dual.iso
	archlinux-2012.08.26-x86_64.iso
	archlinux-2012.09.07-dual.iso
	
I also need a stable and quick wired internet connection, all the other dependencies etc i will fetch for myself.

What do you need....... you need to have some basic knowlege of pacman, and understand what optimisation flags mean,
not because you need to do any programming or anything but because i will be asking you some questions about your
personal optimisation preferences, it would be usefull if you knew what the fuck i was talking about.
	
How long does it take ..... About 24 hours on an I7 laptop, considerably less on a similar desktop

When i'm done ....... you will have a collection of optimised binaries, FULLY and beautifully crafted for your processor
you can then share these binaries with other AXE users so they can enjoy full optimisatioon without the headache
of compiling ${txtrst}"
	
	any_key

	echo -e "

${_AXE_INFO_MODE} My modes of opperation ....... I have several modes of opperation that are chosen by menu choices and locations of sources

Dev mode ....... So you are a developer who wants to use the AXE git archive as a start to your own AXE version
Clone the AXE- MAINTAINED and AXE-PKGBUILD  git, ( on another pc obviously ), do your mods on AXE-MAINTAINED
as you see fit, use my USB STICK function to load your stuff to my dev folder, and the unmodified ( compressed)
sources to the USB folder. I will build your sources as preference and revert to my masters sources if yours are not present.

Bootstrap mode ........ So you have a I7 already, or you dont care about optimisation but just hate/like the same things
my creator does. Just load your binary repo from git ( use the option when asked )chose the I7 and bootstrap option when asked,
then go through the instructions and within 5 min you will have a systemd-free setup, then you can create your own arch
just as if you were dealing with a normal arch setup. But obviously quicker and free from a lot of dependencies

Full rebuild mode ....... So you dont have a I7 and DO care about optimisation, use the menu to load the sources git,
DO NOT answer yes to bootstrapping, answer the questions regarding the kernakl and -O2/-O3, then wait 24 hours
or so for me to do my stuff${txtrst}"


	any_key


	echo -e "
${_AXE_INFO_MODE} Technical stuff ....... First i rebuild you toolchain, ( with optimisations ) and i mean FULLY rebuild it, as if you were building a cross
compiler. This gives a rocksolid toolchain, i also prevent toolchain updates via pacman, and controll updates
in my own fasion so all toolchain components remain rock solid.

The toolchain is build -O2 and in a special sequence, this is fixed in code and should never be changed.

My build algorithum for other packages is quite complex and goes something like this

fetch sources > build in ram > if fails build in HDD > if it fails build in HDD with cpu cores set to 1 > if it fails

mark it a build fail and try to build it in a clean chroot environment > if it fails its a arch maintainers issue
                                                                       > if it suceeds its my fault and issue
																	   
During stage 1 i rebuild the kernel and give you a choice of full kernel hacking via nmenu.
I give you a chice of rebuilding with -O2 or -O3, this applies throughout the entire build and is only asked
once. Eventually i will give users the option of specifying -O2/-O3 per package

I reboot the machine at various stages of the build

The process is totally automated with some obvious exceptions, on each reboot you have to log back in,
at the start you will have to answer some questions, if you chose the menu option to rebuild your kernel
you have to be there to do that${txtrst}"

	any_key

	echo -e "
${_AXE_INFO_MODE}Currently systemd in AXE is replaced by the old Archlinux initscripts, very shortly that will be replaced with runit or equivelent

Once you have your collection of binaries i highly encourage you to upload them onto git for other people to benefit from,
if you dont know how to do that i can do it automatically for you, just contact my creator first at

<           >

and he will be glad to create a git and an alternate version of myself to access it.${txtrst}"
	
	echo -e "  ${_AXE_INFO_MODE} if you want to skip this intro screen from now on press ${_AXE_S} or ${_AXE_ANY_OTHER_KEY} to display it next time  ${txtrst}"
	read -n1 _AXE_TMP_CHAR
	echo -e "\n"
	if 	[[ "$_AXE_TMP_CHAR" == "s"  ]]; then
		_AXE_SKIP_MENU_YES=1
		save_settings
	fi
	
}

function setup_makepkg()
{
	echo -e "${_AXE_BLOCK_MODE} Start of setup_makepkg ${txtrst}"
	
	local VAR="_axe_gcc_ver"
	
	
	# backup first
	if [[ -s "$_AXE_DIR/makepkg.conf.original" ]]; then
		echo -e "  ${_AXE_INFO_MODE} $_AXE_DIR/makepkg.conf.original already present skipping backup ${txtrst}"

	else
		#backup make.conf
		echo -e "  ${_AXE_INFO_MODE} $_AXE_DIR/makepkg.conf.original not found backing up to $_AXE_DIR/makepkg.conf.original ${txtrst}"
		cp -p /etc/makepkg.conf "$_AXE_DIR/makepkg.conf.original"
	fi

	if [[ -s "/etc/makepkg.conf.axebackup" ]]; then
		echo -e "  ${_AXE_INFO_MODE} /etc/makepkg.conf.axebackup already present skipping backup ${txtrst}"
	else
		echo -e "  ${_AXE_INFO_MODE} /etc/makepkg.conf.axebackup not found backing up to makepkg.conf.axebackup ${txtrst}"
		#backup make.conf
		cp -p "/etc/makepkg.conf" "/etc/makepkg.conf.axebackup"
	fi

	
	
	if [[ $(cat /etc/makepkg.conf | grep '#AXE modified this file') || $(cat /etc/makepkg.conf | grep '#AXE modified this file') ]]; then
		echo -e "  ${_AXE_INFO_MODE} makepkg.conf already setup skipping ${txtrst}"
		return 1
	else

		echo -e "  ${_AXE_INFO_MODE}this routine alters your makepkg.conf, if you have an original, unaltered makepkg.con, then you are all set to go,${txtrst}"
		echo -e "  ${_AXE_INFO_MODE}otherwise modify this piece of code to suite${txtrst}"
		echo -e "  ${_AXE_INFO_MODE} press${_AXE_Y} to let me do the altrerations ${_AXE_ANY_OTHER_KEY} key to skip and let you do makepkg.conf yourself"
		read -n1 _AXE_TMP_CHAR
		if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
			echo -e "\n"
			#mark makepkg.conf as modified by axe
			echo "#AXE modified this file $(date)" >> /etc/makepkg.conf

			#comment out current flags
			sed -i 's/CFLAGS/#commented out by axe CFLAGS/' /etc/makepkg.conf
			sed -i 's/CXXFLAGS/#commented out by axe CXXFLAGS/' /etc/makepkg.conf

			#setup compiler flags
			
			_axe_gcc_ver=$(cat "/var/abs/core/gcc/PKGBUILD" | grep -m 1 'pkgver=' | sed 's/pkgver=//' )

			_AXE_CFLAGS=$(echo "" | gcc -march=native -v -E - 2>&1 | grep cc1 | sed 's/^/CFLAGS="-O2 -pipe/' | sed "s:/usr/lib/gcc/x86_64-unknown-linux-gnu/$_axe_gcc_ver/cc1 -E -quiet -v - ":: | sed 's:--param :--param=:g')
			_AXE_CXXFLAGS=$(echo "" | gcc -march=native -v -E - 2>&1 | grep cc1 | sed 's/^/CXXFLAGS="-O2 -pipe/' | sed "s:/usr/lib/gcc/x86_64-unknown-linux-gnu/$_axe_gcc_ver/cc1 -E -quiet -v - ":: | sed 's:--param :--param=:g')
			
			echo "CFLAGS= $_AXE_CFLAGS \n CXXFLAGS=$_AXE_CXXFLAGS$" > "$_AXE_OPTIMISED_TOOLCHAIN_DIR/gcc_flags.list"

			echo -e "  ${_AXE_INFO_MODE}at this point you need to decide what your compiler flags should be, i have detected your flags and can automatically add them, they are${txtrst}"
			echo -e "\n"
			echo -e "  ${_AXE_INFO_MODE}$_AXE_CFLAGS${txtrst}"
			echo -e "\n"
			echo -e "  ${_AXE_INFO_MODE}$_AXE_CXXFLAGS${txtrst}"
			echo -e "\n"
			echo -e "  ${_AXE_INFO_MODE} but you may be more comfortable with -march=native which is what i used to calculate your flags, so im giving you the choice at this point${txtrst}"
			echo -e "  ${_AXE_INFO_MODE}press ${_AXE_M} to set CFLAGS and CXXFLAGS to -march=native ${_AXE_ANY_OTHER_KEY} key to set CFLAGS and CXXFLAGS to $_AXE_CFLAGS${txtrst}"
			read -n1 _AXE_TMP_CHAR
			if [[ "$_AXE_TMP_CHAR" == "m" ]]; then
				echo -e "\n"
				sed -i "/#commented out by axe CFLAGS/aCFLAGS=\"-O2 -pipe -march=native -fstack-protector --param=ssp-buffer-size=4 -D_FORTIFY_SOURCE=2\"" /etc/makepkg.conf
				sed -i "/#commented out by axe CXXFLAGS/aCXXFLAGS=\"-O2 -pipe -march=native -fstack-protector --param=ssp-buffer-size=4 -D_FORTIFY_SOURCE=2\"" /etc/makepkg.conf
			else
				sed -i "/#commented out by axe CFLAGS/a$_AXE_CFLAGS -fstack-protector --param=ssp-buffer-size=4 -D_FORTIFY_SOURCE=2\"" /etc/makepkg.conf
				sed -i "/#commented out by axe CXXFLAGS/a$_AXE_CXXFLAGS -fstack-protector --param=ssp-buffer-size=4 -D_FORTIFY_SOURCE=2\"" /etc/makepkg.conf
			fi

			if [[ "$_AXE_STAGE" -eq 1 ]]; then
					#add packager name
					sed -i "s/\#PACKAGER=\"John Doe <john@doe.com>\"/PACKAGER=\"$_AXE_PACKAGER_NAME\"/" /etc/makepkg.conf
			fi

			#get rid of all the checks with !check
			sed -i 's/!ccache check/!ccache !check/' /etc/makepkg.conf

			#add makeflags
			#work out how many cores
			_AXE_CORES=$(cat /proc/cpuinfo | grep 'processor' | wc -l)
			let _AXE_CORES=$_AXE_CORES+1
			#make the change
			sed -i 's/MAKEFLAGS="-j2"/MAKEFLAGS="jbtemp"/' /etc/makepkg.conf
			sed -i s/jbtemp/-j$_AXE_CORES/ /etc/makepkg.conf

			#final check
			echo -e "  ${_AXE_INFO_MODE} examin make.conf make sure changes are correct${txtrst}"
			any_key
			nano /etc/makepkg.conf

			#backup modified makepkg.conf we are going to need it as a check for next time i am run
			cp -p /etc/makepkg.conf "$_AXE_DIR/makepkg.conf.axemodified"
		else
			echo -e "  ${_AXE_INFO_MODE} ok you have chosen to make your own changes to makepkg.conf------ i will open it up in nano for you${txtrst}"
			echo -e "  ${_AXE_INFO_MODE} when you are done i will mark the file as modified so we do not repeat this step, please do not remove my tag ,its bloody obvious what it is${txtrst}"
			any_key
			nano /etc/makepkg.conf
			echo "#THE HUMAN modified this file $(date)" >> /etc/makepkg.conf
			#backup modified makepkg.conf we are going to need it to make sure update function works
			cp -p /etc/makepkg.conf "$_AXE_DIR/makepkg.conf.humanmodified"
		fi
	fi

	echo -e "${_AXE_BLOCK_MODE} End of setup makepkg${txtrst}"

}

# function trash bin *******************************************************************************************************************************************
#***************************************************************************************************************************************************************


function check_required_bin()
{
#THIS FUNCTION WAS STOLEN COMPLETE FROM PACBUILDER
#input argument
#1 "xxxxxx" the binary name
  if ! which $1 >/dev/null 2>&1; then
    echo -e "${_AXE_INFO_MODE} dependancy missing, will fetch the fucker $1${txtrst}"
    exit 1
  fi
}

function build_pkg_in_axe_chroot()
{
	echo -e "\n"
	echo -e "${_AXE_BLOCK_MODE} Start of build package in a clean chroot with axe packages as base${txtrst}"


		# chroot -02 with jopts off ( internal makepkg.conf )***********************************************************************************************
	
	
	copy_pkgbuild "$1" "$_AXE_CHROOT_BUILD_DIR"
	

	cd "$_AXE_CHROOT_BUILD_DIR/$1"
	extra-x86_64-build -c
	if [[ $? -eq 0 ]]; then
		echo "$1 sucessfully built in chroot, looks like its something to do with our compiler flags or build environment in general $(date)" >> "$_AXE_DIR/build-chroot.log"
		echo -e "${_AXE_FUCKUP_MODE} $1 sucessfully built in chroot, looks like its something to do with our compiler flags or build environment in general $(date)${txtrst}"
		cd /root/
		#uncomment MAKEFLAGS
		sed -i 's/#MAKEFLAGS/MAKEFLAGS/' /etc/makepkg.conf
		rm -fr "$_AXE_CHROOT_BUILD_DIR/$1"
		_AXE_BUILD_PROBLEM_TEMP_YES=1
		return 5
	else
		echo "$1 failed built in chroot, looks like its arch maintainers issue $(date)" >> "$_AXE_DIR/build-chroot.log"
		echo -e "${_AXE_FUCKUP_MODE} $1 failed built in chroot, looks like its arch maintainers issue $(date)${txtrst}"
		cd /root/
		rm -fr "$_AXE_CHROOT_BUILD_DIR/$1"
		_AXE_BUILD_PROBLEM_TEMP_YES=1
	fi

	echo -e "${_AXE_BLOCK_MODE} end of build package in a clean chroot with axe packages as base ${txtrst}"

}

# sed 's/[^0-9]*//g'

function yaourt_build()
{
	echo -e "${_AXE_BLOCK_MODE} Start of build with yaourt${txtrst}"
	
	# switch to -O3
	sed -i 's/-O2/-O3/' /etc/makepkg.conf

#	first argument is pkg name
		#xxxx package name
	#second argument wether to skip the packeger check
		#--force ignore packager chaeck
		
	if [[ ! $2 == "--force" ]]; then
		check_pkg_tag "$1" "--nofail" "--nosuc" "--tag"
		if [[ $? -gt 0 ]]; then
			return 0
		fi
	fi
		
	yaourt -Sbb --noconfirm "$1" "--export $_AXE_SRC_EXPORT_DIR"
	if [[ $? -eq 0 ]]; then
		echo "$1 package built with -O3 from ram $(date)" >> "$_AXE_DIR/build-complete.list"
		return 0
	else
		rm -fr /tmp/*.yaourt.*
	fi
	
	
	
	# switch to -O2
	sed -i 's/-O3/-O2/' /etc/makepkg.conf
	


	yaourt -Sbb --noconfirm "$1" "--export $_AXE_SRC_EXPORT_DIR"
	if [[ $? -eq 0 ]]; then
		echo "$1 package built with -O2 from ram $(date)" >> "$_AXE_DIR/build-complete.list"
		return 2
	else
		rm -fr /tmp/*.yaourt.*
		return 20
	fi
	
	
	echo -e "${_AXE_BLOCK_MODE} End of build_axe_pkgbuild ${txtrst}"
}	
		
function create_helper_axevcheck()
{
	echo -e "\n${_AXE_BLOCK_MODE} Start of create axevcheck helper script${txtrst}"


chmod u+x "$_AXE_DIR/axevcheck"

mv "$_AXE_DIR/axevcheck" "/usr/bin/axevcheck"

	echo -e "${_AXE_BLOCK_MODE} End of create axevcheck helper script${txtrst}"

}

function create_systemd_tools_dep_list()
{
	echo -e "\n${_AXE_BLOCK_MODE} Start of create_systemd_tools_dep_list${txtrst}"
echo "mkinitcpio
dbus-core
udisks
crda
upower
xf86-video-intel
libwacom
xf86-video-ati
bluez
xf86-input-evdev" > "$_AXE_DIR/systemd_tools_dep.list"


	echo -e "${_AXE_BLOCK_MODE} End of create_systemd_tools_dep_list${txtrst}"
}

function sort_list()
{


	echo -e "\n"
	echo -e "${_AXE_BLOCK_MODE} ${txtrst}"
	
	local VAR="_AXE_LINE_INDEX_NUM"
	local VAR="_AXE_LINE_INDEX_PKG"
	local VAR="_AXE_LINE_INDEX-1_PKG"
	local VAR="_AXE_LINES_IN_LIST_NUM"
	local VAR="_AXE_HAVE_MOVED_LINE_YES"
	
	
	while [[ -s "$_AXE_DIR/build-targets.list" ]]; do

		#produce list of packages not!! with i7 packager variable and !not with any as architecture and not lib32
		#list installed packs | grep not i7 | grep not any arch | delete everything after first space
		expac "%n %p %a" | grep -v "$_AXE_PACKAGER_NAME" | grep -v "any"  | grep -v "lib32.*" | sed 's/ .*//' > "$_AXE_DIR/build-prospects.list"



		diff <(cat $_AXE_DIR/build-prospects.list | sort) <(cat $_AXE_DIR/build_fail.list | sort) | grep \<|cut -f2 -d' ' > "$_AXE_DIR/build-targets.list"


		for pkgname in $(cat $_AXE_DIR/build-targets.list); do

			cat $_AXE_DIR/build-manual-tmp.list | grep -Fx "$pkgname" > "$_AXE_DIR/scratch"
			if [[ -s "$_AXE_DIR/scratch" ]]; then
				_AXE_MAN_TMP=""
			else
				_AXE_MAN_TMP="--noconfirm"
			fi

			build_pkgbuild "$pkgname" 1 "$_AXE_MAN_TMP"

		done
	done
	
	
	

		
 	echo -e "${_AXE_BLOCK_MODE} ${txtrst}"
}

function safe_upgrade()
{
	echo -e "${_AXE_BLOCK_MODE} Start of update packages in a safe toolchain friendly manner ${txtrst}"
	echo -e "  ${_AXE_INFO_MODE} do you want to check for updates and update your system ? ${txtrst}"
	echo -e "  ${_AXE_INFO_MODE} to do this i will unmask your toolchain entries then mask them back up when finished, and give you some choices along the way ${txtrst}"
	echo -e "  ${_AXE_INFO_MODE} ${_AXE_Y} to safe update, ${_AXE_ANY_KEY} not to bother ${txtrst}"
	read -n1 _AXE_TMP_CHAR
	if [[ "$_AXE_TMP_CHAR" == "y" ]]; then

		cat /etc/pacman.conf | grep "IgnorePkg=gcc" > "$_AXE_DIR/scratch"
#		if [[ -s "$_AXE_DIR/scratch" ]]; then
		unmask_toolchain_upgrades
		pacman -Syu
		echo -e "  ${_AXE_INFO_MODE} well looking promissing i found the tag in makpkg.conf it says i modified the file ${txtrst}"
		_AXE_HAS_MODIFIED_MAKEPKG=1
	else
		_AXE_HAS_MODIFIED_MAKEPKG=0
	fi
	
		if [[ -d "$_AXE_DIR/toolchainbackup" ]]; then

			echo -e "  ${_AXE_INFO_MODE} and also detacted you have a previous working optimised toolchain backed up${txtrst}"
			echo -e "  ${_AXE_INFO_MODE} would you like me to restore that working toolchain and ignore any updates ?${txtrst}"
			echo -e "  ${_AXE_INFO_MODE} by the way i cant do downgrades, if the backed up toolchain is considerably older than the current one${txtrst}"
			echo -e "  ${_AXE_INFO_MODE} this opperation will crash out${txtrst}"
			echo -e "  ${_AXE_INFO_MODE} press ${_AXE_Y} to restore your backed up toolchain, ${_AXE_ANY_OTHER_KEY} to not bother and rebuild from scratch this time round ${txtrst}"
			read -n1 _AXE_TMP_CHAR
			if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
				cd "$_AXE_DIR/toolchainbackup/toolchain$_AXE_MULTILIB_SUFFIX/"
				pacman -U --noconfirm *.pkg.tar.xz
				if [[ $? -eq 0 ]]; then
					echo -e "  ${_AXE_INFO_MODE} as i warned something bummed this opperation, ok we will have to rebuild again${txtrst}"
					_AXE_TOOLCHAIN_COMP_NEW_YES=1
				else
					echo -e "  ${_AXE_INFO_MODE} good the restore went well, we will not build the toolchain this time round${txtrst}"
					_AXE_TOOLCHAIN_COMP_NEW_YES=0
				fi
			else
				_AXE_TOOLCHAIN_COMP_NEW_YES=1
			fi
		else
			echo -e "  ${_AXE_INFO_MODE} ok detected that the following toolchain components lack the $_AXE_PACKAGER_NAME tag ${txtrst}"
			cat "$_AXE_DIR/scratch"
			echo -e "  ${_AXE_INFO_MODE} since i cant update individual components ( thats why its called a tool-chain ) we need to rebuild the whole thing again${txtrst}"
			_AXE_TOOLCHAIN_COMP_NEW_YES=1
		fi

	echo -e "${_AXE_BLOCK_MODE} End of update packages in a safe toolchain friendly manner ${txtrst}"
}

function build_final_extras()
{
	

	if [[ $_AXE_FINAL_EXTRAS_INSTALLED_YES -eq 0 ]]; then
	
		
		if [[ $_AXE_NVIDIA == "yes" ]]; then
		
			build_axe_pkgbuild "nvclock" "--noinstall" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
			
			build_axe_pkgbuild "nvdock" "--noinstall" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
			
			build_axe_pkgbuild "libvdpau" "--noinstall" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
			
			build_axe_pkgbuild "libcl" "--noinstall" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
			
			pacman -R ati-dri
			
			pacman -R intel-dri
			
			pacman -R nouveau-dri
			
			build_axe_pkgbuild "nvidia" "--install" "--con" "--noforce" "$_AXE_OPT_TYPE"
			
			build_axe_pkgbuild "nvidia-utils" "--install" "--con" "--noforce" "$_AXE_OPT_TYPE"
			
			build_axe_pkgbuild "cuda" "--install" "--con" "--noforce" "$_AXE_OPT_TYPE"
			
			build_axe_pkgbuild "nvidia-cg-toolkit" "--install" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
			
			build_axe_pkgbuild "python2-pycuda" "--noinstall" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
		
		fi
		
		
		
		
		build_axe_pkgbuild "gnome-menus2" "--noinstall" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
		
		build_axe_pkgbuild "muffin-wm" "--noinstall" "--con" "--noforce" "$_AXE_OPT_TYPE"
		
		build_axe_pkgbuild "muffin-git" "--noinstall" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
		
		build_axe_pkgbuild "cinnamon" "--noinstall" "--con" "--noforce" "$_AXE_OPT_TYPE"
		
		build_axe_pkgbuild "cinnamon-git" "--noinstall" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
		
		build_axe_pkgbuild "alacarte" "--noinstall" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
		
		build_axe_pkgbuild "nemo-fm" "--noinstall" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
		
		build_axe_pkgbuild "nemo-git" "--noinstall" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
		
		build_axe_pkgbuild "gnome-settings-daemon-ubuntu" "--noinstall" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
		
		build_axe_pkgbuild "compiz-axe" "--noinstall" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
		
		build_axe_pkgbuild "ignite-git" "--noinstall" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
		
		build_axe_pkgbuild "initscripts-git" "--noinstall" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
		
		build_axe_pkgbuild "linux-zen" "--noinstall" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
		
		build_axe_pkgbuild "udev-axe-git" "--noinstall" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
		
		build_axe_pkgbuild "connman-git" "--noinstall" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
		
		build_axe_pkgbuild "gtk3-axe" "--noinstall" "--nocon" "--noforce" "$_AXE_OPT_TYPE"
		
		_AXE_FINAL_EXTRAS_INSTALLED_YES=1
		save_settings
		echo -e "${_AXE_BLOCK_MODE} End of build_final_extras ${txtrst}"
		return 0
	else
		echo -e "  ${_AXE_INFO_MODE} final_extras already built skipping ${txtrst}"
	fi
	
	
	
	echo -e "${_AXE_BLOCK_MODE} End of build_final_extras ${txtrst}"
	return 2
	
}

function create_debug_list()
{
	echo -e "\n${_AXE_BLOCK_MODE} Start of create_debug_list ${txtrst}"
echo "copy_pkgbuild
check_pkg_tag
save_settings
stamp_pkgbuild
stage2_pkgrel
reboot_with_questions
toolchain_tag_check
mod_axe_repo_entries
update_repo_database
mask_toolchain_upgrades
export_pkgbuilds_to_usb
reset_toolchain
reset_init
unmask_toolchain_upgrades
build_axe_pkgbuild
linux
build_gcc
build_libtool
build_gcc
build_libltdl
build_binutils
build_glibc
build_linux_api_headers
build_toolchain
build_udev
build_list
build_whats_left
get_pkgbuild_git
refresh_pkgbuild_git
fill_pkgbuild_dir_from_usb
maintain_pkgbuild_dir
fetch_sources
load_toolchain
load_init
questions
stage2_setup
stage3_setup
stage3_bootstrap
setup_all
resume_with_settings
check_makepkg_valid
intro
setup_makepkg
main_menu" > "$_AXE_DIR/debug.list"

	echo -e "${_AXE_BLOCK_MODE} End of create_debug_list ${txtrst}"
}


# main script *******************************************************************************************************************************************
#***************************************************************************************************************************************************************

	
	# some pkg fail in root without this
	export FORCE_UNSAFE_CONFIGURE=1
	

	# Check if root
	if [[ $(whoami) != root ]]; then
		echo -e "\n"
		echo -e "${_AXE_FUCKUP_MODE} you must be some kind of root to even get my attention !  Goodbye !${txtrst}"
		echo -e "${_AXE_FUCKUP_MODE} press ${_AXE_ANY_KEY} to continue${txtrst}"
		read -n1 -s
		exit 1
	fi
	
	
	# reset from possible ctrlc during execution
	#uncomment MAKEFLAGS
	sed -i 's/#MAKEFLAGS/MAKEFLAGS/' /etc/makepkg.conf
	# switch to -O2
	sed -i 's/-O3/-O2/' /etc/makepkg.conf
	
	#check if resuming and load settings
	#refresh and fetch dependencies
	#check for working directories and create them if not there
	#check for multilib system and uncomment the repo if commented
	#backup pacman.conf and check for archlinux.fr, write to pacman.conf if not there
	#make backup of originally installed packages, if not already there
	#check for and create all the lists and helper scripts,
	setup_all
	
	#FUNCTION show intro blurb
	intro
	
	#FUNCTION show intro blurb
	debug_select
	
	#FUNCTION backup then setup makepkg.conf
	setup_makepkg
	
	#FUNCTION check for valid makepkg, very important for correct compilation
	check_makepkg_valid
	
	if [[ $_AXE_LINUX_RESUME_YES -eq 1 ]]; then
		_AXE_LINUX_RESUME_YES=0 && save_settings
		echo -e "  ${_AXE_INFO_MODE} back from linux reboot skipping some stuff ${txtrst}"
	else
		#FUNCTION questions
		questions
	
		#main menu
		main_menu
		if [[ ! $? -eq 0 ]]; then
			exit 1
		fi
		
		if [[ "$_AXE_STAGE" -eq 1 ]]; then
			#build optimisede toolchain , contains tag check so wont get built again in case it was built at the menu
			build_toolchain
				
			
			#build kernel and reboot
			build_axe_pkgbuild "linux" "--install" "--nocon" "--noforce" "$_AXE_LINUX_O2_O3"
			if [[ $? -lt 5 ]]; then
				_AXE_LINUX_RESUME_YES=1
				save_settings
				reboot_with_questions
				exit 0
			fi
		fi
	
	fi

	if [[ "$_AXE_UDEV_INSTALLED_YES" -eq 0 ]]; then
		build_udev
		if [[ $? -eq 0 ]]; then
			_AXE_UDEV_INSTALLED_YES=1 && save_settings
			echo -e "${_AXE_BLOCK_MODE} End of build_udev ${txtrst}"
			return 0
		else
			echo -e "  ${_AXE_FUCKUP_MODE} one of the base system components did not build first time round, had to build it from an alternative location or with something modified ${txtrst}"
			echo -e "  ${_AXE_FUCKUP_MODE} check the logs for details ${txtrst}"
			echo -e "  ${_AXE_FUCKUP_MODE} this could be a problem, or just a minor glitch you can ignore ${txtrst}"
			echo -e "  ${_AXE_FUCKUP_MODE} ${_AXE_Y} to check your logs and exit and try again, ${_AXE_ANY_OTHER_KEY} to ignore the situation ${txtrst}"
			read -n1 _AXE_TMP_CHAR
			if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
				echo -e "${_AXE_BLOCK_MODE} End of build_udev ${txtrst}"
				exit 1
			else
				_AXE_UDEV_INSTALLED_YES=1 && save_settings && reboot_with_questions 
				echo -e "${_AXE_BLOCK_MODE} End of build_udev ${txtrst}"
			fi
		fi
	else
		echo -e "  ${_AXE_INFO_MODE} axe udev already installed skipping ...... ${txtrst}"
	fi
	
	build_list "$_AXE_DIR/axe.list"
	case $?	in
		1)  echo -e "  ${_AXE_FUCKUP_MODE} one or more pkgbuilds on $_AXE_DIR/axe.list did not build first time round, ${txtrst}"
			echo -e "  ${_AXE_FUCKUP_MODE}  had to build it from an alternative location or with something modified, check the logs for details ${txtrst}"
			echo -e "  ${_AXE_FUCKUP_MODE} this could be a problem or just a minor glitch you can ignore ${txtrst}"
			echo -e "  ${_AXE_FUCKUP_MODE} ${_AXE_Y} to check your logs and exit and try again, ${_AXE_ANY_OTHER_KEY} to ignore the situation ${txtrst}"
			read -n1 _AXE_TMP_CHAR
			if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
				exit 1
			fi ;;
		2)  echo -e "  ${_AXE_FUCKUP_MODE} one or more pkgbuilds on $_AXE_DIR/axe.list did not installwhen asked to ,check the logs for details ${txtrst}"
			echo -e "  ${_AXE_FUCKUP_MODE} this could be a problem or just a minor glitch you can ignore ${txtrst}"
			echo -e "  ${_AXE_FUCKUP_MODE} ${_AXE_Y} to check your logs and exit and try again, ${_AXE_ANY_OTHER_KEY} to ignore the situation ${txtrst}"
			read -n1 _AXE_TMP_CHAR
			if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
				exit 1
			fi ;;
	esac
		
	build_whats_left
		
	if [[ $_AXE_BUILD_STAGE3 == "yes" ]]; then
	
		stage2_setup
		
		build_list "$_AXE_DIR/axe.list"
		case $?	in
			1)  echo -e "  ${_AXE_FUCKUP_MODE} one or more pkgbuilds on $_AXE_DIR/axe.list did not build first time round, ${txtrst}"
				echo -e "  ${_AXE_FUCKUP_MODE}  had to build it from an alternative location or with something modified, check the logs for details ${txtrst}"
				echo -e "  ${_AXE_FUCKUP_MODE} this could be a problem or just a minor glitch you can ignore ${txtrst}"
				echo -e "  ${_AXE_FUCKUP_MODE} ${_AXE_Y} to check your logs and exit and try again, ${_AXE_ANY_OTHER_KEY} to ignore the situation ${txtrst}"
				read -n1 _AXE_TMP_CHAR
				if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
					exit 1
				fi ;;
			2)  echo -e "  ${_AXE_FUCKUP_MODE} one or more pkgbuilds on $_AXE_DIR/axe.list did not installwhen asked to ,check the logs for details ${txtrst}"
				echo -e "  ${_AXE_FUCKUP_MODE} this could be a problem or just a minor glitch you can ignore ${txtrst}"
				echo -e "  ${_AXE_FUCKUP_MODE} ${_AXE_Y} to check your logs and exit and try again, ${_AXE_ANY_OTHER_KEY} to ignore the situation ${txtrst}"
				read -n1 _AXE_TMP_CHAR
				if [[ "$_AXE_TMP_CHAR" == "y" ]]; then
					exit 1
				fi ;;
		esac
		
		stage3_setup
		
		exit
		
	else
	
		stage2_setup
		
		exit
		
	fi
	

#end of main section**************************************************************************************************************************************
	
	
	
	
	#sed -i "/gcc$_AXE_MULTILIB_SUFFIX/d" "$_AXE_DIR/scratch"
	#sed -i "/gcc-ada$_AXE_MULTILIB_SUFFIX/d" "$_AXE_DIR/scratch"
	#sed -i "/gcc-fortran$_AXE_MULTILIB_SUFFIX/d" "$_AXE_DIR/scratch"
	#sed -i "/gcc-go$_AXE_MULTILIB_SUFFIX/d" "$_AXE_DIR/scratch"
	#sed -i "/gcc-obj$_AXE_MULTILIB_SUFFIX/d" "$_AXE_DIR/scratch"
	#sed -i "/glibc/d" "$_AXE_DIR/scratch"
	#sed -i "/libltdl/d" "$_AXE_DIR/scratch"
	#sed -i "/libtool$_AXE_MULTILIB_SUFFIX/d" "$_AXE_DIR/scratch"
	#sed -i "/gcc-libs$_AXE_MULTILIB_SUFFIX/d" "$_AXE_DIR/scratch"
	#sed -i "/binutils$_AXE_MULTILIB_SUFFIX/d" "$_AXE_DIR/scratch"
	#sed -i "/linux-api-headers/d" "$_AXE_DIR/scratch"
	#sed -i "/lib32-glibc/d" "$_AXE_DIR/scratch"
	#sed -i "/lib32-libltdl/d" "$_AXE_DIR/scratch"
	#sed -i "/linux/d" "$_AXE_DIR/scratch"
	#sed -i "/linux-headers/d" "$_AXE_DIR/scratch"
	
	

	#   delete comments | delete emty lines | delete everything after first space > to file
	sed '/^\#/d' $_AXE_DIR/build-manual.list | grep -v "^$" | sed 's/ .*//' > "$_AXE_DIR/build-manual-tmp.list"

	#   delete comments | delete emty lines | delete everything after first space > to file
	sed '/^\#/d' $_AXE_DIR/build-exclude.list | grep -v "^$" | sed 's/ .*//' > "$_AXE_DIR/build_fail.list"

		#list installed packs | grep not i7 | grep not any arch | delete everything after first space
	expac "%n %p %a" | grep -v "$_AXE_PACKAGER_NAME" | grep -v "any"  | grep -v "lib32.*" | sed 's/ .*//' > "$_AXE_DIR/build-prospects.list"

	diff <(cat $_AXE_DIR/build-prospects.list | sort) <(cat $_AXE_DIR/build_fail.list | sort) | grep \<|cut -f2 -d' ' > "$_AXE_DIR/build-targets.list"


		expac "%n %a" | grep -v "any"  | grep -v "lib32.*" | sed 's/ .*//' > "$_AXE_DIR/build-prospects-final.list"


		diff <(cat $_AXE_DIR/build-prospects-final.list | sort) <(cat $_AXE_DIR/build-fail-final.list | sort) | grep \<|cut -f2 -d' ' > "$_AXE_DIR/build-targets-final.list"


			#strip the packages not in original-installed-packages.list
			pacman -Rs $(comm -23 <(pacman -Qeq|sort) <((for i in $(cat $_AXE_DIR/original-installed-packages.list); do pactree -ul $i; done)|sort -u|cut -d ' ' -f 1))
